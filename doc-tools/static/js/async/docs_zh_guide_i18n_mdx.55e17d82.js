(self.webpackChunk_modern_js_doc_tools_doc=self.webpackChunk_modern_js_doc_tools_doc||[]).push([["docs_zh_guide_i18n_mdx"],{90834:function(e,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var s in n)Object.defineProperty(e,s,{enumerable:!0,get:n[s]})}(n,{frontmatter:function(){return i},title:function(){return o},toc:function(){return l},default:function(){return r}});var c=s("12151"),d=s("23169"),i={},o="国际化",l=[{text:"配置默认语言",depth:2,id:"配置默认语言"},{text:"配置 doc.themeConfig.locales",depth:2,id:"配置-doc-themeconfig-locales"},{text:"新建不同的语言版本的文档",depth:2,id:"新建不同的语言版本的文档"}];function t(e){var n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",ol:"ol",code:"code",h2:"h2",div:"div",button:"button",pre:"pre"},(0,d.useMDXComponents)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"国际化",children:["国际化",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#国际化",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在 Modern.js Doc 中实现文档的国际化，你需要做三件事情:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"配置默认语言。"}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.ol,{start:"2",children:["\n",(0,c.jsxs)(n.li,{children:["配置 ",(0,c.jsx)(n.code,{children:"doc.themeConfig.locales"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.ol,{start:"3",children:["\n",(0,c.jsx)(n.li,{children:"新建不同的语言版本的文档。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"配置默认语言",children:["配置默认语言",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置默认语言",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"modern.config.ts"}),"中，你可以通过 ",(0,c.jsx)(n.code,{children:"doc.lang"})," 配置文档的默认语言，如下例子所示:"]}),"\n",(0,c.jsxs)(n.div,{className:"language-",children:[(0,c.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,c.jsxs)(n.div,{className:"modern-code-content",children:[(0,c.jsx)(n.button,{className:"copy"}),(0,c.jsx)(n.pre,{className:"code",children:(0,c.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import docTools, { defineConfig } from '@modern-js/doc-tools';\n\nexport default defineConfig({\n  doc: {\n    lang: 'zh',\n  },\n  plugins: [docTools()],\n});\n"})})]})]}),"\n",(0,c.jsxs)(n.p,{children:["这很重要，因为对于默认语言下的路由，框架会去掉语言前缀，比如 ",(0,c.jsx)(n.code,{children:"/zh/guide/getting-started"})," 会被转换为 ",(0,c.jsx)(n.code,{children:"/guide/getting-started"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"配置-doc-themeconfig-locales",children:["配置 ",(0,c.jsx)(n.code,{children:"doc.themeConfig.locales"}),(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-doc-themeconfig-locales",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"modern.config.ts"}),"中，你可以通过 ",(0,c.jsx)(n.code,{children:"doc.themeConfig.locales"})," 配置文档的多语言版本，如下例子所示:"]}),"\n",(0,c.jsxs)(n.div,{className:"language-",children:[(0,c.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,c.jsxs)(n.div,{className:"modern-code-content",children:[(0,c.jsx)(n.button,{className:"copy"}),(0,c.jsx)(n.pre,{className:"code",children:(0,c.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import docTools, { defineConfig } from '@modern-js/doc-tools';\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // locales 为一个对象数组\n      locales: [\n        {\n          lang: 'en',\n          // 导航栏切换语言的标签\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n        },\n        {\n          lang: 'zh',\n          // 导航栏切换语言的标签\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n"})})]})]}),"\n",(0,c.jsxs)(n.p,{children:["在这个例子中，我们对不同语言的文档进行了标题、描述、导航栏语言标签的配置。当然，一般情况下我们还需要进行其它信息的配置，比如 ",(0,c.jsx)(n.code,{children:"sidebar"}),"、",(0,c.jsx)(n.code,{children:"nav"})," 等。下面我们以 ",(0,c.jsx)(n.code,{children:"nav"})," 为例来看看如何配置。"]}),"\n",(0,c.jsx)(n.p,{children:"首先我们新建一个工具函数，用于根据语言返回不同的文本和链接:"}),"\n",(0,c.jsxs)(n.div,{className:"language-",children:[(0,c.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,c.jsxs)(n.div,{className:"modern-code-content",children:[(0,c.jsx)(n.button,{className:"copy"}),(0,c.jsx)(n.pre,{className:"code",children:(0,c.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"// 新增工具函数，返回 getText 和 getLink 方法\nfunction getI18nHelper(lang: 'zh' | 'en') {\n  const isZh = lang === 'zh';\n  // 我们默认语言是中文，所以这里的 prefix 为 ''，如果默认语言是英文，那么 prefix 为 '/en'\n  const prefix = isZh ? '' : '/en';\n  const getLink = (str: string) => `${prefix}${str}`;\n  const getText = (zhText: string, enText: string) => (isZh ? zhText : enText);\n  return { getText, getLink };\n}\n"})})]})]}),"\n",(0,c.jsxs)(n.p,{children:["然后基于工具函数来组装 ",(0,c.jsx)(n.code,{children:"nav"})," 配置:"]}),"\n",(0,c.jsxs)(n.div,{className:"language-",children:[(0,c.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,c.jsxs)(n.div,{className:"modern-code-content",children:[(0,c.jsx)(n.button,{className:"copy"}),(0,c.jsx)(n.pre,{className:"code",children:(0,c.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"function getNavbar(lang: 'zh' | 'en'): NavItem[] {\n  const { getLink, getText } = getI18nHelper(lang);\n\n  return [\n    {\n      text: getText('指南', 'Guide'),\n      link: getLink('/guide/getting-started'),\n      activeMatch: '/guide/',\n    },\n    {\n      text: getText('API', 'API'),\n      link: getLink('/api/'),\n      activeMatch: '/api/',\n    },\n  ];\n}\n"})})]})]}),"\n",(0,c.jsxs)(n.p,{children:["最后在 ",(0,c.jsx)(n.code,{children:"locales"})," 配置中使用:"]}),"\n",(0,c.jsxs)(n.div,{className:"language-",children:[(0,c.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,c.jsxs)(n.div,{className:"modern-code-content",children:[(0,c.jsx)(n.button,{className:"copy"}),(0,c.jsx)(n.pre,{className:"code",children:(0,c.jsx)(n.code,{className:"language-diff",meta:'title="modern.config.ts"',children:"import docTools, { defineConfig } from '@modern-js/doc-tools';\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      locales: [\n        {\n          lang: 'en',\n          // 导航栏切换语言的标签\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n+          nav: getNavbar('en'),\n        },\n        {\n          lang: 'zh',\n          // 导航栏切换语言的标签\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n+          nav: getNavbar('zh'),\n        },\n      ]\n    },\n  },\n  plugins: [docTools()],\n});\n"})})]})]}),"\n",(0,c.jsxs)(n.p,{children:["对于其它的国际化参数配置，请参考",(0,c.jsx)(n.a,{href:"/api/config-theme#locales",children:"API 类型"}),"。"]}),"\n",(0,c.jsxs)(n.h2,{id:"新建不同的语言版本的文档",children:["新建不同的语言版本的文档",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#新建不同的语言版本的文档",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"在做好上面的配置后，我们就可以开始新建不同语言版本的文档了，非常简单，我们只需要在文档根目录下新建如下的结构即可："}),"\n",(0,c.jsx)(n.div,{className:"language-",children:(0,c.jsxs)(n.div,{className:"modern-code-content",children:[(0,c.jsx)(n.button,{className:"copy"}),(0,c.jsx)(n.pre,{className:"code",children:(0,c.jsx)(n.code,{className:"language-bash",children:"docs\n├── en\n│   ├── api\n│   │   └── index.md\n│   └── guide\n│       └── getting-started.md\n└── zh\n    ├── api\n    │   └── index.md\n    └── guide\n        └── getting-started.md\n"})})]})}),"\n",(0,c.jsxs)(n.p,{children:["可以看到，我们把不同语言的文档放在了 ",(0,c.jsx)(n.code,{children:"docs"})," 目录下的 ",(0,c.jsx)(n.code,{children:"en"})," 和 ",(0,c.jsx)(n.code,{children:"zh"})," 目录中，这样就可以方便地区分不同语言的文档了。"]})]})}var r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,d.useMDXComponents)(),e.components).wrapper;return n?(0,c.jsx)(n,Object.assign({},e,{children:(0,c.jsx)(t,e)})):t(e)}}}]);