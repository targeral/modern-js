(self.webpackChunk_modern_js_doc_tools_doc=self.webpackChunk_modern_js_doc_tools_doc||[]).push([["docs_en_guide_i18n_mdx"],{12276:function(e,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var s in n)Object.defineProperty(e,s,{enumerable:!0,get:n[s]})}(n,{frontmatter:function(){return o},title:function(){return c},toc:function(){return a},default:function(){return r}});var t=s("12151"),i=s("23169"),o={},c="I18n",a=[{text:"Configure Default Language",depth:2,id:"configure-default-language"},{text:"Configure doc.themeConfig.locales",depth:2,id:"configure-doc.themeconfig.locales"},{text:"Create Documents",depth:2,id:"create-documents"}];function d(e){var n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",ol:"ol",code:"code",h2:"h2",div:"div",button:"button",pre:"pre"},(0,i.useMDXComponents)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"i18n",children:["I18n",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#i18n",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"To implement i18n in Modern.js Doc, you need to do three things:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Configure the default language."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Configure ",(0,t.jsx)(n.code,{children:"doc.themeConfig.locales"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Create documents in different language version."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"configure-default-language",children:["Configure Default Language",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configure-default-language",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"modern.config.ts"}),", you can configure the default language of the document via ",(0,t.jsx)(n.code,{children:"doc.lang"}),", as shown in the following example:"]}),"\n",(0,t.jsxs)(n.div,{className:"language-",children:[(0,t.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,t.jsxs)(n.div,{className:"modern-code-content",children:[(0,t.jsx)(n.button,{className:"copy"}),(0,t.jsx)(n.pre,{className:"code",children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import docTools, { defineConfig } from '@modern-js/doc-tools';\n\nexport default defineConfig({\n  doc: {\n    lang: 'zh',\n  },\n  plugins: [docTools()],\n});\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["This is important, because for routes in the default language, the framework will remove the language prefix, such as ",(0,t.jsx)(n.code,{children:"/zh/guide/getting-started"})," will be converted to ",(0,t.jsx)(n.code,{children:"/guide/getting-started"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"configure-doc.themeconfig.locales",children:["Configure ",(0,t.jsx)(n.code,{children:"doc.themeConfig.locales"}),(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configure-doc.themeconfig.locales",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"modern.config.ts"}),", you can configure the multiple version of the document via ",(0,t.jsx)(n.code,{children:"doc.themeConfig.locales"}),", as shown in the following example:"]}),"\n",(0,t.jsxs)(n.div,{className:"language-",children:[(0,t.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,t.jsxs)(n.div,{className:"modern-code-content",children:[(0,t.jsx)(n.button,{className:"copy"}),(0,t.jsx)(n.pre,{className:"code",children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import docTools, { defineConfig } from '@modern-js/doc-tools';\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // locales is an array of object\n      locales: [\n        {\n          lang: 'en',\n          // Labels for switching languages ​​in the navbar\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n        },\n        {\n          lang: 'zh',\n          // Labels for switching languages ​​in the navbar\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we configure the title, description, and navbar language labels for documents in different languages. Of course, in general, we also need to configure other information, such as ",(0,t.jsx)(n.code,{children:"sidebar"}),", ",(0,t.jsx)(n.code,{children:"nav"}),", etc. Let's take ",(0,t.jsx)(n.code,{children:"nav"})," as an example to see how to configure it."]}),"\n",(0,t.jsx)(n.p,{children:"First, we create a new util function to return different text and links according to the language:\n:"}),"\n",(0,t.jsxs)(n.div,{className:"language-",children:[(0,t.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,t.jsxs)(n.div,{className:"modern-code-content",children:[(0,t.jsx)(n.button,{className:"copy"}),(0,t.jsx)(n.pre,{className:"code",children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"// Added util functions, return getText and getLink methods\nfunction getI18nHelper(lang: 'zh' | 'en') {\n  const isZh = lang === 'zh';\n  // Currently the default language is Chinese, so the prefix here is '', if the default language is English, then the prefix is ​​'/en'\n  const prefix = isZh ? '' : '/en';\n  const getLink = (str: string) => `${prefix}${str}`;\n  const getText = (zhText: string, enText: string) => (isZh ? zhText : enText);\n  return { getText, getLink };\n}\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Then write the ",(0,t.jsx)(n.code,{children:"nav"})," configuration based on the util function:"]}),"\n",(0,t.jsxs)(n.div,{className:"language-",children:[(0,t.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,t.jsxs)(n.div,{className:"modern-code-content",children:[(0,t.jsx)(n.button,{className:"copy"}),(0,t.jsx)(n.pre,{className:"code",children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"function getNavbar(lang: 'zh' | 'en'): NavItem[] {\n  const { getLink, getText } = getI18nHelper(lang);\n\n  return [\n    {\n      text: getText('指南', 'Guide'),\n      link: getLink('/guide/getting-started'),\n      activeMatch: '/guide/',\n    },\n    {\n      text: getText('API', 'API'),\n      link: getLink('/api/'),\n      activeMatch: '/api/',\n    },\n  ];\n}\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Finally used in ",(0,t.jsx)(n.code,{children:"locales"})," config:"]}),"\n",(0,t.jsxs)(n.div,{className:"language-",children:[(0,t.jsx)(n.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,t.jsxs)(n.div,{className:"modern-code-content",children:[(0,t.jsx)(n.button,{className:"copy"}),(0,t.jsx)(n.pre,{className:"code",children:(0,t.jsx)(n.code,{className:"language-diff",meta:'title="modern.config.ts"',children:"import docTools, { defineConfig } from '@modern-js/doc-tools';\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      locales: [\n        {\n          lang: 'en',\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n+          nav: getNavbar('en'),\n        },\n        {\n          lang: 'zh',\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n+          nav: getNavbar('zh'),\n        },\n      ]\n    },\n  },\n  plugins: [docTools()],\n});\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["For other i18n parameters, please refer to ",(0,t.jsx)(n.a,{href:"/api/config-theme#locales",children:"API type"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"create-documents",children:["Create Documents",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#create-documents",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Now we can start to create documents in different language versions. It is very simple. We only need to create the following structure in the document root directory:"}),"\n",(0,t.jsx)(n.div,{className:"language-",children:(0,t.jsxs)(n.div,{className:"modern-code-content",children:[(0,t.jsx)(n.button,{className:"copy"}),(0,t.jsx)(n.pre,{className:"code",children:(0,t.jsx)(n.code,{className:"language-bash",children:"docs\n├── en\n│   ├── api\n│   │   └── index.md\n│   └── guide\n│       └── getting-started.md\n└── zh\n    ├── api\n    │   └── index.md\n    └── guide\n        └── getting-started.md\n"})})]})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see, we put documents in different languages ​​in the ",(0,t.jsx)(n.code,{children:"en"})," and ",(0,t.jsx)(n.code,{children:"zh"})," directories under the ",(0,t.jsx)(n.code,{children:"docs"})," directory, so that we can easily distinguish documents in different languages."]})]})}var r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}}}]);