(self.webpackChunk_modern_js_doc_tools_doc=self.webpackChunk_modern_js_doc_tools_doc||[]).push([["docs_zh_advanced_plugin-system_mdx"],{33643:function(n,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});!function(n,e){for(var s in e)Object.defineProperty(n,s,{enumerable:!0,get:e[s]})}(e,{frontmatter:function(){return o},title:function(){return i},toc:function(){return l},default:function(){return c}});var a=s("12151"),d=s("23169"),o={},i="插件机制",l=[{text:"一个简单的插件示例",depth:2,id:"一个简单的插件示例"},{text:"1. 定义插件",depth:3,id:"1--定义插件"},{text:"2. 使用插件",depth:3,id:"2--使用插件"},{text:"插件能力",depth:2,id:"插件能力"},{text:"1. globalStyles",depth:3,id:"1--globalstyles"},{text:"2. globalUIComponents",depth:3,id:"2--globaluicomponents"},{text:"3. builderConfig",depth:3,id:"3--builderconfig"},{text:"4. config",depth:3,id:"4--config"},{text:"5. beforeBuild",depth:3,id:"5--beforebuild"},{text:"6. afterBuild",depth:3,id:"6--afterbuild"},{text:"7. markdown",depth:3,id:"7--markdown"},{text:"8. extendPageData",depth:3,id:"8--extendpagedata"},{text:"9. addPages",depth:3,id:"9--addpages"}];function r(n){var e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",div:"div",button:"button",pre:"pre",code:"code",ul:"ul",li:"li",strong:"strong"},(0,d.useMDXComponents)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"插件机制",children:["插件机制",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件机制",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"为了保证插件的可扩展性，我们提供了插件机制，你可以通过插件机制来实现很多自定义的功能。"}),"\n",(0,a.jsxs)(e.h2,{id:"一个简单的插件示例",children:["一个简单的插件示例",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一个简单的插件示例",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"我们以注入一个全局组件为例，来看看如何定义和使用插件。"}),"\n",(0,a.jsxs)(e.h3,{id:"1--定义插件",children:["1. 定义插件",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1--定义插件",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginMonitor(slug: string): DocPlugin {\n  // 组件路径\n  const componentPath = path.join(__dirname, 'some-component.tsx');\n  return {\n    // 插件名称\n    name: 'plugin-monitor',\n    // 全局组件的路径\n    globalUIComponents: [componentPath],\n    // 构建阶段的全局变量定义\n    builderConfig: {\n      source: {\n        define: {\n          SLUG: JSON.stringify(slug),\n        },\n      },\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"2--使用插件",children:["2. 使用插件",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2--使用插件",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"modern.config.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="modern.config.ts"',children:"import { pluginMonitor } from './plugin';\n\nexport default {\n  doc: {\n    plugins: [pluginMonitor('test')],\n  },\n};\n"})})]})]}),"\n",(0,a.jsxs)(e.h2,{id:"插件能力",children:["插件能力",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件能力",children:"#"})]}),"\n",(0,a.jsxs)(e.p,{children:["在如上的例子中，我们使用 ",(0,a.jsx)(e.code,{children:"globalComponents"})," 来注入一个全局组件，并且通过 ",(0,a.jsx)(e.code,{children:"builderConfig"})," 来扩展 ",(0,a.jsx)(e.a,{href:"https://modernjs.dev/builder/",target:"_blank",rel:"noopener noreferrer",children:"Modern.js Builder"})," 的构建能力。"]}),"\n",(0,a.jsx)(e.p,{children:"不过这些只是插件能力的一部分，我们可以来梳理一下 Modern.js Doc 插件能力有哪些:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#1-globalstyles",children:"globalStyles"}),"：注入全局样式。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#2-globaluicomponents",children:"globalUIComponents"}),"：注入全局组件。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#3-builderconfig",children:"builderConfig"}),"：扩展 ",(0,a.jsx)(e.a,{href:"https://modernjs.dev/builder/",target:"_blank",rel:"noopener noreferrer",children:"Modern.js Builder"})," 的构建能力。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#4-config",children:"config"}),"：扩展 Modern.js Doc 本身的配置。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#5-beforebuild",children:"beforeBuild"}),"：在构建之前执行的钩子。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#6-afterbuild",children:"afterBuild"}),"：在构建之后执行的钩子。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#7-markdown",children:"markdown"}),": 扩展 Markdown/MDX 编译能力。"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"接下来我们一一介绍这些能力的使用。"}),"\n",(0,a.jsxs)(e.h3,{id:"1--globalstyles",children:["1. globalStyles",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1--globalstyles",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  // 样式路径\n  const stylePath = path.join(__dirname, 'some-style.css');\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 全局样式的路径\n    globalStyles: [stylePath],\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"2--globaluicomponents",children:["2. globalUIComponents",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2--globaluicomponents",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  // 组件路径\n  const componentPath = path.join(__dirname, 'some-component.tsx');\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 全局组件的路径\n    globalUIComponents: [componentPath],\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"3--builderconfig",children:["3. builderConfig",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3--builderconfig",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(slug: string): DocPlugin {\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 构建阶段的全局变量定义\n    builderConfig: {\n      source: {\n        define: {\n          SLUG: JSON.stringify(slug),\n        },\n      },\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"4--config",children:["4. config",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#4--config",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 扩展 Modern.js Doc 本身的配置\n    config(config) {\n      return {\n        ...config,\n        // 这里可以扩展 Modern.js Doc 的配置\n      };\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"5--beforebuild",children:["5. beforeBuild",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#5--beforebuild",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 在构建之前执行的钩子\n    beforeBuild() {\n      // 这里可以执行一些操作\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"6--afterbuild",children:["6. afterBuild",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#6--afterbuild",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 在构建之后执行的钩子\n    afterBuild() {\n      // 这里可以执行一些操作\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"7--markdown",children:["7. markdown",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#7--markdown",children:"#"})]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 扩展 Markdown/MDX 编译能力\n    markdown: {\n      remarkPlugins: [\n        // 添加自定义的 remark 插件\n      ],\n      rehypePlugins: [\n        // 添加自定义的 rehype 插件\n      ],\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.h3,{id:"8--extendpagedata",children:["8. extendPageData",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#8--extendpagedata",children:"#"})]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["类型: ",(0,a.jsx)(e.code,{children:"(pageData: PageData) => void | Promise<void>"})]}),"\n"]}),"\n",(0,a.jsxs)(e.div,{className:"language-",children:[(0,a.jsx)(e.div,{className:"modern-code-title",children:"plugin.ts"}),(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    // 插件名称\n    name: 'plugin-name',\n    // 扩展页面数据\n    extendPageData(pageData) {\n      // 你可以往 pageData 对象上添加或者修改属性\n      pageData.a = 1;\n    },\n  };\n}\n"})})]})]}),"\n",(0,a.jsxs)(e.p,{children:["在扩展页面数据之后，你可以在主题中通过 ",(0,a.jsx)(e.code,{children:"usePageData"})," 这个 hook 来访问页面数据。"]}),"\n",(0,a.jsx)(e.div,{className:"language-",children:(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",children:"import { usePageData } from '@modern-js/doc-tools';\n\nexport function MyComponent() {\n  const { page } = usePageData();\n  // page.a === 1\n  return <div>{page.a}</div>;\n}\n"})})]})}),"\n",(0,a.jsxs)(e.h3,{id:"9--addpages",children:["9. addPages",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#9--addpages",children:"#"})]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"类型"}),"：",(0,a.jsx)(e.code,{children:"(config: UserConfig) => AdditionalPage[] | Promise<AdditionalPage[]>"})]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["其中，",(0,a.jsx)(e.code,{children:"config"})," 为 ",(0,a.jsx)(e.code,{children:"modern.config.ts"})," 配置文件中导出的 ",(0,a.jsx)(e.code,{children:"doc"})," 属性值，",(0,a.jsx)(e.code,{children:"AdditionalPage"})," 的类型定义如下："]}),"\n",(0,a.jsx)(e.div,{className:"language-",children:(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",children:"interface AdditionalPage {\n  routePath: string;\n  filepath?: string;\n  content?: string;\n}\n"})})]})}),"\n",(0,a.jsxs)(e.p,{children:["主要用来添加额外的页面，你可以在 ",(0,a.jsx)(e.code,{children:"addPages"})," 函数中返回一个数组，数组中的每一项都是一个页面的配置，你可以通过 ",(0,a.jsx)(e.code,{children:"routePath"})," 来指定页面的路由，通过 ",(0,a.jsx)(e.code,{children:"filepath"})," 或者 ",(0,a.jsx)(e.code,{children:"content"})," 来指定页面的内容。比如："]}),"\n",(0,a.jsx)(e.div,{className:"language-",children:(0,a.jsxs)(e.div,{className:"modern-code-content",children:[(0,a.jsx)(e.button,{className:"copy"}),(0,a.jsx)(e.pre,{className:"code",children:(0,a.jsx)(e.code,{className:"language-tsx",children:"import path from 'path';\nimport { DocPlugin } from '@modern-js/doc-tools';\n\nexport function docPluginDemo(): DocPlugin {\n  return {\n    name: 'add-pages',\n    addPages() {\n      return [\n        //  支持真实文件的绝对路径(filepath)，这样会读取磁盘中的 md(x) 内容\n        {\n          routePath: '/filepath-route',\n          filepath: path.join(__dirname, 'blog', 'index.md'),\n        },\n        //  支持通过 content 参数直接传入 md(x) 内容\n        {\n          routePath: '/content-route',\n          content: '# Demo2',\n        },\n      ];\n    },\n  };\n}\n"})})]})})]})}var c=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,d.useMDXComponents)(),n.components).wrapper;return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(r,n)})):r(n)}}}]);