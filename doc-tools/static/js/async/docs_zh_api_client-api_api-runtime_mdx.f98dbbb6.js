(self.webpackChunk_modern_js_doc_tools_doc=self.webpackChunk_modern_js_doc_tools_doc||[]).push([["docs_zh_api_client-api_api-runtime_mdx"],{82720:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return h}});var r,a=s("15169"),t=s("43932"),o=s("9880"),i=s("23169"),d=s("44831");function c(n){var e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code"},(0,i.useMDXComponents)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"runtime-api",children:["Runtime API",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#runtime-api",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"Modern.js Doc 暴露一些运行时 API，方便你做一些自定义的逻辑。"}),"\n",(0,o.jsxs)(e.h2,{id:"usepagedata",children:["usePageData",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#usepagedata",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"获取当前页面的数据，返回值为一个对象，包含了当前页面的所有数据。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import { usePageData } from '@modern-js/doc-tools/runtime';\n\nfunction MyComponent() {\n  const pageData = usePageData();\n  return <div>{pageData.page.title}</div>;\n}\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"uselang",children:["useLang",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#uselang",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"获取当前语言，返回值为一个字符串，即当前语言。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import { useLang } from '@modern-js/doc-tools/runtime';\n\nfunction MyComponent() {\n  const lang = useLang();\n  // lang === 'zh-CN'\n  return <div>{lang}</div>;\n}\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"usedark",children:["useDark",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#usedark",children:"#"})]}),"\n",(0,o.jsx)(e.p,{children:"当前主题是否为暗黑模式，返回值为一个布尔值。"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import { useDark } from '@modern-js/doc-tools/runtime';\n\nfunction MyComponent() {\n  const dark = useDark();\n  return <div>{dark}</div>;\n}\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"usei18n",children:["useI18n",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#usei18n",children:"#"})]}),"\n","\n",(0,o.jsx)(d.default,{}),"\n",(0,o.jsxs)(e.h2,{id:"路由-hook",children:["路由 Hook",(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#路由-hook",children:"#"})]}),"\n",(0,o.jsxs)(e.p,{children:["框架内部使用并重导出了 ",(0,o.jsx)(e.code,{children:"react-router-dom"})," 的所有 API，你可以这样来使用:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"import { useLocation } from '@modern-js/doc-tools/runtime';\n\nfunction MyComponent() {\n  const location = useLocation();\n  return <div>{location.pathname}</div>;\n}\n"})})]})}(r=globalThis).__RSPRESS_PAGE_META||(r.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fapi%2Fclient-api%2Fapi-runtime.mdx"]={toc:[{text:"usePageData",id:"usepagedata",depth:2},{text:"useLang",id:"uselang",depth:2},{text:"useDark",id:"usedark",depth:2},{text:"useI18n",id:"usei18n",depth:2},{text:"路由 Hook",id:"路由-hook",depth:2}],title:"Runtime API",frontmatter:{}};var h=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,i.useMDXComponents)(),n.components).wrapper;return e?(0,o.jsx)(e,(0,t._)((0,a._)({},n),{children:(0,o.jsx)(c,(0,a._)({},n))})):c(n)}},44831:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return c}});var r,a=s("15169"),t=s("43932"),o=s("9880"),i=s("23169");function d(n){var e=Object.assign({p:"p",code:"code",pre:"pre"},(0,i.useMDXComponents)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["框架提供了 ",(0,o.jsx)(e.code,{children:"useI18n"})," 这个 hook 来获取国际化文本，使用方式如下："]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useI18n } from '@modern-js/doc-tools/runtime';\n\nconst MyComponent = () => {\n  const { t } = useI18n();\n\n  return <div>{t('getting-started')}</div>;\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["为了获得更好的类型提示，你可以在 tsconfig.json 中配置 ",(0,o.jsx)(e.code,{children:"paths"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "paths": {\n      "i18n": ["./i18n.json"]\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"然后在组件中这样使用:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useI18n } from '@modern-js/doc-tools/runtime';\n\nconst MyComponent = () => {\n  const { t } = useI18n<keyof typeof import('i18n')>();\n\n  return <div>{t('getting-started')}</div>;\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["这样你就可以获得 ",(0,o.jsx)(e.code,{children:"i18n.json"})," 中定义的所有文本 key 的类型提示了。"]})]})}(r=globalThis).__RSPRESS_PAGE_META||(r.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Ffragments%2FuseI18n.mdx"]={toc:[],title:"",frontmatter:{}};var c=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,i.useMDXComponents)(),n.components).wrapper;return e?(0,o.jsx)(e,(0,t._)((0,a._)({},n),{children:(0,o.jsx)(d,(0,a._)({},n))})):d(n)}}}]);