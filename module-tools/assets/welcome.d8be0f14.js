import{jsx as o,jsxs as t,Fragment as s}from"react/jsx-runtime";const a=void 0,l=[],d="Welcome to Module Tools";function r(n){const e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code"},n.components);return t(s,{children:[t(e.h1,{id:"welcome-to-module-tools",children:[o(e.a,{className:"header-anchor","aria-hidden":"true",href:"#welcome-to-module-tools",children:"#"}),"Welcome to Module Tools"]}),`
`,o(e.p,{children:"Module Tools is a modules engineering solution for Modern.js, as well as a core dependency. It allows developers to build, debug, and publish module type project more easily. A module type project can mostly be thought of as an npm package type project, which may be a component, component library or tool library project."}),`
`,o(e.p,{children:"If you are planning to develop a project of the npm package type, then you came to the right place! Modern.js provides a professional module engineering solution. It gives you:"}),`
`,t(e.ul,{children:[`
`,t(e.li,{children:[o(e.strong,{children:"Simple project initialization"}),": simply execute the ",o(e.code,{children:"npx @modern-js/create project-dir"})," command, followed by a few interactive questions, to create a complete module type project. The created project also supports the choice of two package managers, ",o(e.a,{href:"https://pnpm.io/",target:"_blank",rel:"nofollow",children:o(e.strong,{children:"pnpm"})})," and ",o(e.a,{href:"https://classic.yarnpkg.com/",target:"_blank",rel:"nofollow",children:o(e.strong,{children:"Yarn"})}),"."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Code formatting"}),": In a module project, you can execute ",o(e.code,{children:"modern lint"})," to format the code. The initialized module project includes the ",o(e.a,{href:"https://eslint.org/docs/latest/user-guide/core-concepts#what-is-eslint",target:"_blank",rel:"nofollow",children:"ESLint"})," ruleset for Modern.js for most scenarios."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Comprehensive build capabilities and faster builds"}),": Module Tools provides high-performance build capabilities based on ",o(e.a,{href:"https://esbuild.github.io/getting-started/",target:"_blank",rel:"nofollow",children:"esbuild"})," and ",o(e.a,{href:"https://swc.rs/",target:"_blank",rel:"nofollow",children:"SWC"}),", and provides rich configurations for different build scenarios."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Storybook debugging tools"}),": Module Tools provides ",o(e.a,{href:"https://storybook.js.org/",target:"_blank",rel:"nofollow",children:"Storybook"})," debugging tools for debugging module projects. After installing the Storybook plugin for Module Tools, you can start it with the ",o(e.code,{children:"modern dev storybook"})," command. You can use Storybook not only for debugging components, but also for other types of modules."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Testing capabilities with Jest"}),": When you need to test a module, you can use the ",o(e.code,{children:"modern test"})," command of Module Tools, which not only integrates with ",o(e.a,{href:"https://jestjs.io/",target:"_blank",rel:"nofollow",children:"Jest"}),", but also provides an API for configuring ",o(e.a,{href:"https://jestjs.io/docs/configuration",target:"_blank",rel:"nofollow",children:"Jest"}),"."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Versioning based on Changesets"}),": When you need to record changes to a project, you can use the ",o(e.code,{children:"modern change"})," command to generate a Markdown file containing the changes; when you need to upgrade a project, you can use the ",o(e.code,{children:"modern bump"})," command to analyze and upgrade the version through the Markdown file; when you need to release a project, you can use the ",o(e.code,{children:"modern release"})," command to release the project; Module Tools implements these commands based on ",o(e.a,{href:"https://github.com/changesets/changesets",target:"_blank",rel:"nofollow",children:"Changesets"}),"."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Extensible plug-in mechanism"}),": Want to integrate additional debugging tools for your project? Or maybe you want to do some extra processing during the build process, Module Tools provides a plugin mechanism and plugin hooks that cover both the ",o(e.code,{children:"dev"})," command and the ",o(e.code,{children:"build"})," command process. You can use them to extend the capabilities of your project."]}),`
`,t(e.li,{children:[o(e.strong,{children:"Lots more!"})," Module Tools will continue to optimize its build and debug features in the future. If there are important issues to be solved in module project building, or if a mainstream module project debugging tool or pattern emerges, then they will probably be supported by Module Tools."]}),`
`]})]})}function c(n={}){const{wrapper:e}=n.components||{};return e?o(e,Object.assign({},n,{children:o(r,n)})):r(n)}const u="2022/12/21 11:15:16",h="# Welcome to Module Tools\n\nModule Tools is a modules engineering solution for Modern.js, as well as a core dependency. It allows developers to build, debug, and publish module type project more easily. A module type project can mostly be thought of as an npm package type project, which may be a component, component library or tool library project.\n\nIf you are planning to develop a project of the npm package type, then you came to the right place! Modern.js provides a professional module engineering solution. It gives you:\n\n- **Simple project initialization**: simply execute the `npx @modern-js/create project-dir` command, followed by a few interactive questions, to create a complete module type project. The created project also supports the choice of two package managers, [**pnpm**](https://pnpm.io/) and [**Yarn**](https://classic.yarnpkg.com/).\n- **Code formatting**: In a module project, you can execute `modern lint` to format the code. The initialized module project includes the [ESLint](https://eslint.org/docs/latest/user-guide/core-concepts#what-is-eslint) ruleset for Modern.js for most scenarios.\n- **Comprehensive build capabilities and faster builds**: Module Tools provides high-performance build capabilities based on [esbuild](https://esbuild.github.io/getting-started/) and [SWC](https://swc.rs/), and provides rich configurations for different build scenarios.\n- **Storybook debugging tools**: Module Tools provides [Storybook](https://storybook.js.org/) debugging tools for debugging module projects. After installing the Storybook plugin for Module Tools, you can start it with the `modern dev storybook` command. You can use Storybook not only for debugging components, but also for other types of modules.\n- **Testing capabilities with Jest**: When you need to test a module, you can use the `modern test` command of Module Tools, which not only integrates with [Jest](https://jestjs.io/), but also provides an API for configuring [Jest](https://jestjs.io/docs/configuration).\n- **Versioning based on Changesets**: When you need to record changes to a project, you can use the `modern change` command to generate a Markdown file containing the changes; when you need to upgrade a project, you can use the `modern bump` command to analyze and upgrade the version through the Markdown file; when you need to release a project, you can use the `modern release` command to release the project; Module Tools implements these commands based on [Changesets](https://github.com/changesets/changesets).\n- **Extensible plug-in mechanism**: Want to integrate additional debugging tools for your project? Or maybe you want to do some extra processing during the build process, Module Tools provides a plugin mechanism and plugin hooks that cover both the `dev` command and the `build` command process. You can use them to extend the capabilities of your project.\n- **Lots more!** Module Tools will continue to optimize its build and debug features in the future. If there are important issues to be solved in module project building, or if a mainstream module project debugging tool or pattern emerges, then they will probably be supported by Module Tools.\n";export{h as content,c as default,a as frontmatter,u as lastUpdatedTime,d as title,l as toc};
