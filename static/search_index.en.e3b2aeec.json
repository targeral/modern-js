[{"id":0,"title":"Commands","routePath":"/en/apis/app/commands","lang":"en","toc":[{"text":"modern dev","id":"modern-dev","depth":2,"charIndex":239},{"text":"Compile Partial Pages","id":"compile-partial-pages","depth":3,"charIndex":1004},{"text":"Specify the page by parameter","id":"specify-the-page-by-parameter","depth":3,"charIndex":1600},{"text":"modern start","id":"modern-start","depth":2,"charIndex":1863},{"text":"modern build","id":"modern-build","depth":2,"charIndex":1971},{"text":"Analyze Bundle","id":"analyze-bundle","depth":3,"charIndex":2417},{"text":"modern new","id":"modern-new","depth":2,"charIndex":3067},{"text":"Add Entry","id":"add-entry","depth":3,"charIndex":3613},{"text":"Enable Features","id":"enable-features","depth":3,"charIndex":3801},{"text":"modern serve","id":"modern-serve","depth":2,"charIndex":4290},{"text":"modern upgrade","id":"modern-upgrade","depth":2,"charIndex":4916},{"text":"modern inspect","id":"modern-inspect","depth":2,"charIndex":5331},{"text":"Configuration Env","id":"configuration-env","depth":3,"charIndex":6382},{"text":"Verbose content","id":"verbose-content","depth":3,"charIndex":6581},{"text":"SSR Configuration","id":"ssr-configuration","depth":3,"charIndex":6790},{"text":"modern lint","id":"modern-lint","depth":2,"charIndex":7273},{"text":"modern test","id":"modern-test","depth":2,"charIndex":7629}],"domain":"","content":"#\n\nModern.js has some built-in commands that can help you quickly start a\ndevelopment server, build production environment code, and more.\n\nThrough this chapter, you can learn about the built-in commands of Modern.js and\nhow to use them.\n\n\nmodern dev#\n\nThe modern dev command is used to start a local development server and compile\nthe source code in the development environment.\n\nUsage: modern dev [options]\n\nOptions:\n  -e --entry     compiler by entry\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n  --analyze             analyze the bundle and view size of each module\n  --web-only            only start web service\n  --api-only            only start API service\n\n\nAfter running modern dev, Modern.js will watch source file changes and apply hot\nmodule replacement.\n\n$ modern dev\n\ninfo    Starting dev server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n\n\nCompile Partial Pages#\n\nIn multi-page (MPA) projects, the --entry option can be added to specify one or\nmore pages to compile. In this way, only part of the code in the project will be\ncompiled, and the dev startup speed will be faster.\n\nFor example, execute modern dev --entry, the entry selector will be displayed in\nthe command line interface:\n\n$ modern dev --entry\n\n? Please select the entry that needs to be built\n❯ ◯ foo\n  ◯ bar\n  ◯ baz\n\n\nFor example, if you select the foo entry, only the code related to the foo entry\nwill be compiled, and the code of other pages will not be compiled.\n\n\nSpecify the page by parameter#\n\nYou can also specify the page name through parameters after --entry, and the\nnames of multiple pages can be separated by commas.\n\n# Compile foo page\nmodern dev --entry foo\n\n# Compile foo and bar pages\nmodern dev --entry foo,bar\n\n\n\nmodern start#\n\nmodern start is an alias of modern dev command, the usage of the two are exactly\nthe same.\n\n\nmodern build#\n\nThe modern build command will build a production-ready product in the dist/\ndirectory by default. You can specify the output directory by modifying the\nconfiguration output.distPath.\n\nUsage: modern build [options]\n\nOptions:\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n  --analyze             analyze the bundle and view size of each module\n\n\n\nAnalyze Bundle#\n\nexecute npx modern build --analyze command, can produce an HTML file that\nanalyzes the volume of the bundle while packaging the production code:\n\nBundle Analyzer saved report to /example/dist/report.html\nFile sizes after production build:\n\n  122.35 KB  dist/static/js/885.1d4fbe5a.js\n  2.3 KB     dist/static/js/main.4b8e8d64.js\n  761 B      dist/static/js/runtime-main.edb7cf35.js\n  645 B      dist/static/css/main.0dd3ecc1.css\n\n\nOpen the above HTML file in the browser, you can see the tile diagram of the\npackaged product, and perform package volume analysis and optimization:\n\n> this features based on webpack-bundle-analyzer.\n\n\nmodern new#\n\nThe modern new command is used to enable features in an existing project.\n\nFor example, add application entry, enable some optional features such as\nTailwind CSS, micro frontend, etc.\n\nUsage: modern new [options]\n\nOptions:\n  -d, --debug            using debug mode to log something (default: false)\n  -c, --config   set default generator config(json string)\n  --dist-tag        use specified tag version for its generator\n  --registry             set npm registry url to run npm command\n  -h, --help             show command help\n\n\n\nAdd Entry#\n\nIn the project, execute the new command to add entries as follows:\n\n$ npx modern new\n? Action Create project element\n? Create project element New \"entry\"\n? Entry name entry\n\n\n\nEnable Features#\n\nIn the project, execute the new command to enable features as follows:\n\n$ npx modern new\n? Action Enable features\n? Enable features (Use arrow keys)\n❯ Enable Tailwind CSS\n  Enable BFF\n  Enable SSG\n  Enable Micro Frontend\n  Enable Unit Test / Integration Test\n  Enable Visual Testing (Storybook)\n\n\nTIP\n\nThe --config parameter needs to use a JSON string.\n\npnpm does not support the use of JSON strings as parameter values currently. Use\nnpm new to turn on.【Relate Issue】\n\n\nmodern serve#\n\nUsually use the modern serve command to enable project run in the production\nenvironment, and you need to execute the `build' command in advance to build the\noutputs.\n\nUsage: modern serve [options]\n\nOptions:\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n  --web-only            only run web service\n  --api-only            only run API service\n\n\nBy default, the project will run in localhost:8080, you can modify the Server\nport number with server.port:\n\nexport default defineConfig({\n  server: {\n    port: 8081,\n  },\n});\n\n\n\nmodern upgrade#\n\nExecute the command npx modern upgrade in the project, by default, dependencies\nin the package.json are updated to the latest version.\n\nUsage: modern upgrade [options]\n\nOptions:\n  --registry   specify npm registry (default: \"\")\n  -d,--debug             using debug mode to log something (default: false)\n  --cwd             app directory (default: \"\")\n  -h, --help             show command help\n\n\n\nmodern inspect#\n\nThe modern inspect command is used to view the Modern.js Builder config and\nwebpack config of the project.\n\nUsage: modern inspect [options]\n\nOptions:\n  --env            view the configuration in the target environment (default: \"development\")\n  --output      Specify the path to output in the dist (default: \"/\")\n  --verbose             Show the full function in the result\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n\n\nAfter executing the command npx modern inspect in the project root directory,\nthe following files will be generated in the dist directory of the project:\n\n * builder.config.js: The Modern.js Builder config to use at build time.\n * webpack.config.web.js: The webpack config used by to use at build time.\n\n➜ npx modern inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Builder Config: /root/my-project/dist/builder.config.js\n  - Webpack Config (web): /root/my-project/dist/webpack.config.web.js\n\n\n\nConfiguration Env#\n\nBy default, the inspect command will output the development configs, you can use\nthe --env production option to output the production configs:\n\nmodern inspect --env production\n\n\n\nVerbose content#\n\nBy default, the inspect command will omit the function content in the config\nobject, you can use the --verbose option to output the full content of the\nfunction:\n\nmodern inspect --verbose\n\n\n\nSSR Configuration#\n\nIf the project has enabled SSR, an additional webpack.config.node.js file will\nbe generated in the dist/, corresponding to the webpack configuration at SSR\nbuild time.\n\n➜ npx modern inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Builder Config: /root/my-project/dist/builder.config.js\n  - Webpack Config (web): /root/my-project/dist/webpack.config.web.js\n  - Webpack Config (node): /root/my-project/dist/webpack.config.node.js\n\n\n\nmodern lint#\n\nRun ESLint to check the syntax of the code.\n\nUsage: modern lint [options] [...files]\n\nOptions:\n  --no-fix    disable auto fix source file\n  -h, --help  display help for command\n\n\nNormally, only the part of the code modified by this commit needs to be checked\nby lint-staged during the git commit phase.\n\n * --no-fix close auto fix by lint.\n\n\nmodern test#\n\nmodern test command will automatically run the test cases.\n\nUsage: modern test [options]\n\nOptions:\n  -h, --help  show command help\n\n\nTIP\n\nmodern test command need to execute the new command in advance to enable the\nunit test/integration test.\n\nThe effect is as follows:\n\n$ npx modern test\n PASS  src/tests/index.test.ts\n  The add method\n    ✓ should work fine. (2ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.994 s, estimated 1 s\n\n\nINFO\n\nFiles match *.test.(js|ts) in api/ or src/ folders will be recognized as test\ncases by default.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/commands.mdx","_relativePath":"en/apis/app/commands.mdx"},{"id":1,"title":"lambda/*.[tj]s","routePath":"/en/apis/app/hooks/api/framework/lambda","lang":"en","toc":[{"text":"Routing Rule","id":"routing-rule","depth":2,"charIndex":278},{"text":"Default Route","id":"default-route","depth":3,"charIndex":294},{"text":"Multi Level Route","id":"multi-level-route","depth":3,"charIndex":447},{"text":"Dynamic Route","id":"dynamic-route","depth":3,"charIndex":719},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":1121},{"text":"Define Function","id":"define-function","depth":2,"charIndex":1531}],"domain":"","content":"#\n\nDeclaring API routing in BFF framework mode. Except some files, files in api/\nare registered as routes.\n\nINFO\n\nuse api/ need execute new command to enable the 「BFF」 feature.\n\nTIP\n\nthis file supports the use js or ts, but the functions must be exported using\nthe ESM syntax.\n\n\nRouting Rule#\n\n\nDefault Route#\n\nThe files named index will be upper level routing:\n\n * api/lambda/index.ts -> $BASENAME/\n * api/lambda/user/index.ts -> $BASENAME/user\n\n\nMulti Level Route#\n\nThe routing system also supports parsing multiple levels of files. and if you\ncreate a folder, the files will still be automatically parsed in the same way.\n\n * api/lambda/hello.ts -> $BASENAME/hello\n * api/lambda/user/list.ts -> $BASENAME/user/list\n\n\nDynamic Route#\n\nDynamic named routing parameters can be supported by creating folders or files\nwith [xxx].\n\n * api/lambda/user/[username]/info.ts -> $BASENAME/user/:username/info\n * api/lambda/user/[username]/delete.ts -> $BASENAME/user/:username/delete\n * api/lambda/article/[id]/info.ts -> $BASENAME/article/:id/info\n\nthe $BASENAME can be configured in modern.config.js, the default value is /api.\n\n\nAllow List#\n\nBy default, all files in the api/ will be parsed as BFF function. but we also\nset a allow list, and these files will not be parsed:\n\n * file name start with _, for example: _utils.ts.\n * files in directory that name start with _, for example:\n   _utils/index.ts、_utils/cp.ts.\n * test files, for example: foo.test.ts.\n * TypeScript define files, for example: hello.d.ts.\n * files in node_module.\n\n\nDefine Function#\n\nthe same as Define Function.","frontmatter":{"title":"lambda/*.[tj]s","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/api/framework/lambda.mdx","_relativePath":"en/apis/app/hooks/api/framework/lambda.mdx"},{"id":2,"title":"**/*.[tj]s","routePath":"/en/apis/app/hooks/api/functions/api","lang":"en","toc":[{"text":"Routing Rule","id":"routing-rule","depth":2,"charIndex":277},{"text":"Default Route","id":"default-route","depth":3,"charIndex":293},{"text":"Multi Level Route","id":"multi-level-route","depth":3,"charIndex":432},{"text":"Dynamic Route","id":"dynamic-route","depth":3,"charIndex":690},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":1071},{"text":"Define Function","id":"define-function","depth":2,"charIndex":1481}],"domain":"","content":"#\n\nDeclaring API routing in BFF function mode. Except some files, files in api/ are\nregistered as routes.\n\nINFO\n\nuse api/ need execute new command to enable the 「BFF」 feature.\n\nTIP\n\nthis file supports the use js or ts, but the functions must be exported using\nthe ESM syntax.\n\n\nRouting Rule#\n\n\nDefault Route#\n\nThe files named index will be upper level routing:\n\n * api/index.ts -> $BASENAME/\n * api/user/index.ts -> $BASENAME/user\n\n\nMulti Level Route#\n\nThe routing system also supports parsing multiple levels of files. and if you\ncreate a folder, the files will still be automatically parsed in the same way.\n\n * api/hello.ts -> $BASENAME/hello\n * api/user/list.ts -> $BASENAME/user/list\n\n\nDynamic Route#\n\nDynamic named routing parameters can be supported by creating folders or files\nwith [xxx].\n\n * api/user/[username]/info.ts -> $BASENAME/user/:username/info\n * api/user/[username]/delete.ts -> $BASENAME/user/:username/delete\n * api/article/[id]/info.ts -> $BASENAME/article/:id/info\n\nthe $BASENAME can be configured in modern.config.js, the default value is /api.\n\n\nAllow List#\n\nBy default, all files in the api/ will be parsed as BFF function. but we also\nset a allow list, and these files will not be parsed:\n\n * file name start with _, for example: _utils.ts.\n * files in directory that name start with _, for example:\n   _utils/index.ts、_utils/cp.ts.\n * test files, for example: foo.test.ts.\n * TypeScript define files, for example: hello.d.ts.\n * files in node_module.\n\n\nDefine Function#\n\nIn addition to the above routing rules, the function definition and export in\nthe code also have conventions.\n\nfunction need named exports, and the name of the exported function is the HTTP\nMethod:\n\nexport const get = async () => {\n  return {\n    name: 'Modern.js',\n    desc: 'Modern web Solutions',\n  };\n};\n\n\nExport the function like above will generate a POST interface.\n\nApp support 9 Method definitions:\nGET、POST、PUT、DELETE、CONNECT、TRACE、PATCH、OPTION、HEAD. so App can use these name\nas function export nane.\n\nThe name is insensitive, whaterver get、Get、GEt、GET, can be accurately\nidentified. And default export, export default xxx will be Get method.\n\nbecause delete is a keyword in JavaScript, use del or DELETE instead.\n\nMultiple functions of different Methods can be defined in one file, but if\nmultiple functions of the same Method are defined, only the first can work.\n\n:::info It should be noted that the defined functions should be asynchronous,\nwhich is related to the type when the function is called.","frontmatter":{"title":"**/*.[tj]s","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/api/functions/api.mdx","_relativePath":"en/apis/app/hooks/api/functions/api.mdx"},{"id":3,"title":"_app.[tj]s","routePath":"/en/apis/app/hooks/api/functions/app","lang":"en","toc":[],"domain":"","content":"#\n\nin BFF function mode, this file can add middleware before BFF 函数.\n\nNOTE\n\nFor detail, see hook","frontmatter":{"title":"_app.[tj]s","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/api/functions/app.mdx","_relativePath":"en/apis/app/hooks/api/functions/app.mdx"},{"id":4,"title":"**/_*.[tj]s, _*/**","routePath":"/en/apis/app/hooks/api/functions/common","lang":"en","toc":[],"domain":"","content":"/_.[tj]s, _/#\n\nunder BFF function mode, these files are not registered as routes.\n\nAny files that not routes, but required in the project can be named in this way.","frontmatter":{"title":"**/_*.[tj]s, _*/**","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/api/functions/common.mdx","_relativePath":"en/apis/app/hooks/api/functions/common.mdx"},{"id":5,"title":"test.[tj]s","routePath":"/en/apis/app/hooks/api/test","lang":"en","toc":[],"domain":"","content":"#\n\nApp's BFF test file, support for writing test cases in the api/ directory which\nfile with suffix .test.[tj]s.\n\nINFO\n\nTo use unit test and integration test, you need to execute the new command in\nadvance to enable the unit test/integration test.","frontmatter":{"title":"test.[tj]s","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/api/test.mdx","_relativePath":"en/apis/app/hooks/api/test.mdx"},{"id":6,"title":"html/","routePath":"/en/apis/app/hooks/config/html","lang":"en","toc":[],"domain":"","content":"#\n\nThe config/html directory allows you to inject custom html snippets in different\nplaces in the default html template.\n\nFor detail, see HTML.","frontmatter":{"title":"html/","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/config/html.mdx","_relativePath":"en/apis/app/hooks/config/html.mdx"},{"id":7,"title":"icon","routePath":"/en/apis/app/hooks/config/icon","lang":"en","toc":[{"text":"Set favicon","id":"set-favicon","depth":2,"charIndex":3},{"text":"Order","id":"order","depth":3,"charIndex":354},{"text":"Set app icon","id":"set-app-icon","depth":2,"charIndex":520},{"text":"Order","id":"order-1","depth":3,"charIndex":894}],"domain":"","content":"#\n\n\nSet favicon#\n\nWhen there is a favicon.* file in the config directory of the project root\ndirectory, Modern.js will automatically set the file to the html.favicon config\nto generate the favicon icon for the page:\n\n./config\n└── favicon.ico\n\n\nAfter the build is complete, you can see that the following tags are\nautomatically generated in the HTML:\n\n\n\n\n\nOrder#\n\nWhen setting up the favicon, Modern.js looks for files in the following order:\n\n * favicon.png\n * favicon.jpg\n * favicon.jpeg\n * favicon.svg\n * favicon.ico\n\n\nSet app icon#\n\nWhen there is an icon.* file in the config directory of the project root\ndirectory, Modern.js will automatically set the file to the html.appIcon config,\nit is used to generate the apple-touch-icon icon for the iOS system.\n\n./config\n└── icon.png\n\n\nAfter the build is complete, you can see that the following tags are\nautomatically generated in the HTML:\n\n\n\n\n\nOrder#\n\nWhen setting the app icon, Modern.js looks for files in the following order:\n\n * icon.png\n * icon.jpg\n * icon.jpeg\n * icon.svg\n * icon.ico","frontmatter":{"title":"icon","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/config/icon.mdx","_relativePath":"en/apis/app/hooks/config/icon.mdx"},{"id":8,"title":"mock/","routePath":"/en/apis/app/hooks/config/mock","lang":"en","toc":[],"domain":"","content":"#\n\nwhen config/mock/index.js exist, Modernjs auto start the Mock service in the\ndevelopment.","frontmatter":{"title":"mock/","sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/config/mock.mdx","_relativePath":"en/apis/app/hooks/config/mock.mdx"},{"id":9,"title":"public/","routePath":"/en/apis/app/hooks/config/public","lang":"en","toc":[{"text":"Description","id":"description","depth":2,"charIndex":138},{"text":"Scene","id":"scene","depth":2,"charIndex":437},{"text":"Compression","id":"compression","depth":2,"charIndex":772}],"domain":"","content":"#\n\nStatic resource files in any format can be placed in the public/, and the files\nwill be Served under the web application domain name.\n\n\nDescription#\n\nThe routing of files to be served is based on the convention of the file system.\npublic/ is the root directory, which corresponds to the root path of the Web\napplication.\n\nFor example, the config/public/sdk/index.js file will be Served under\n${domain}/sdk/index.js after deployment.\n\n\nScene#\n\nFor example, robots.txt, auth.xml and other authentication file.\n\nSDK (requiring the same routing) for other business, or an HTML file for static\nhost.\n\nINFO\n\nFor static resources (such as SVG pictures) that need to be referenced by import\nin the source code, it is recommended to put them in the src/assets/ for\nmanagement.\n\n\nCompression#\n\nIf the file is a .js file, it will be automatically compressed when the\nproduction environment is built.\n\nIf the file ends with .min.js, it will not compression.","frontmatter":{"title":"public/","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/config/public.mdx","_relativePath":"en/apis/app/hooks/config/public.mdx"},{"id":10,"title":"storybook/","routePath":"/en/apis/app/hooks/config/storybook","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js.js supports debugging with Storybook. When you need to configure\nStorybook, configure it in the config/storybook/.\n\nFor detail, see Storybook.\n\nINFO\n\nDebugging with Storybook requires executing the new command to enable the\n「Visual Testing (Storybook)」 mode feature.","frontmatter":{"title":"storybook/","sidebar_position":7},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/config/storybook.mdx","_relativePath":"en/apis/app/hooks/config/storybook.mdx"},{"id":11,"title":"upload/","routePath":"/en/apis/app/hooks/config/upload","lang":"en","toc":[{"text":"Description","id":"description","depth":2,"charIndex":70},{"text":"Scene","id":"scene","depth":2,"charIndex":412},{"text":"Compression","id":"compression","depth":2,"charIndex":562},{"text":"More Usage","id":"more-usage","depth":2,"charIndex":740}],"domain":"","content":"#\n\nStatic resource files in any format can be placed in the upload/.\n\n\nDescription#\n\nIn the development environment, the static resource files in this directory will\nbe hosted in the '/upload' path. After building the application product, the\nfiles in this directory will be copied to the dist path.\n\nThis file convention is mainly used for developers to use plugins to upload\nstatic resource files to the CDN.\n\n\nScene#\n\nFor example, the SDK used by the project such as google-analysis.js (usually\nrequires http caching).\n\nImages, font files, generic CSS, etc.\n\n\nCompression#\n\nIf the file is a .js file, it will be automatically compressed when the\nproduction environment is built.\n\nIf the file ends with .min.js, it will not compression.\n\n\nMore Usage#\n\nIn React components, this prefix can be added via built-in environment\nvariables:\n\nexport default () => {\n  return (\n    \n  );\n};\n\n\nWhether in custom HTML, or in any HTML file under 'config/public/', you can\ndirectly use the HTML tag to refer to the resources in the config/upload/:\n\n\n\n\nif output.assetPrefix is configured, add this prefix directly using template\nsyntax:\n\n\n\n\nINFO\n\nModern.js does not support the use files under upload/ in config/public/*.css\nvia URL.","frontmatter":{"title":"upload/","sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/config/upload.mdx","_relativePath":"en/apis/app/hooks/config/upload.mdx"},{"id":12,"title":"modern.config.js","routePath":"/en/apis/app/hooks/modern-config","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js config file, through which you can confiured all aspects of the\ncurrent project.\n\nFor detail, see configure.","frontmatter":{"title":"modern.config.js","sidebar_position":8},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/modern-config.mdx","_relativePath":"en/apis/app/hooks/modern-config.mdx"},{"id":13,"title":"index.[tj]s","routePath":"/en/apis/app/hooks/server/index_","lang":"en","toc":[],"domain":"","content":"#\n\nA file that extends the Modern.js Web Server, to add a Hook or Middleware to the\nWeb Server that the project uses.\n\nIt can intercept requests and responses, authenticate and role, request\npreprocessing, exception bottom-up, etc.;\n\nIt can also be inserted logic into the built-in processing handler (including\nroute matching, resource addressing, header injection, page rendering, static\nweb hosting).\n\nINFO\n\nFor detail, see Hook & Middleware.","frontmatter":{"title":"index.[tj]s","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/server/index_.mdx","_relativePath":"en/apis/app/hooks/server/index_.mdx"},{"id":14,"title":"test.[tj]s","routePath":"/en/apis/app/hooks/server/test","lang":"en","toc":[],"domain":"","content":"#\n\nApp's Web Server test file, support for writing test cases in the server/\ndirectory which file with suffix .test.[tj]s.\n\nINFO\n\nTo use unit test and integration test, you need to execute the new command in\nadvance to enable the unit test/integration test.","frontmatter":{"title":"test.[tj]s","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/server/test.mdx","_relativePath":"en/apis/app/hooks/server/test.mdx"},{"id":15,"title":"shared/","routePath":"/en/apis/app/hooks/shared","lang":"en","toc":[],"domain":"","content":"#\n\nShared directory. When the project has common code under api/, server/, src/,\nput the code under this directory rather then import directly.","frontmatter":{"title":"shared/","sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/shared.mdx","_relativePath":"en/apis/app/hooks/shared.mdx"},{"id":16,"title":"App.[tj]sx","routePath":"/en/apis/app/hooks/src/app","lang":"en","toc":[],"domain":"","content":"#\n\nEntry identifier if App want control route by code.\n\nApp.[tj]sx is not the actual App entry, Modern.js will auto generate the entry\nfile, the content is roughly as follows:\n\n\n\n// App.[jt]sx\n\n\nimport {\n  immer,\n  effects,\n  autoActions,\n  devtools,\n} from '@modern-js/runtime/model';\n\nconst createStatePlugins = config => {\n  const plugins = [];\n  plugins.push(immer(config['immer']));\n  plugins.push(effects(config['effects']));\n  plugins.push(autoActions(config['autoActions']));\n  plugins.push(devtools(config['devtools']));\n  return plugins;\n};\nlet AppWrapper = null;\nfunction render() {\n  AppWrapper = createApp({\n    plugins: [\n      state({\n        ...{ plugins: createStatePlugins(true) },\n        ...App?.config?.state,\n      }),\n    ],\n  })(App);\n  if (IS_BROWSER) {\n    bootstrap(AppWrapper, MOUNT_ID);\n  }\n  return AppWrapper;\n}\nAppWrapper = render();\nexport default AppWrapper;\n\n\nNOTE\n\nIn multi-entry App, each entry can have a App.[jt]sx, for detail, see Entry.","frontmatter":{"title":"App.[tj]sx","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/app.mdx","_relativePath":"en/apis/app/hooks/src/app.mdx"},{"id":17,"title":"index.[tj]s","routePath":"/en/apis/app/hooks/src/index_","lang":"en","toc":[],"domain":"","content":"#\n\nEntry identifier if App want use custom bootstrap. In most case, App.[tj]sx hook\nfile can already meet our needs.\n\nWhen we need to add custom behavior before bootstrap or completely take over the\nwebpack entry, we can place index.[tj]s in src/ or entry directory. The\nfollowing are discussed in two cases:\n\n 1. add custom behavior before bootstrap\n\nJust add default export under src/index.[tj]s:\n\nsrc/index.js\n\n\n\nexport default App => {\n  // do something before bootstrap...\n  bootstrap(App, 'root');\n};\n\n\n 2. Fully take over the webpack entry\n\nWhen there is no default export function under src/index.[tj]sx?, this file is\nthe real webpack entry file, and the code can be organized such as\ncreate-react-app:\n\nsrc/index.jsx\n\n\n\n\n\nReactDOM.render(, document.getElementById('root'));\n","frontmatter":{"title":"index.[tj]s","sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/index_.mdx","_relativePath":"en/apis/app/hooks/src/index_.mdx"},{"id":18,"title":"pages/","routePath":"/en/apis/app/hooks/src/pages","lang":"en","toc":[{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":1019},{"text":"Global Layout","id":"global-layout","depth":3,"charIndex":1810},{"text":"Partial Layout","id":"partial-layout","depth":3,"charIndex":2608},{"text":"404 路由","id":"404-路由","depth":3,"charIndex":3370}],"domain":"","content":"#\n\nEntry identifier if the application want uses file system-based routing.\n\nWhen the entry is the Pages entry type, the files in the pages/ directory will\nbe analyzed to client side routing.\n\nFor example, the following directory:\n\n.\n└── src\n    └── pages\n        ├── about\n        │   └── index.jsx\n        ├── index.jsx\n        └── info.jsx\n\n\nThe generated route is configured as:\n\n[\n  { path: '/', component: 'pages/index.jsx' },\n  { path: '/info' component: 'pages/info.jsx' },\n  { path: '/about', component: 'pages/about/index.jsx' }\n]\n\n\nFiles match the following conditions will not be treated as routing files:\n\n * suffix is not .(j|t)sx?.\n * .d.ts type definition file.\n * test file suffix like .(test|spec|e2e).(j|t)sx?.\n\nTIP\n\nit is recommended to write only the routing files in the pages/, and write the\nbusiness logic to the independent features directory outside the pages/. In this\nway, most of the files in the pages directory will be routing files, and there\nis no need for additional filtering rules.\n\n\nDynamic Routing#\n\nDirectories or files wrapped with [] are considered dynamic routing.\n\nFor example the following directory structure:\n\n.\n└── src\n    └── pages\n        ├── [post]\n        │   ├── detail.jsx\n        │   └── index.js\n        ├── users\n        │   └── [id].jsx\n        ├── index.jsx\n        └── info.jsx\n\n\nThe generated route is configured as:\n\n[\n  { path: '/', component: 'pages/index.jsx' },\n  { path: '/info', component: 'pages/info.jsx' },\n  { path: '/:post/', component: 'pages/[post]/index.js' },\n  { path: '/:post/detail' components: 'pages/[post]/detail.jsx'},\n  { path: '/users/:id', components: 'pages/users/[id].jsx'}\n]\n\n\nBasis dynamic routing, it supports adding special routing suffixes (*、?、+).\n\nFor example: src/pages/users/[id]*.tsx generate route /users/:id*\n\n\nGlobal Layout#\n\nWhen the entire App needs a global layout, it can be achieved through\npages/_app.tsx, which as follows:\n\n\n\n\nexport const App = ({Component, ...pageProps}:{ Component: React.ComponentType}) => {\n  return (\n    \n      \n    \n  );\n}\n\n\nThe above Component is the component to which the route is accessed.\n\nFor example the following directory structure:\n\n.\n└── pages\n    ├── a\n    │   ├── b\n    │   │   └── index.js\n    │   └── index.js\n    └── index.js\n\n\n * access /, the Component is pages/index.js.\n * access /a, the Component is pages/a/index.js.\n * access /a/b, the Component is pages/a/b/index.js.\n\nAdvantages\n * preserve the state of the global layout when the page changes.\n * add global css.\n * handle ComponentDidCatch error\n * use defineConfig dynamic configuration runtime.\n\n\nPartial Layout#\n\nWhen developing an App, where sub routes under the same route may share the\nlayout.\n\nFor this scene, Modern.js convention, when there is a _layout.js in the\ndirectory, the routes can shared this layout.\n\nFor example the following directory structure:\n\n└── pages\n    ├── a\n    │   ├── b\n    │   │   └── index.js\n    │   ├── _layout.js\n    │   └── index.js\n    └── index.js\n\n\npages/a/_layout.js\n\n\n\nconst ALayout = ({ Component, ...pageProps }) => {\n  return ;\n};\nexport default ALayout;\n\n\nThe Component props is the specific route, for example\n\n * access /a, the Component is pages/a/index.js.\n * 访问 /a/b, the Component is pages/a/b/index.js.\n\nIn this way, you can use pages/a/_layout.js to display the routing common layout\nin the a directory.\n\n\n404 路由#\n\nThe convention pages/404.[tj]sx is the default 404 route.\n\nFor example the following directory structure:\n\n.\n└── src\n    └── pages\n        ├── user.js\n        ├── home.js\n        ├── 404.js\n\n\nthe generated route is configured is as:\n\n[\n { path: '/user', component: './pages/user.js'},\n { path: '/home', component: './pages/home.js' },\n { path: '*', component: './pages/404.js'}\n]\n\n\nAll unmatched routes will match to pages/404.[tj]s.","frontmatter":{"title":"pages/","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/pages.mdx","_relativePath":"en/apis/app/hooks/src/pages.mdx"},{"id":19,"title":"routes/","routePath":"/en/apis/app/hooks/src/routes","lang":"en","toc":[{"text":"basic example","id":"basic-example","depth":2,"charIndex":493},{"text":"Dynamic Route","id":"dynamic-route","depth":2,"charIndex":896},{"text":"Dynamic Optional Routes","id":"dynamic-optional-routes","depth":2,"charIndex":1533},{"text":"Layout component","id":"layout-component","depth":2,"charIndex":2249}],"domain":"","content":"#\n\nThe entry identifier when the application uses file system-based routing.\n\nWhen the project structure is of type Routes directory entry, the files in the\nsrc/routes directory are parsed to get the client-side routing configuration.\nSee Routing by convention for more details on usage.\n\nAny layout.[tj]sx and page.[tj]sx under src/routes will be used as a route to\nthe application:\n\n.\n└── routes\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\n\nbasic example#\n\nThe directory names in the routes directory will be used as a mapping of the\nroute url, where layout.tsx is used as the layout component and page.tsx as the\ncontent component, which is a leaf node of the whole route, for example the\nfollowing directory structure:\n\n.\n└── routes\n    ├── page.tsx\n    └── user\n        └── page.tsx\n\n\nThe following two routes are produced:\n\n * /\n * /user\n\n\nDynamic Route#\n\nIf the directory name of the route file is named with [], the generated route\nwill be used as a dynamic route. For example, the following file directories:\n\n└── routes\n    ├── [id]\n    │   └── page.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/[id]/page.tsx file will be converted to a /:id route. All /xxx will\nmatch that route, except for the /blog route, which can be matched exactly.\n\nIn the component, you can get the corresponding parameters by useParams.\n\nIn the loader, params will be used as input to loader, and the corresponding\nparameters can be retrieved through the property params.\n\n\nDynamic Optional Routes#\n\nBy using file directories named with [$], the generated routes will be treated\nas dynamic routes. For example, the following file directory:\n\n└── routes\n    ├── user\n    │   └── [id$]\n    │       └── page.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/user/[id$]/page.tsx file will be converted to the /user/:id? route.\nAll routes under /user will match this route, and the id parameter is optional.\nThis route is commonly used to differentiate between creating and editing.\n\nIn the component, you can get the corresponding named parameters using\nuseParams.\n\nIn the loader, params will be passed as an argument to the loader, and you can\nget them through params.xxx.\n\n\nLayout component#\n\nAs in the example below, you can add a common layout component for all routing\ncomponents by adding layout.tsx\n\n.\n└── routes\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\nYou can represent child components in layout components by using :\n\nroutes/layout.tsx\n\n\n\nexport default () => {\n  return (\n    <>\n      \n    </>\n  );\n};\n\n\nNOTE\n\nis a new API in React Router 6, see [Outlet] for\ndetails(https://reactrouter.com/en/main/components/outlet#outlet).","frontmatter":{"title":"routes/","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/routes.mdx","_relativePath":"en/apis/app/hooks/src/routes.mdx"},{"id":20,"title":"*.[server|node].[tj]sx","routePath":"/en/apis/app/hooks/src/server","lang":"en","toc":[],"domain":"","content":"#\n\nUsed in application projects to place server side code, When *.tsx and *.\n[server|node].tsx coexist, rendering on the server side will give preference to\nthe *. [server|node].tsx file instead of the *.tsx file.","frontmatter":{"title":"*.[server|node].[tj]sx","sidebar_position":8},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/server.mdx","_relativePath":"en/apis/app/hooks/src/server.mdx"},{"id":21,"title":"**/*.stories.[tj]sx","routePath":"/en/apis/app/hooks/src/stories","lang":"en","toc":[],"domain":"","content":"#\n\nApp Storybook debug file. files in src/ which suffix *.stories.[tj]sx are as\ndebug files for Storybook.\n\nExecute the dev story command to debugging these files in the Storybook.\n\nINFO\n\nUsing a Storybook requires executing new command to enable the 「Visual Testing\n(Storybook)」 mode.","frontmatter":{"title":"**/*.stories.[tj]sx","sidebar_position":7},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/stories.mdx","_relativePath":"en/apis/app/hooks/src/stories.mdx"},{"id":22,"title":"**/*.test.[tj]sx?","routePath":"/en/apis/app/hooks/src/test","lang":"en","toc":[],"domain":"","content":"#\n\nApp test file.\n\nThe App supports the file suffixed with .test.[tj]sx under the src/ to write\ntest cases.\n\nINFO\n\nTo use unit test and integration test, you need to execute the new command in\nadvance to enable the unit test/integration test.","frontmatter":{"title":"**/*.test.[tj]sx?","sidebar_position":6},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/hooks/src/test.mdx","_relativePath":"en/apis/app/hooks/src/test.mdx"},{"id":23,"title":"defineConfig","routePath":"/en/apis/app/runtime/app/define-config","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":63},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":580},{"text":"Input","id":"input","depth":3,"charIndex":651},{"text":"Example","id":"example","depth":2,"charIndex":722}],"domain":"","content":"#\n\nFor dynamically configuring applications runtime features.\n\n\nUsage#\n\n\n\n\nRuntime configurations can usually be configured under the runtime of the\nmodern.config.js, such as the router configuration.\n\nThe configuration in modern.config.js is determined at build time, If some\nconfiguration parameters are obtained at runtime, or if the configuration\nparameters are from a module (such as a component), then need use defineConfig\nAPI configuration on runtime.\n\nINFO\n\n@modern-js/app-tools has the same name API, Used to provide TS type for\nconfiguration, please distinguish them.\n\n\nFunction Signature#\n\nfunction defineConfig(Component, config): any;\n\n\n\nInput#\n\n * Component: App root Component.\n * config: runtime config.\n\n\nExample#\n\nfunction App () {\n  ...\n}\n\ndefineConfig(App, {\n  router: {\n    supportHtml5History: false\n  }\n})\n\n\n 1. defineConfig can configuring runtime.state、runtime.router etc.\n\n 2. defineConfig before configuring a property, such as router, you need to make\n    sure that the modern.config.js has been configured to enable this feature.\n\n 3. defineConfig incoming configuration will be merged with the configuration in\n    modern.config.js. Taking router as an example, the final application\n    configuration is as follows:\n\n{\n  // 来自 `modern.config.js`\n  ...runtime.router\n  // 来自 `defineConfig`\n  ...config.router\n}\n","frontmatter":{"title":"defineConfig"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/app/define-config.mdx","_relativePath":"en/apis/app/runtime/app/define-config.mdx"},{"id":24,"title":"hook","routePath":"/en/apis/app/runtime/bff/hook","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":111},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":207},{"text":"Input","id":"input","depth":3,"charIndex":335},{"text":"Example","id":"example","depth":2,"charIndex":442}],"domain":"","content":"#\n\nUsed to add framework middleware under BFF function mode, the middleware will\nexecute before BFF function.\n\n\nUsage#\n\naccording to the framework extend plugin, export from the corresponding\nnamespace:\n\n\n\n\n\nFunction Signature#\n\ntype HookOptions = {\n  addMiddleware: string | function;\n};\n\nfunction hook(options: HookOptions): void;\n\n\n\nInput#\n\n * options: a range of hooks provided by Modern.js.\n   * addMiddleware: add middlewares for BFF.\n\n\nExample#\n\nmiddleware for different frameworks should be different(an example is when using\nthe koa framework):\n\napi/_app.ts\n\n\n\nexport default hook(({ addMiddleware }) => {\n  addMiddleware(async (ctx, next) => {\n    ctx.req.query.id = 'koa';\n    await next();\n  });\n});\n","frontmatter":{"title":"hook"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/bff/hook.mdx","_relativePath":"en/apis/app/runtime/bff/hook.mdx"},{"id":25,"title":"useContext","routePath":"/en/apis/app/runtime/bff/use-context","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":57},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":153},{"text":"Example","id":"example","depth":2,"charIndex":203}],"domain":"","content":"#\n\nUsed to get the request context in the BFF function.\n\n\nUsage#\n\naccording to the framework extend plugin, export from the corresponding\nnamespace:\n\n\n\n\n\nFunction Signature#\n\nfunction useContext(): any\n\n\nExample#\n\nDevelopers can get more request information through context, such as browser\nUA(an example is when using the koa framework):\n\n\n\nexport async function get() {\n  const ctx = useContext();\n  return ctx.req.headers['user-agent'];\n}\n\n\nCAUTION\n\nonly in BFF function, useContext API can be used.\n\nAlthough the useContext API is supported in any framework extend plugin, the\ntypes of return values are different.","frontmatter":{"title":"useContext"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/bff/use-context.mdx","_relativePath":"en/apis/app/runtime/bff/use-context.mdx"},{"id":26,"title":"bootstrap","routePath":"/en/apis/app/runtime/core/bootstrap","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":118},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":177},{"text":"Input","id":"input","depth":3,"charIndex":462},{"text":"Example","id":"example","depth":2,"charIndex":828}],"domain":"","content":"#\n\nUsed to start and mount App, usually without manual calls. This API is only\nrequired when using Custom Bootstrap.\n\n\nUsage#\n\n\n\n\nbootstrap(App, 'root', undefined, ReactDOM);\n\n\n\nFunction Signature#\n\ntype BootStrap = (\n  App: React.ComponentType,\n  id: string | HTMLElement | RuntimeContext,\n  root?: any,\n  ReactDOM?: {\n    render?: Renderer;\n    hydrate?: Renderer;\n    createRoot?: typeof createRoot;\n    hydrateRoot?: typeof hydrateRoot;\n  },\n) => Promise;\n\n\n\nInput#\n\n * AppComponent: reactElement instance created by createApp.\n * rootId: DOM root element id to mount, like \"root\".\n * root: ReactDOM.create the return value, which is used in the scenario where\n   the root needs to destroy the component outside the bootstrap function.\n * ReactDOM: ReactDOM object for distinguishing between React 18 and React 17\n   APIs.\n\n\nExample#\n\n\n\n\nfunction App() {\n  return \nHello Modern.js;\n}\n\nconst WrappedApp = createApp({\n  // customized plugin\n  plugins: [customPlugin()],\n})(App);\n\nbootstrap(WrappedApp, 'root', undefined, ReactDOM);\n\n\nINFO\n\nsince @modern-js/runtime/plugins is a alias, when used in a ts project, its type\nneeds to be declared, Just add the following type declarations to\nsrc/modern-app-env.d.ts:\n\ndeclare module '@modern-js/runtime/plugins';\n\n\nWARNING\n\nbootstrap only supported for use in CSR.","frontmatter":{"title":"bootstrap"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/core/bootstrap.mdx","_relativePath":"en/apis/app/runtime/core/bootstrap.mdx"},{"id":27,"title":"createApp","routePath":"/en/apis/app/runtime/core/create-app","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":108},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":120},{"text":"Input","id":"input","depth":3,"charIndex":219},{"text":"Example","id":"example","depth":2,"charIndex":305},{"text":"Create Custom Entry","id":"create-custom-entry","depth":3,"charIndex":316},{"text":"Custom Plugins","id":"custom-plugins","depth":3,"charIndex":368}],"domain":"","content":"#\n\nUsed to create custom entries, custom runtime plugins. This API is only required\nwhen using Custom App.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\n\n\nfunction createApp(options: { plugins: Plugin[] }): React.ComponentType;\n\n\n\nInput#\n\n * options: optional configuration.\n   * plugins: custom plugin extensions.\n\n\nExample#\n\n\nCreate Custom Entry#\n\nFor details, see bootstrap.\n\n\nCustom Plugins#\n\n\n\nfunction App() {\n  return \napp;\n}\n\nexport default createApp({\n  plugins: [customPlugin()],\n})(App);\n","frontmatter":{"title":"createApp"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/core/create-app.mdx","_relativePath":"en/apis/app/runtime/core/create-app.mdx"},{"id":28,"title":"useLoader","routePath":"/en/apis/app/runtime/core/use-loader","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":270},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":282},{"text":"Input","id":"input","depth":3,"charIndex":803},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1341},{"text":"Example","id":"example","depth":2,"charIndex":1813}],"domain":"","content":"#\n\nIsomorphic API, usually used to make asynchronous requests. When SSR, the server\nlevel uses useLoader to prefetch the data, and the browser side also reuses this\npart of the data.\n\nTIP\n\nWhen using Rspack as the bundler, the useLoader API is not currently supported.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\ntype LoaderFn = (context: runtimeContext) => Promise;\ntype Options = {\n  onSuccess: (data: Record) => void;\n  onError: (error: Error) => void;\n  initialData: Record;\n  skip: boolean;\n  params: Record;\n  static: boolean;\n};\ntype ReturnData = {\n  data: Record;\n  loading: boolean;\n  error: Error;\n  reload: (params?: Record) => Promise | undefined;\n  reloading: boolean;\n};\n\nfunction useLoader(loaderFn: LoaderFn, options: Options): ReturnData;\n\n\nINFO\n\nruntimeContext can refer to useRuntimeContext.\n\n\nInput#\n\n * loaderFn: function for loading data, returning a Promise.\n * options: optional configuration.\n   * onSuccess: successful callback.\n   * onError: error callback.\n   * initialData: the initial data before the first execution,.\n   * skip: when the value is true, the function does not execute.\n   * params: when the result of the params serialization changes, the function\n     is re-executed. params is also passed in as the second argument of the\n     function.\n   * static: when the value is true, useLoader is used for SSG.\n\n\nReturn Value#\n\n * data: return data on successful execution.\n * loading: indicates whether the function is in execution.\n * error: error message when function execution fails.\n * reload: the function can be re-executed after the call.\n   * params: when the value is undefined, the last value will be reused;\n     otherwise, the function will be re-executed with the new value.\n * reloading: during the execution of the call to reload, the value of reloading\n   is true.\n\n\nExample#\n\nfunction Container() {\n  const { data, error, loading } = useLoader(\n    async (context, params) => {\n      console.log(params) // nicole\n      return fetch(user);\n    },\n    {\n      onSuccess: data => {\n        console.log('I did success:(',  data);\n      },\n      onError: error => {\n        console.log('I met error:)',  error);\n      },\n      initialData: { name: 'nicole', gender: 'female' },\n      params: 'nicole'\n    }\n  );\n\n  return ...;\n}\n","frontmatter":{"title":"useLoader"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/core/use-loader.mdx","_relativePath":"en/apis/app/runtime/core/use-loader.mdx"},{"id":29,"title":"useModuleApps","routePath":"/en/apis/app/runtime/core/use-module-apps","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":104},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":116},{"text":"Example","id":"example","depth":2,"charIndex":231},{"text":"Centralized Routing","id":"centralized-routing","depth":3,"charIndex":989},{"text":"Load Animation","id":"load-animation","depth":2,"charIndex":1934}],"domain":"","content":"#\n\nReturns the React components of all micro-front-end sub-applications for freely\ncontrolled routing.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nfunction useModuleApps(): Record>\n\nReturns the React components wrapped around each subapp.\n\n\nExample#\n\nYou need to configure the micro-front-end sub-application information first.\n\nApp.tsx\n\nfunction App() {\n  const { Home, Contact } = useModuleApps();\n\n  return (\n    \n\n      Master APP\n      \n        \n      \n      \n        \n      \n    \n  );\n}\n\ndefineConfig(App, {\n  masterApp: {\n    apps: [\n      {\n        // name is case-sensitive, what name provides is what useModuleApps returns\n        name: 'Home',\n        entry: 'http://127.0.0.1:8081/',\n      },\n      {\n        name: 'Contact',\n        entry: 'http://localhost:8082',\n      },\n    ],\n  },\n});\n\n\nGet the Home and Contact sub-application components(the same as name in the\nconfig) through useModuleApps(). After that, you can load the child application\njust like a normal React component.\n\n\nCentralized Routing#\n\nCentralized Routing is a way to centrally configure the activation routes of\nsub-applications. Add activeWhen config to enable Centralized Routing.\n\nThen use the useModuleApp method to get the MApp component in the main\napplication, and render the MApp in the main application.\n\nmain:\n\n\n\nfunction App() {\n  const { MApp } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  );\n}\n\ndefineConfig(App, {\n  masterApp: {\n    apps: [\n      {\n        // name is case sensitive, what name provides is what useModuleApps returns\n        name: 'Dashboard',\n        activeWhen: '/dashboard',\n        entry: 'http://127.0.0.1:8081/',\n      },\n      {\n        name: 'TableList',\n        activeWhen: '/table',\n        entry: 'http://localhost:8082',\n      },\n    ],\n  },\n});\n\n\nAfter starting the application in this way, accessing the /dashboard route will\nrender the Dashboard, and accessing the /table route will render the TableList.\n\n\nLoad Animation#\n\nThe transition animation of the component loading process can be customized in\nthe following ways.\n\nApp.tsx\n\nfunction App() {\n  const {\n    Components: { Home },\n  } = useModuleApps();\n\n  return (\n    \n\n      Master APP\n      \n         {\n              if (error) {\n                console.error(error);\n                return \nerror: {error?.message};\n              } else if (pastDelay) {\n                return \nloading;\n              } else {\n                return null;\n              }\n            },\n          }}\n        />\n      \n    \n  );\n}\n","frontmatter":{"title":"useModuleApps"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/core/use-module-apps.mdx","_relativePath":"en/apis/app/runtime/core/use-module-apps.mdx"},{"id":30,"title":"useRuntimeContext","routePath":"/en/apis/app/runtime/core/use-runtime-context","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":105},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":213},{"text":"Return Value","id":"return-value","depth":3,"charIndex":466},{"text":"Example","id":"example","depth":2,"charIndex":850}],"domain":"","content":"#\n\nThis function is mainly used to get the runtime context and can only be used in\nfunction components.\n\n\nUsage#\n\n\n\nexport function App() {\n  const runtimeContext = useRuntimeContext();\n  return \nHello World;\n}\n\n\n\nFunction Signature#\n\ntype RuntimeContext = {\n  request: {\n    params: Record;\n    pathname: string;\n    query: Record;\n    headers: IncomingHttpHeaders;\n    cookie: string;\n  };\n  store: ReduckStore;\n};\n\nfunction useRuntimeContext(): RuntimeContext;\n\n\n\nReturn Value#\n\n * request: additional information in the request context.\n   * params: dynamic parameters in the request path.\n   * pathname: the pathname of the request.\n   * query: the query of the request.\n   * headers: the header info of the request.\n   * cookie: the cookie of the request.\n * store: when the runtime.state is enabled, this value is the reduck global\n   store.\n\n\nExample#\n\n\n\n\nfunction App() {\n  const { store } = useRuntimeContext();\n\n  const [state, actions] = store.use(fooModel);\n\n  return \nstate: {state};\n}\n","frontmatter":{"title":"useRuntimeContext"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/core/use-runtime-context.mdx","_relativePath":"en/apis/app/runtime/core/use-runtime-context.mdx"},{"id":31,"title":"Provider","routePath":"/en/apis/app/runtime/model/Provider","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":234},{"text":"Input","id":"input","depth":3,"charIndex":331},{"text":"Example","id":"example","depth":2,"charIndex":477}],"domain":"","content":"#\n\nProvider is a component that injects Reduck's Store into the application's\ncomponent tree, making the Model accessible to components inside the component\ntree. Normally, Provider is defined at the top level of the component tree.\n\n\nFunction Signature#\n\ninterface ProviderProps {\n  store?: ReduckStore;\n  config?: AppConfig;\n}\n\n\n\nInput#\n\n * store: the Store object created by createStore.\n * config: this config to create Reduck Store, same as config param in\n   createApp.\n\n\nExample#\n\nApp\n\nReactDOM.render(\n  \n    \n  ,\n  document.getElementById('root'),\n);\n","frontmatter":{"sidebar_position":8,"title":"Provider"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/Provider.mdx","_relativePath":"en/apis/app/runtime/model/Provider.mdx"},{"id":32,"title":"Auto actions","routePath":"/en/apis/app/runtime/model/auto-actions","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":172},{"text":"Basic Data Type","id":"basic-data-type","depth":3,"charIndex":183},{"text":"Array","id":"array","depth":3,"charIndex":588},{"text":"PlainObject","id":"plainobject","depth":3,"charIndex":2026}],"domain":"","content":"#\n\nReduck can automatically generate Actions according to the type of State, for\neasy to modify State.\n\nTIP\n\ncan use runtime.state.autoActions close auto actions feature.\n\n\nExample#\n\n\nBasic Data Type#\n\nState type in string、number、boolean、null, generate setState Action.\n\nexample\n\nconst fooModel = model('foo').define({\n  state: 1,\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  return (\n    \n\n      \nState: {state}\n       {\n          // call auto generate setState Action\n          actions.setState(state + 1);\n        }}\n      >\n        add\n      \n    \n  );\n}\n\n\n\nArray#\n\nState type is Array, generate the following Actions:\n\n * push: adds one or more elements to the end of the array.\n * pop: removes the last element from the array.\n * shift: removes the first element from the array.\n * unshift: adds one or more elements to the beginning of the array.\n   * usage: arr.unshift(element1, ..., elementN)\n   * elementN: the element or elements to add to the beginning of the array.\n * filter: filter element.\n\n * concat: concat array.\n\n * splice: modify the array by deleting or replacing existing elements or adding\n   new elements in place, and return the modified array(Note that it is\n   different from the native splice return value).\n   * usage: splice(start[, deleteCount[, item1[, item2[, ...]]]])\n   * start: specifies the start position of the modification(counting from 0).\n   * deleteCount: an integer representing the number of array elements to\n     remove.\n   * item, item2, ...: The elements to add to the array, starting at the start\n     position. If not specified, splice will only delete array elements.\n\nexample\n\nconst fooModel = model('foo').define({\n  state: [1, 2, 3],\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  useEffect(() => {\n    actions.push(4);\n    actions.pop();\n    actions.shift(0);\n    actions.unshift();\n    actions.filter(val => val <= 2);\n    actions.splice(0, 1, 1, 2);\n  }, []);\n\n  return (\n    \n\n      \nState: {state}\n    \n  );\n}\n\n\n\nPlainObject#\n\nState type is PlainObject, base on the names contained in State, generate\nset${key}(Camel-Case) Actions.\n\nexample\n\nconst fooModel = model('foo').define({\n  state: {\n    a: 1,\n    b: { value: 1 },\n    c: 'c',\n  },\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  useEffect(() => {\n    actions.setA(2);\n    actions.setB({ value: 2 });\n    actions.setC('d');\n  }, []);\n\n  return (\n    \n\n      \nState: {state}\n    \n  );\n}\n","frontmatter":{"sidebar_position":6,"title":"Auto actions"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/auto-actions.mdx","_relativePath":"en/apis/app/runtime/model/auto-actions.mdx"},{"id":33,"title":"connect","routePath":"/en/apis/app/runtime/model/connect","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":283},{"text":"Input","id":"input","depth":3,"charIndex":671},{"text":"Return Type","id":"return-type","depth":3,"charIndex":1999},{"text":"Example","id":"example","depth":2,"charIndex":2121},{"text":"Basic","id":"basic","depth":3,"charIndex":2132},{"text":"Select State & Actions","id":"select-state-&-actions","depth":3,"charIndex":2731},{"text":"Forwarding Ref","id":"forwarding-ref","depth":3,"charIndex":3146}],"domain":"","content":"#\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see connect.\n\nConnect is the same as useModel and is the corresponding HOC-style API. It is\nrecommended to use the Hook-style useModel first.\n\n\nFunction Signature#\n\ntype SelectStateToProps = (\n  ...modelStates: State[],\n  ownProps?: any,\n) => PlainObject;\ntype SelectActionsToProps = (\n  ...modelActions: Actions[],\n  ownProps?: any,\n) => PlainObject;\n\nfunction connect(models: Model, options?: ConnectOptions);\nfunction connect(\n  models: [...Model[], SelectStateToProps?, SelectActionsToProps?],\n  options?: ConnectOptions,\n);\n\n\n\nInput#\n\n * models: passed one or more Models. When models is an array type parameter,\n   the last two params can be a function for filtering State (SelectStateToProps\n   type) and a function for filtering Actions (SelectActionsToProps type).\n   \n   * SelectStateToProps: modelStates is an array of the State of the passed\n     Model object, ownProps is the props received by current component. The data\n     returned by SelectStateToProps is passed to the props of the component.\n     When the SelectStateToProps parameter is not passed in models, the States\n     of all Models are merged and passed to the props of the component.\n   \n   * SelectActionsToProps: modelActions is an array of the Action of the passed\n     Model object, ownProps is the props received by current component. returned\n     by SelectActionsToProps is passed to the props of the component. When the\n     SelectActionsToProps parameter is not passed in models, the Action of all\n     Models are merged and passed to the props of the component.\n\n * options: Optional parameter for auxiliary configuration. Currently supports\n   setting forwardRef, which is used to control whether to forward the ref of\n   the component. The default value is false, which means that the ref is not\n   forwarded. Set to { forwardRef: true }, which means to forward ref.\n\n\nReturn Type#\n\nReturns a HOC: receives an component, returns a component with extra State and\nActions injected on props.\n\n\nExample#\n\n\nBasic#\n\nconst modelA = model('modelA').define({\n  state: {\n    a: 1,\n  },\n  actions: {\n    incA(state) {\n      return {\n        ...state,\n        a: state.a + 1,\n      };\n    },\n  },\n});\n\nconst modelB = model('modelB').define({\n  state: {\n    b: 10,\n  },\n  actions: {\n    incB(state) {\n      return {\n        ...state,\n        b: state.b + 1,\n      };\n    },\n  },\n});\n\nfunction Test(props) {\n  props.incA(); // call modelA's action\n  props.incB(); // call modelB's action\n\n  props.a; // get modelA's state: a\n  props.b; // get modelB's state: b\n}\n\nexport default connect([modelA, modelB])(Test);\n\n\n\nSelect State & Actions#\n\nfunction Test(props) {\n  props.incAll();\n  props.c;\n}\n\nconst stateSelector = (stateA, stateB) => ({\n  ...stateA,\n  ...stateB,\n  c: stateA.a + stateA.b,\n});\nconst actionsSelector = (actionsA, actionsB) => ({\n  ...actionsA,\n  ...actionsB,\n  incAll: () => {\n    actionsA.incA();\n    actionsB.incB();\n  },\n});\n\nexport default connect([modelA, modelB, stateSelector, actionsSelector])(Test);\n\n\n\nForwarding Ref#\n\n\n\nfunction Test(props, ref) {\n  const { a, b } = props;\n\n  return (\n    \n\n      {a}\n      {b}\n    \n  );\n}\n\nconst TestWrapper = connect([modelA, modelB], { forwardRef: true })(\n  forwardRef(Test),\n);\n\nfunction App() {\n  const testRef = useRef();\n\n  return ;\n}\n","frontmatter":{"sidebar_position":5,"title":"connect"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/connect.mdx","_relativePath":"en/apis/app/runtime/model/connect.mdx"},{"id":34,"title":"createApp","routePath":"/en/apis/app/runtime/model/create-app","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":464},{"text":"Input","id":"input","depth":3,"charIndex":645},{"text":"Return Value","id":"return-value","depth":3,"charIndex":898},{"text":"Example","id":"example","depth":2,"charIndex":1381}],"domain":"","content":"#\n\nReduck will call createApp to create a global application by default. If the\nentire application only needs one Store, then there is no need to call createApp\nmanually.Only need to use createApp when you need to create a Store locally in\nthe app.\n\nCAUTION\n\nNote that the exported createApp in @modern-js/runtime/model is used to manage\nstate, while the exported createApp in @modern-js/runtime is used to create the\nentire application. The two are differently.\n\n\nFunction Signature#\n\ninterface AppConfig extends StoreConfig {\n  devTools?: boolean | DevToolsOptions;\n  autoActions?: boolean;\n}\n\nfunction createApp(config: AppConfig): object;\n\n\n\nInput#\n\n * config\n   * StoreConfig: the same as createStore params.\n   * devTools: the default value is true. when it is an object type, configuring\n     Options of Redux DevTools.\n   * autoActions: the default value is true.if auto generate Actions.\n\n\nReturn Value#\n\nReduck App, consists of the following properties:\n\n * Provider: inject shared Store into locally component tree, same as Provider.\n * useModel: get the Model mounted by the app's local Store, same as useModel.\n * useStaticModel: get the Model mounted by the app's local Store. same as\n   useStaticModel.\n * useLocalModel: get the Model mounted by the app's local Store. same as\n   useLocalModel.\n * useStore: get the Store used locally by the app. same as useStore.\n\n\nExample#\n\nuse createApp, local states can be created to isolate the states between\ndifferent Reduck applications.\n\nconst { Provider: LocalFooProvider, useModel: useLocalFooModel } = createApp();\nconst { Provider: LocalBarProvider, useModel: useLocalBarModel } = createApp();\n\nfunction Foo() {\n  const [fooState] = useLocalFooModel(fooModel);\n  const [barState] = useLocalBarModel(fooModel);\n\n  return (\n    \n\n      \nFoo: {fooState}\n      \nBar: {barState}\n    \n  );\n}\n\nfunction Container() {\n  return (\n    \n      \n        \n      \n    \n  );\n}\n","frontmatter":{"sidebar_position":11,"title":"createApp"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/create-app.mdx","_relativePath":"en/apis/app/runtime/model/create-app.mdx"},{"id":35,"title":"createStore","routePath":"/en/apis/app/runtime/model/create-store","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":351},{"text":"Input","id":"input","depth":3,"charIndex":692},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1019},{"text":"Example","id":"example","depth":2,"charIndex":1303}],"domain":"","content":"#\n\ncreateStore is used to create a Store. Reduck’s Store based on Redux's Store\nimplementatio. Used to store the state of the application and managing the state\nand Model.\n\nIn general, this API is only used when you need to have full control over the\ncreation of the Store. For example, to customize a Store, pass in the 'Provider'\ncomponent to use.\n\n\nFunction Signature#\n\ninterface StoreConfig {\n  initialState?: Record;\n  middlewares?: Middleware[];\n  models?: Model[];\n  plugins?: Plugin[];\n  enhancers?: StoreEnhancer[];\n}\n\ninterface ReduckStore extends ReduxStore {\n  use: typeof useModel;\n  unmount: (model: Model) => void;\n}\n\nfunction createStore(config?: StoreConfig): ReduckStore;\n\n\n\nInput#\n\n * config: store options.\n   * initialState: set the initial state for store.\n   * models: set the Model to mount to the Store in advance(No need for normal\n     use).\n   * middlewares: set Redux middleware.\n   * enhancers: set Redux Store enhancer.\n   * plugins: set Reduck plugin.experimental API, not recommended.\n\n\nReturn Value#\n\nReduck Store:\n\n * use: mount and fetch Model objects dynamically. Usage is the same as\n   'useModel', but can be used outside of React components.\n * unmount: unmount the Model object, and the Model State is cleared from the\n   Store.\n * ReduxStore: Redux Store API.\n\n\nExample#\n\nconst store = createStore();\n\nfunction load() {\n  const [, actions] = store.use(fooModel);\n\n  actions.load();\n}\n","frontmatter":{"sidebar_position":10,"title":"createStore"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/create-store.mdx","_relativePath":"en/apis/app/runtime/model/create-store.mdx"},{"id":36,"title":"handleEffect","routePath":"/en/apis/app/runtime/model/handle-effect","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":633},{"text":"Input","id":"input","depth":3,"charIndex":988},{"text":"Return Type","id":"return-type","depth":3,"charIndex":2942}],"domain":"","content":"#\n\nAn asynchronous function type Effect usually has three states that need to be\nprocessed: in request, request successful, and request failed. The way to handle\nthese states is to write the Action functions (pending, fulfilled, rejected).\n\nWith the help of the handleEffect API, we can generate default Action functions\nto handle different results at each stage of an asynchronous request. The\nstructure of the State returned by the Action generated by handleEffect is as\nfollows:\n\ninterface State {\n  result: any; // result of fulfilled state\n  pending: boolean; // request is pending\n  error: string; // request error message\n}\n\n\n\nFunction Signature#\n\ninterface EffectActions {\n  pending: Action;\n  fulfilled: Action;\n  rejected: Action;\n}\n\ninterface Config {\n  ns?: string;\n  result?: string | false;\n  error?: string | false;\n  pending?: string | false;\n  combineMode?: 'merge' | 'replace';\n  omitResultNamespace?: boolean;\n}\n\nfunction handleEffect(config: Config): EffectActions;\n\n\n\nInput#\n\n * ns: the default returned State structure is flat, By setting this parameter,\n   the returned State can be mounted under the field named by the ns. For\n   example, if ns is set to \"data\", the returned structure is:\n\ninterface State {\n  data: {\n    pending: boolean;\n    result: any;\n    error: string;\n  };\n}\n\n\n * result: the default value is \"result\". This parameter corresponds to the\n   field name that stores the fulfilled state results. For example, set result\n   to \"items\", the returned State structure is:\n\ninterface State {\n  items: any; // Default result -> items\n  pending: boolean;\n  error: string;\n}\n\n\nif result is false, then returned State has no result:\n\ninterface State {\n  pending: boolean;\n  error: string;\n}\n\n\n * pending: the default value is \"pending\". Change the name of the pending field\n   in the returned State. Usage is the same as result.\n\n * error: the default value is \"error\". Change the name of the error field in\n   the returned State. Usage is the same as result.\n\n * combineMode: the default value is \"merge\". Get fulfilled state results. There\n   are two ways to deal with it (The data types that can be automatically\n   processed here are also limited to simple object or array types):\n   \n   * \"merge\": the previous data is merged with the current data. the data is an\n     array type, operation is similar to [].concat(lastData, currentData). the\n     data is an object, operation is similar to {...lastData, ...curData}.\n   * \"replace\": the current data directly replaces the previous data.\n\n * omitResultNamespace: the default value is false. When the result is an object\n   type, you want to mount the result directly on the State of the Model, rather\n   than on \"result\", you can set it to true. For example:\n\n// the result: {user: 'xx', email: 'xx'},\n// config handleEffect({ omitResultNamespace: true })\n// get State like follows:\n{\n  user: 'xx',\n  email: 'xx',\n  pending: false,\n  error: null,\n}\n\n\n\nReturn Type#\n\nObjects are processed by actions in pending, fulfilled, and rejected states.\n\nMore\n\nManage Effect.","frontmatter":{"sidebar_position":7,"title":"handleEffect"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/handle-effect.mdx","_relativePath":"en/apis/app/runtime/model/handle-effect.mdx"},{"id":37,"title":"model","routePath":"/en/apis/app/runtime/model/model_","lang":"en","toc":[{"text":"model","id":"model-1","depth":2,"charIndex":-1},{"text":"define","id":"define","depth":2,"charIndex":340},{"text":"Object Type","id":"object-type","depth":3,"charIndex":468},{"text":"Function Type","id":"function-type","depth":3,"charIndex":927},{"text":"Input","id":"input","depth":3,"charIndex":2034},{"text":"ModelDesc.state","id":"modeldescstate","depth":4,"charIndex":2042},{"text":"ModelDesc.actions","id":"modeldescactions","depth":4,"charIndex":2244},{"text":"ModelDesc.computed","id":"modeldesccomputed","depth":4,"charIndex":2630},{"text":"ModelDesc.effects","id":"modeldesceffects","depth":4,"charIndex":3307}],"domain":"","content":"#\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see model.\n\n\nmodel#\n\nCreate a Model for managing application state.\n\nfunction model(name: string): { define: function }\n\n * name: string, the unique id of the Model created.\n\nexample\n\nmodel('foo');\n\n\n\ndefine#\n\nUsed to define the detailed structure of the Model, supporting passing in an\nobject type or function type parameter.\n\n\nObject Type#\n\nfunction define(modelDesc: ModelDesc): Model;\n\n * modelDesc: ModelDesc, definition of Model structure, includes\n   state、computed、actions、effects etc. props.\n\nexample\n\nconst fooModel = model('foo').define({\n  state: 'foo',\n  computed: {\n    cFoo: state => `c${state}`,\n  },\n  actions: {\n    setState: (state, value) => {\n      return value;\n    },\n  },\n  effects: {\n    loadState: async () => {\n      // get state from remote\n    },\n  },\n});\n\n\n\nFunction Type#\n\nfunction define((context: Context, utils: Utils) => ModelDesc): Model;\n\n * context: Reduck Context, can get underlying store object. store support all\n   Redux Store API, also mounts the use method for consuming the Model, and the\n   unmount method for unmounting the Model.\n * utils: commonly used tool like use、onMount. use is the same as store.use,\n   onMount is the hook function after the Model is mounted.\n\ninterface Utils {\n  use: UseModel;\n  onMount: OnMountHook;\n}\n\ninterface Context {\n  store: ReduxStore & {\n    use: UseModel;\n    unmount: (model: Model) => void;\n  };\n}\n\n\nFor example, through use, you can get the state and actions of the Model itself\nand other Models.\n\nexample\n\nconst fooModel = model('foo').define(() => {\n  return {\n    state: 'foo',\n    actions: {\n      setState: (state, value) => {\n        return value;\n      },\n    },\n  };\n});\n\nconst barModel = model('bar').define((_, { use }) => {\n  return {\n    state: 'bar',\n    effects: {\n      syncFoo() {\n        const [state, actions] = use(fooModel);\n        actions.setState(state);\n      },\n    },\n  };\n});\n\n\n\nInput#\n\nModelDesc.state#\n\nDefine the state of the Model. Technically, any type of State is supported, but\nin practice it is recommended to use a JSON serializable type.\n\ninterface ModelDesc {\n  state: any;\n}\n\n\nModelDesc.actions#\n\nDefine the Actions of the Model. The function type of Actions is:\n\ninterface ModelDesc {\n  actions: {\n    [actionKey: string]: (state: State, payload: any) => State | void;\n  };\n}\n\n\nReduck internally integrates immer, which can directly return the original\nstate. When the Action has no explicit return value, Reduck internally returns a\nmodified new State object.\n\nModelDesc.computed#\n\nDefines the derived state of the Model. The definition of derived state supports\ntwo types:\n\n 1. Depends only on the state of the Model itself\n\ninterface ModelDesc {\n  computed: {\n    [computedKey: string]: (state: State) => any;\n  };\n}\n\n\n 2. Depends on the state of other Models\n\ninterface ModelDesc {\n  computed: {\n    [computedKey: string]: [\n      ...models: Model[],\n      (state: State, ...args: ModelState[]) => any,\n    ];\n  };\n}\n\n\nexample\n\nconst fooModel = model('foo').define({\n  state: 'foo',\n});\n\nconst barModel = model('bar').define({\n  state: 'bar',\n  computed: {\n    combineFoo: [fooModel, (state, fooState) => state + fooState],\n  },\n});\n\n\nModelDesc.effects#\n\nDefines the Effects of the Model. The function types defined in Effects are:\n\ninterface ModelDesc {\n  effects: {\n    [effectKey: string]: (...args: any[]) => any;\n  };\n}\n\n\nexample\n\nconst fooModel = model('foo').define((context, { use }) => ({\n  state: 'foo',\n  effects: {\n    persist() {\n      const [state] = use(fooModel);\n      localStorage.setItem('state', state);\n    },\n  },\n}));\n\n\nMore\n\nDefine Model.","frontmatter":{"sidebar_position":1,"title":"model"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/model_.mdx","_relativePath":"en/apis/app/runtime/model/model_.mdx"},{"id":38,"title":"useLocalModel","routePath":"/en/apis/app/runtime/model/use-local-model","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":157}],"domain":"","content":"#\n\nTo use the State in the Model as a local state, the effect is similar to React's\nuseState. useLocalModel API same as useModel. For detail, see useModel.\n\n\nExample#\n\nfunction Container() {\n  const [state, actions] = useLocalModel(modelA);\n  const [state1, actions1] = useLocalModel(modelA);\n\n  // ...\n}\n\n\nmodelA was loaded twice with useLocalModel above, because useLocalModel consumes\nlocal state, so state and state1 are also completely isolated.\n\nMore\n\nUse Model.","frontmatter":{"sidebar_position":4,"title":"useLocalModel"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-local-model.mdx","_relativePath":"en/apis/app/runtime/model/use-local-model.mdx"},{"id":39,"title":"useModel","routePath":"/en/apis/app/runtime/model/use-model","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":152},{"text":"Input","id":"input","depth":3,"charIndex":482},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1105},{"text":"Example","id":"example","depth":2,"charIndex":1940},{"text":"Basic","id":"basic","depth":3,"charIndex":1951},{"text":"Selector Usage","id":"selector-usage","depth":3,"charIndex":2275}],"domain":"","content":"#\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see model.\n\n\nFunction Signature#\n\nfunction useModel(\n  models: Models[],\n  stateSelector?: StateSelector,\n  actionSelector?: ActionSelector,\n): [state, actions, subscribe];\nfunction useModel(\n  ...models: Models[],\n  stateSelector?: (...args: State[]) => any,\n  actionSelector?: (...args: Actions[]) => any,\n): [state, actions, subscribe];\n\n\n\nInput#\n\n * models: Array of Model objects, which can be passed in as an array type\n   parameter, or all Models can be passed in as parameters one by one.\n * stateSelector: Optional parameters, used to filter State calculations. The\n   first n parameters are the States corresponding to n Models, and the returned\n   data is used as the first element of the useModel return value array.\n * actionSelector: Optional parameters, used to filter Action calculations. The\n   first n parameters are the States corresponding to n Models, and the returned\n   data is used as the second element of the useModel return value array.\n\n\nReturn Value#\n\nReturns an array with each value:\n\n * state: return value of stateSelector. if there is no stateSelector, will\n   combine all incoming Model States(including derived states) and return them.\n   If there is an attribute of the same name in the State of different Models,\n   the following State will override the previous State. when state changes, the\n   component call useModel will re-render.\n * actions: return value of actionSelector. if there is no actionSelector, will\n   combine all incoming Model Action(including Effect) and return them. If there\n   is an attribute of the same name in the Action of different Models, the\n   following Action will override the previous Action.\n * subscribe: A function that subscribes to State changes. This function is\n   called when the State of any Model passed in changes.\n\n\nExample#\n\n\nBasic#\n\n\n\n\nfunction Test(props) {\n  const [state, actions] = useModel([todoModel, filterModel]);\n  actions.add(); // call todoModel add action\n  actions.setVisibleStatus(); // call filterModel filterModel action\n\n  state.items; // get todoModel state items\n  state.visibleStatus; // get filterModel state visibleStatus\n}\n\n\n\nSelector Usage#\n\nfunction Test(props) {\n  const [state, actions] = useModel(\n    [todoModel, filterModel],\n    (todoState, filterState) => ({\n      items: todoState.items,\n      visibleStatus: `${props.prefix}-${filterState.visibleStatus}`,\n    }),\n    (todoActions, filterActions) => ({\n      ...todoActions,\n      ...filterActions,\n    }),\n  );\n  actions.add(); // call todoModel add action\n  actions.setVisibleStatus(); // call filterModel filterModel action\n\n  state.items; // get todoModel state items\n  state.visibleStatus; // get filterModel state visibleStatus\n}\n\n\nMore\n\nuse Model.","frontmatter":{"sidebar_position":2,"title":"useModel"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-model.mdx","_relativePath":"en/apis/app/runtime/model/use-model.mdx"},{"id":40,"title":"useStaticModel","routePath":"/en/apis/app/runtime/model/use-static-model","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":697}],"domain":"","content":"#\n\nIf want to consume a Model in the form of React Hook in the component, and can\nget the current latest state at any time, but you don't want the Model state to\nbe updated, which will cause the component to be re-rendered, we can use\nuseStaticModel.\n\nuseStaticModel API is same as useModel.For detail, see useModel.\n\nTo ensure that the latest state is always available, be careful not to\ndeconstruct the returned state.\n\nfunction App() {\n  // ❌ Do not deconstruct state, but can deconstruct actions.\n  const [{ username }, { logout }] = useStaticModel(userModel);\n\n  // ✅ True Usage.\n  const [state, { logout }] = useStaticModel(userModel);\n\n  useEffect(() => {\n    state.username;\n  }, []);\n}\n\n\n\nExample#\n\nThe following App component consumes the userModel state, but does not use it\ndirectly in JSX. It can be found that changes in the userModel state do not\nnecessarily cause the component to re-render. This situation can be optimized\nusing useStaticModel.\n\nfunction App() {\n  const [state] = useStaticModel(userModel);\n\n  useEffect(() => {\n    // 统计 UV 数据\n    send('pageview', { user: state.user });\n  }, [state]);\n\n  return \nHello;\n}\n\n\nMore\n\nUse Model.","frontmatter":{"sidebar_position":3,"title":"useStaticModel"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-static-model.mdx","_relativePath":"en/apis/app/runtime/model/use-static-model.mdx"},{"id":41,"title":"useStore","routePath":"/en/apis/app/runtime/model/use-store","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":73},{"text":"Return Type","id":"return-type","depth":3,"charIndex":131}],"domain":"","content":"#\n\nuseStore Used to get the store shared by the current component tree.\n\n\nFunction Signature#\n\nfunction useStore(): ReduckStore;\n\n\n\nReturn Type#\n\n * ReduckStore: Reduck Store, type refer to the return type of createStore.\n\nMore\n\nUse Model.","frontmatter":{"sidebar_position":9,"title":"useStore"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-store.mdx","_relativePath":"en/apis/app/runtime/model/use-store.mdx"},{"id":42,"title":"router","routePath":"/en/apis/app/runtime/router/router","lang":"en","toc":[{"text":"hooks","id":"hooks","depth":2,"charIndex":55},{"text":"useNavigate","id":"usenavigate","depth":3,"charIndex":64},{"text":"useLocation","id":"uselocation","depth":3,"charIndex":567},{"text":"useParams","id":"useparams","depth":3,"charIndex":1049},{"text":"Components","id":"components","depth":2,"charIndex":1387},{"text":"Link","id":"link","depth":3,"charIndex":1401},{"text":"NavLink","id":"navlink","depth":3,"charIndex":1723},{"text":"Outlet","id":"outlet","depth":3,"charIndex":2228},{"text":"Route","id":"route","depth":3,"charIndex":2802},{"text":"More","id":"more","depth":2,"charIndex":4481}],"domain":"","content":"#\n\nINFO\n\nThe router solution based on react-router 6.\n\n\nhooks#\n\n\nuseNavigate#\n\ndeclare function useNavigate(): NavigateFunction;\n\ninterface NavigateFunction {\n  (\n    to: To,\n    options?: {\n      replace?: boolean;\n      state?: any;\n      relative?: RelativeRoutingType;\n    },\n  ): void;\n  (delta: number): void;\n}\n\n\nThe useNavigate hook returns a function that lets you navigate programmatically.\n\n\n\nexport function HomeButton() {\n  let navigate = useNavigate();\n\n  function handleClick() {\n    navigate('/home');\n  }\n\n  return (\n    \n      Go home\n    \n  );\n}\n\n\n\nuseLocation#\n\ndeclare function useLocation(): Location;\n\ninterface Location extends Path {\n  state: unknown;\n  key: Key;\n}\n\n\nThe useLocation hook returns the current location object. A new location object\nwould be returned whenever the current location changes.\n\n\n\nfunction usePageViews() {\n  let location = useLocation();\n  React.useEffect(() => {\n    ga.send([\"pageview\", location.pathname]);\n  }, [location]);\n}\n\nfunction App() {\n  usePageViews();\n  return (\n    //...\n  );\n}\n\n\n\nuseParams#\n\ndeclare function useParams(): Readonly>;\n\n\nThe useParams hook returns an object of key/value pairs of the dynamic params\nfrom the current URL that were matched by the .\n\n\n\nfunction BlogPost() {\n  const { slug } = useParams();\n  return \nNow showing post {slug};\n}\n\nfunction App() {\n  return (\n    \n      home\n\n} /> } /> ); }\n\n\nComponents#\n\n\nLink#\n\ndeclare function Link(props: LinkProps): React.ReactElement;\n\ninterface LinkProps\n  extends Omit, 'href'> {\n  replace?: boolean;\n  state?: any;\n  to: To;\n  reloadDocument?: boolean;\n}\n\ntype To = string | Partial;\n\n\nA is an element that lets the user navigate to another page by clicking or\ntapping on it.\n\nAbout\n\n\n\nNavLink#\n\ndeclare function NavLink(props: NavLinkProps): React.ReactElement;\n\ninterface NavLinkProps\n  extends Omit {\n  caseSensitive?: boolean;\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean }) => React.ReactNode);\n  className?: string | ((props: { isActive: boolean }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n\nA is a special kind of that knows whether or not it is \"active\".\n\n\nOutlet#\n\ninterface OutletProps {\n  context?: unknown;\n}\ndeclare function Outlet(props: OutletProps): React.ReactElement | null;\n\n\nAn should be used in parent route elements to render their child route elements.\nThis allows nested UI to show up when child routes are rendered.\n\nfunction Dashboard() {\n  return (\n    \n\n      \n\n\nDashboard\n\n      {/* This element will render either  when the URL is\n          \"/messages\",  at \"/tasks\", or null if it is \"/\"\n      */}\n      \n    \n  );\n}\n\nfunction App() {\n  return (\n    \n      }>\n        } />\n        } />\n      \n    \n  );\n}\n\n\n\nRoute#\n\ninterface RouteObject {\n  path?: string;\n  index?: boolean;\n  children?: React.ReactNode;\n  caseSensitive?: boolean;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  handle?: RouteObject['handle'];\n  shouldRevalidate?: ShouldRevalidateFunction;\n}\n\n\nRoute represents the route information. A Route object couples URL segments to\ncomponents, data loading and data mutations.\n\nRoute can be used as a plain object, passing to the router creation functions:\n\nconst router = createBrowserRouter([\n  {\n    // it renders this element\n    element: ,\n\n    // when the URL matches this segment\n    path: 'teams/:teamId',\n\n    // with this data loaded before rendering\n    loader: async ({ request, params }) => {\n      return fetch(`/fake/api/teams/${params.teamId}.json`, {\n        signal: request.signal,\n      });\n    },\n\n    // performing this mutation when data is submitted to it\n    action: async ({ request }) => {\n      return updateFakeTeam(await request.formData());\n    },\n\n    // and renders this element in case something went wrong\n    errorElement: ,\n  },\n]);\n\n\nYou can also declare your routes with JSX and createRoutesFromElements, the\nprops to the element are identical to the properties of the route objects:\n\nconst router = createBrowserRouter(\n  createRoutesFromElements(\n    }\n      path=\"teams/:teamId\"\n      loader={async ({ params }) => {\n        return fetch(`/fake/api/teams/${params.teamId}.json`);\n      }}\n      action={async ({ request }) => {\n        return updateFakeTeam(await request.formData());\n      }}\n      errorElement={}\n    />,\n  ),\n);\n\n\n\nMore#\n\nYou can access to React Router to get the full API information.","frontmatter":{"title":"router","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/router/router.mdx","_relativePath":"en/apis/app/runtime/router/router.mdx"},{"id":43,"title":"NoSSR","routePath":"/en/apis/app/runtime/ssr/no-ssr","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":196},{"text":"Example","id":"example","depth":2,"charIndex":235},{"text":"Scene","id":"scene","depth":2,"charIndex":562}],"domain":"","content":"#\n\nThe content wrapped by NoSSR will not be rendered at the server, nor will it be\nrendered during the client side hydrate. it will only be rendered immediately\nafter the entire app is rendered.\n\n\nUsage#\n\n\n\nexport default () => ...;\n\n\n\nExample#\n\nIn the following code, the Time component is used to display the current time.\nSince the time obtained by server-side rendering and client side hydrate are\ndiff, React will throw an exception. For this case, you can use NoSSR to\noptimize:\n\n\n\nfunction Time() {\n  return (\n    \n      \nTime: {Date.now()}\n    \n  );\n}\n\n\n\nScene#\n\nIn CSR, it is often necessary to render different content according to the\nbrowser UA, or a parameter of the current page URL. If the application switches\ndirectly to SSR at this time, it is very likely that the results will not meet\nthe expectations.\n\nModern.js provides complete browser side information in the SSR context, which\ncan be used to determine the rendering result of the component on the server\nside.\n\nEven so, if there is too much logic in the application, or the developer wants\nto use the context later, or does not want some content to be rendered at the\nserver side. developer can use the NoSSR component to exclude this part from\nserver-side rendering.","frontmatter":{"title":"NoSSR"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/ssr/no-ssr.mdx","_relativePath":"en/apis/app/runtime/ssr/no-ssr.mdx"},{"id":44,"title":"PreRender","routePath":"/en/apis/app/runtime/ssr/pre-render","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":117},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":172},{"text":"Input","id":"input","depth":3,"charIndex":546},{"text":"Example","id":"example","depth":2,"charIndex":1477}],"domain":"","content":"#\n\nA Helmet-like HOC without content implements SPA routing-level caching, manner\nwithout additional configuration.\n\n\nUsage#\n\n\n\nexport default () => (\n  <>\n    \n  </>\n);\n\n\n\nFunction Signature#\n\nThe PreRender provides a set of configuration for controlling caching rules,\nexpiration times, caching algorithms, and more.\n\ntype Props {\n  interval: number;\n  staleLimit: number;\n  level: number;\n  include: { header?: string[], query?: string[] };\n  matches: { header?: Record, query?: Record }\n}\n\nfunction PreRender(props: Props): React.Component\n\n\n\nInput#\n\n * interval: set the time the cache keep fresh, seconds. During this time, the\n   cache will be used directly and not invoke asynchronous rendering.\n * staleLimit: sets the time when the cache is completely expired,\n   seconds.During this time, The cache can be returned and asynchronous\n   rendering will be invoke, otherwise must wait for the re-rendered result.\n * level: sets the calculation rule level for the cache identity, usually used\n   with includes and matches. The default value is 0.\n\n0: pathname\n1: pathname + querystring\n2: pathname + headers\n3: pathname + querystring + headers\n\n\n * includes: sets the content that needs to be included in the cache identifier,\n   used when the level is not 0. The default value is null.\n * matches: sets the rewriting rule for the value of query or header in cache\n   identity, usually used in cache category, supports regular expressions. The\n   default value is null.\n\n\nExample#\n\n\n\nexport default function App() {\n  return (\n    <>\n      \n      \nHello Modern\n    </>\n  );\n}\n\n\nThe following example shows how to add the parameters in the query and header\ninto the cache identifier calculation:\n\n/* calculate cache identifier using channel in query and language in header */\n\n\n\nThe following example shows how not to let the test channel affect the online\ncache:\n\n/* rewrite the channel value starting with test_ in the query as \"testChannel\", otherwise rewrite it as \"otherChannel\" */\n\n","frontmatter":{"title":"PreRender"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/ssr/pre-render.mdx","_relativePath":"en/apis/app/runtime/ssr/pre-render.mdx"},{"id":45,"title":"act","routePath":"/en/apis/app/runtime/testing/act","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":111},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":123},{"text":"Example","id":"example","depth":2,"charIndex":200}],"domain":"","content":"#\n\nUsed to ensure that behaviors such as rendering, events, data fetching, etc.\nhave been applied to the DOM.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nact is the same as react-dom/test-utils act function.\n\n\nExample#\n\n\n\n\n\ndescribe('test act', () => {\n  it('it should be foo', () => {\n    const el = document.createElement('div');\n    act(() => {\n      ReactDOM.render(, el);\n    });\n\n    expect(el.innerHTML).toBe('\nFoo');\n  });\n});\n","frontmatter":{"title":"act"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/testing/act.mdx","_relativePath":"en/apis/app/runtime/testing/act.mdx"},{"id":46,"title":"cleanup","routePath":"/en/apis/app/runtime/testing/cleanup","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":57},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":69},{"text":"Example","id":"example","depth":2,"charIndex":117}],"domain":"","content":"#\n\nUsed to uninstall all currently rendered components.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nfunction cleanup(): void\n\n\nExample#\n\nINFO\n\nNote that if you are using a testing framework that supports afterEach and it is\ninjected into your testing environment (such as mocha, Jest, and Jasmine), will\nexecute cleanup in the afterEach hook by default. Otherwise, you will need to do\nmanual cleanup after each test.\n\nFor example, if you use the ava test framework, then you need to use the\ntest.after Each hook like this.\n\n\n\n\ntest.afterEach(cleanup);\n\ntest('renders into document', () => {\n  render(\n);\n  // ...\n});\n\n// ... more tests ...\n","frontmatter":{"title":"cleanup","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/testing/cleanup.mdx","_relativePath":"en/apis/app/runtime/testing/cleanup.mdx"},{"id":47,"title":"render","routePath":"/en/apis/app/runtime/testing/render","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":51},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":63},{"text":"Input","id":"input","depth":3,"charIndex":508},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1211},{"text":"Example","id":"example","depth":2,"charIndex":1754}],"domain":"","content":"#\n\nUsed to render the component in the test case.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\ntype Options = {\n  container: DOMElement;\n  baseElement: DOMElement;\n  hydrate: boolean;\n  warpper: React.ComponentType<{children: ReactNode}>;\n  queries: any;\n};\n\ntype RenderResult = {\n  {...queries}: any;\n  container: DOMElement;\n  baseElement: DOMElement;\n  debug: function;\n  rerender: function;\n  unmount: function;\n  asFragment: function;\n}\n\nfunction render(ui: React.ReactElement, options: Options): RenderResult;\n\n\n\nInput#\n\n * ui: the React component that needs to be rendered.\n * options: render options.\n   * container: the dom which component mounted. by default create a div\n     element, and auto append to document.body. the default value is\n     document.body.append(document.createElement('div')).\n   * baseElement: Used to specify the basename used in queries. If container is\n     specified, the default value is the value of container, otherwise it is\n     document.body.\n   * hydrate: If set to true, the ReactDOM.hydrate rendering component is used.\n     The default value is false.\n   * wrapper: a react component that can be used to customize rendering logic.\n   * queries: customize some own queries.\n\n\nReturn Value#\n\n * {...queries}: all available queries.\n * container: the DOM element that React component mounted.\n * baseElement\n * debug\n * rerender: if you want to test some scene when a rendered component is\n   updated, you can use rerender for reality.\n * unmount: unmount rendered components. This API is helpful if you want to test\n   what happens after the component is unmounted.\n * asFragment: return the DocumentFragment of rendered component. used to test\n   the response of the DOM structure after the react event is triggered.\n\n\nExample#\n\n\n\n\ntest('renders a message', () => {\n  const { container, getByText } = render();\n  expect(getByText('Hello, world!')).toBeInTheDocument();\n  expect(container.firstChild).toMatchInlineSnapshot(`\n    \n\n\nHello, World!\n  `);\n});\n","frontmatter":{"title":"render"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/testing/render.mdx","_relativePath":"en/apis/app/runtime/testing/render.mdx"},{"id":48,"title":"renderApp","routePath":"/en/apis/app/runtime/testing/renderApp","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":118},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":433},{"text":"Example","id":"example","depth":2,"charIndex":489}],"domain":"","content":"#\n\nThe render function is used to test normal components, and the renderApp\nfunction is used to test App components.\n\n\nUsage#\n\n\n\n\nApp components refer to components that contain some Modern.js contexts, such as\nApp root components, Containers using Models, etc.\n\nFor the testing of such components, you can use the renderApp function, which\nwill automatically wrap the context information according to the current\nmodern.config.js.\n\n\nFunction Signature#\n\nrenderApp is the same as render.\n\n\nExample#\n\n\n\n\ndescribe('test', () => {\n  it('test App', () => {\n    const { getByText } = renderApp();\n    expect(getByText('Hello Modern!')).toBeInTheDocument();\n  });\n});\n","frontmatter":{"title":"renderApp"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/testing/renderApp.mdx","_relativePath":"en/apis/app/runtime/testing/renderApp.mdx"},{"id":49,"title":"CSS-In-JS API","routePath":"/en/apis/app/runtime/utility/css-in-js","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":38},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":50},{"text":"Example","id":"example","depth":2,"charIndex":99}],"domain":"","content":"#\n\nUse Style Component to write CSS.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nsee styled-component API.\n\n\nExample#\n\n\n\nconst Button = styled.button`\n  background: palevioletred;\n  border-radius: 3px;\n  border: none;\n  color: white;\n`;\n\nconst TomatoButton = styled(Button)`\n  background: tomato;\n`;\n\nfunction ButtonExample() {\n  return (\n    <>\n      I'm purple.\n      \n\n      I'm red.\n    </>\n  );\n}\n","frontmatter":{"title":"CSS-In-JS API"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/utility/css-in-js.mdx","_relativePath":"en/apis/app/runtime/utility/css-in-js.mdx"},{"id":50,"title":"Head","routePath":"/en/apis/app/runtime/utility/head","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":96},{"text":"Example","id":"example","depth":2,"charIndex":135},{"text":"More","id":"more","depth":2,"charIndex":299}],"domain":"","content":"#\n\nUsed to add html elements (such as title, meta, script, etc.) to the element,\nsupports SSR.\n\n\nUsage#\n\n\n\nexport default () => ...;\n\n\n\nExample#\n\n\n\nfunction IndexPage() {\n  return (\n    \n\n      \n        My page title\n        \n      \n      \n\nHello Modern.js!\n    \n  );\n}\n\nexport default IndexPage;\n\n\n\nMore#\n\nFor detail, see react-helmet.","frontmatter":{"title":"Head"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/utility/head.mdx","_relativePath":"en/apis/app/runtime/utility/head.mdx"},{"id":51,"title":"loadable","routePath":"/en/apis/app/runtime/utility/loadable","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":38},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":50},{"text":"Input","id":"input","depth":3,"charIndex":302},{"text":"loadFn","id":"loadfn","depth":4,"charIndex":310},{"text":"options.resolveComponent","id":"optionsresolvecomponent","depth":4,"charIndex":415},{"text":"options.fallback","id":"optionsfallback","depth":4,"charIndex":1397},{"text":"options.ssr","id":"optionsssr","depth":4,"charIndex":1469},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1536},{"text":"LoadableComponent","id":"loadablecomponent","depth":4,"charIndex":1551}],"domain":"","content":"#\n\nUsed to create Loadable component\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\ntype Options = {\n  resolveComponent?: (\n    module: Module,\n    props: Props,\n  ) => React.ComponentType,\n  fallback?: JSX.Element;\n  ssr?: boolean;\n}\n\nfunction loadable(loadFn: Function, options?: Options) => LoadableComponent\n\n\n\nInput#\n\nloadFn#\n\nUsed to load component.\n\n\n\nconst OtherComponent = loadable(() => import('./OtherComponent'));\n\n\noptions.resolveComponent#\n\nType: (module: Module, props: Props) => React.ComponentType\n\nmodule is the component returned by loadFn, and props is the props parameter\naccepted by the component.\n\nBy default, we think that the default export of file is a react component, so we\ncan render the component directly. But when the component is named export, or we\nneed to dynamically determine which component needs to be rendered according to\nthe props, we can use resolveComponent. Here is an example:\n\n'component.js'\n\nexport const Apple = () => 'Apple!';\nexport const Orange = () => 'Orange!';\n\n\n'loadable.js'\n\nconst LoadableApple = loadable(() => import('./components'), {\n  resolveComponent: components => components.Apple,\n});\nconst LoadableOrange = loadable(() => import('./components'), {\n  resolveComponent: components => components.Orange,\n});\nconst LoadableFruit = loadable(() => import('./components'), {\n  resolveComponent: (components, props) => components[props.fruit],\n});\n\n\noptions.fallback#\n\nWhether to display fallback content during loading.\n\noptions.ssr#\n\nWhether to support SSR, the default value is true.\n\n\nReturn Value#\n\nLoadableComponent#\n\ntype LoadableComponent = React.ComponentType<\n  Props & { fallback?: JSX.Element }\n> & {\n  preload(props?: Props): void;\n  load(props?: Props): Promise>;\n};\n","frontmatter":{"title":"loadable"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/utility/loadable.mdx","_relativePath":"en/apis/app/runtime/utility/loadable.mdx"},{"id":52,"title":"Hook","routePath":"/en/apis/app/runtime/web-server/hook","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":143},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":500},{"text":"Input","id":"input","depth":3,"charIndex":1687},{"text":"Example","id":"example","depth":2,"charIndex":2022},{"text":"Redirect","id":"redirect","depth":3,"charIndex":2033},{"text":"Rewrite","id":"rewrite","depth":3,"charIndex":2234},{"text":"HTML Inject","id":"html-inject","depth":3,"charIndex":2460}],"domain":"","content":"#\n\nUsed to extend Modern.js built-in Web Server, all page requests are handled by\nthese hooks.\n\nNOTE\n\nFor more detail, see Extend Web Server.\n\n\nUsage#\n\n\n\nexport const afterMatch: AfterMatchHook = (context, next) => {};\nexport const afterRender: AfterRenderHook = (context, next) => {};\n\n\nINFO\n\nBefore using this API, please execute pnpm run new to create a new \"Custom Web\nServer\" source code directory.\n\npnpm run new\n? Action Create project element\n? New \"Custom Web Server\" source code directory\n\n\n\nFunction Signature#\n\ntype HookContext = {\n  response: {\n    set: (key: string, value: string) => void;\n    status: (code: number) => void;\n    cookies: {\n      set: (key: string, value: string, options?: any) => void;\n      clear: () => void;\n    };\n    raw: (\n      body: string,\n      { status, headers }: { status: number; headers: Record },\n    ) => void;\n  };\n  request: {\n    host: string;\n    pathname: string;\n    query: Record;\n    cookie: string;\n    cookies: {\n      get: (key: string) => string;\n    };\n    headers: IncomingHttpHeaders;\n  };\n};\n\nfunction Hook(context: HookContext, next: NextFunction): Promsie | void;\n\n\ndifferent Hooks additionally provide different contexts. Currently Modern.js\nsupport AfterMatch and AfterRender.\n\ntype AfterMatchContext = HookContext & {\n  router: {\n    redirect: (url: string, status: number) => void;\n    rewrite: (entry: string) => void;\n  };\n};\n\ntype AfterRenderContext = {\n  template: {\n    get: () => string;\n    set: (html: string) => void;\n    prependHead: (fragment: string) => void;\n    appendHead: (fragment: string) => void;\n    prependBody: (fragment: string) => void;\n    appendBody: (fragment: string) => void;\n  };\n};\n\n\n\nInput#\n\n * context: Hook context.\n   * response: provides a series of methods to process the response.\n   * request: provides a series of methods to get request info.\n   * router: provides methods on routing.\n   * template: provides methods on content.\n * next: call next listener (not affect the server process, only current hook).\n\n\nExample#\n\n\nRedirect#\n\nRedirect to pages outside the site, for example to login page:\n\n\n\nexport const afterMatch: AfterMatch = async (ctx, next) => {\n  ctx.router.redirect('https://website.com/login', 302);\n};\n\n\n\nRewrite#\n\nRewrite to pages of the current site, for example, the same route returns pages\nthat are adapted to different UA:\n\n\n\nexport const afterMatch: AfterMatch = async (ctx, next) => {\n  ctx.router.rewrite('mobile');\n};\n\n\n\nHTML Inject#\n\nInject some HTML content to the page, such as scripts, page skeletons, etc.:\n\n\n\nexport const afterRender: AfterRenderHook = (context, next) => {\n  ctx.template.prependBody('\nFooter');\n};\n","frontmatter":{"title":"Hook"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/web-server/hook.mdx","_relativePath":"en/apis/app/runtime/web-server/hook.mdx"},{"id":53,"title":"Middleware","routePath":"/en/apis/app/runtime/web-server/middleware","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":233},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":632},{"text":"Input","id":"input","depth":3,"charIndex":1380},{"text":"Example","id":"example","depth":2,"charIndex":1896},{"text":"Tracking","id":"tracking","depth":3,"charIndex":1907},{"text":"Inject Tools & Data","id":"inject-tools-&-data","depth":3,"charIndex":2083},{"text":"Framework Extension","id":"framework-extension","depth":3,"charIndex":2326}],"domain":"","content":"#\n\nUsed to extend the built-in Web Server of Modern.js, unlike Hook, Middleware can\ndirectly operate Node's origin request and response, and can be extended using\nthe framework plugin.\n\nNOTE\n\nFor more detail, see Extend Web Server.\n\n\nUsage#\n\n\n\nexport const middleware: Middleware = async (context, next) => {};\nexport const middleware: Middleware[] = [\n  async (context, next) => {},\n  async (context, next) => {},\n];\n\n\nINFO\n\nBefore using this API, please execute pnpm run new to create a new \"Custom Web\nServer\" source code directory.\n\npnpm run new\n? Action Create project element\n? New \"Custom Web Server\" source code directory\n\n\n\nFunction Signature#\n\ntype Middleware = (\n  context: MiddlewareContext,\n  next: NextFunction,\n) => Promise | void;\n\ntype MiddlewareContext = {\n  response: {\n    set: (key: string, value: string) => void;\n    status: (code: number) => void;\n    cookies: {\n      set: (key: string, value: string, options?: any) => void;\n      clear: () => void;\n    };\n    raw: (\n      body: string,\n      { status, headers }: { status: number; headers: Record },\n    ) => void;\n    locals: Record;\n  };\n  request: {\n    host: string;\n    pathname: string;\n    query: Record;\n    cookie: string;\n    cookies: {\n      get: (key: string) => string;\n    };\n    headers: IncomingHttpHeaders;\n  };\n  source: {\n    req: IncomingMessage;\n    res: ServerResponse;\n  };\n};\n\n\n\nInput#\n\n * context: Middleware context.\n   * response: provides a series of methods to process the response.\n   * request: provides a series of methods to get request info.\n   * source: provides Node.js native req and res object.\n * next: call next listener (not affect the server process, only current hook).\n\nWARNING\n\nThe execution of the next function does not affect built-in processes, only\ncontrols whether the next middleware executes. Rendering processes are\ninterrupted only when the response is written.\n\n\nExample#\n\n\nTracking#\n\nexport const Middleware = () => async (ctx, next) => {\n  const start = Date.now();\n  ctx.res.once('finish', () => {\n    console.log(Date.now() - start);\n  });\n};\n\n\n\nInject Tools & Data#\n\nModern.js provides res.locals to store local variables for the current request.\n\nexport const Middleware = () => async (ctx, next) => {\n  ctx.res.locals.id = 'Modern.js';\n  ctx.res.locals.rpc = createRpcInstance();\n};\n\n\n\nFramework Extension#\n\nMiddleware can also use runtime framework extensions like BFF.\n\nWhen using framework runtime extensions, type information is exported from\n@modern-js/runtime/{namespace}. Middleware can use framework syntax, such as\nframework middleware writing, the following is pseudo-code:\n\n\n\nexport const middleware: SomeType = (ctx, next) => {\n  console.log(ctx.url);\n  next();\n};\n\n\nBy default, the framework extension capability of Web Server is turned off after\ninstalling the framework extension plug-in. If you want to use the framework\nextension, you can turn it on through 'server.enableFrameworkExt'.\n\nINFO\n\nThe type name exported by the framework extension may not 'Middleware', but is\nnamed by the framework extension plugin.","frontmatter":{"title":"Middleware"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/apis/app/runtime/web-server/middleware.mdx","_relativePath":"en/apis/app/runtime/web-server/middleware.mdx"},{"id":54,"title":"Overview","routePath":"/en/community/blog/overview","lang":"en","toc":[],"domain":"","content":"#\n\nWelcome to the Modern.js blog!\n\nYou can find the latest news about Modern.js here.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/community/blog/overview.md","_relativePath":"en/community/blog/overview.md"},{"id":55,"title":"Contributing Guide","routePath":"/en/community/contributing-guide","lang":"en","toc":[{"text":"Setup the Dev Environment","id":"setup-the-dev-environment","depth":2,"charIndex":241},{"text":"Fork the Repo","id":"fork-the-repo","depth":3,"charIndex":270},{"text":"Install Node.js","id":"install-nodejs","depth":3,"charIndex":369},{"text":"Install pnpm","id":"install-pnpm","depth":3,"charIndex":904},{"text":"Install Dependencies","id":"install-dependencies","depth":3,"charIndex":1007},{"text":"Set Git Email","id":"set-git-email","depth":3,"charIndex":1501},{"text":"Making Changes and Building","id":"making-changes-and-building","depth":2,"charIndex":1981},{"text":"Checkout A New Branch","id":"checkout-a-new-branch","depth":3,"charIndex":2115},{"text":"Build the Package","id":"build-the-package","depth":3,"charIndex":2288},{"text":"Testing","id":"testing","depth":2,"charIndex":2903},{"text":"Add New Tests","id":"add-new-tests","depth":3,"charIndex":2914},{"text":"Run Unit Tests","id":"run-unit-tests","depth":3,"charIndex":3108},{"text":"Run E2E Tests","id":"run-e2e-tests","depth":3,"charIndex":3482},{"text":"Linting","id":"linting","depth":2,"charIndex":3947},{"text":"Documentation","id":"documentation","depth":2,"charIndex":4214},{"text":"Submitting Changes","id":"submitting-changes","depth":2,"charIndex":5089},{"text":"Add a Changeset","id":"add-a-changeset","depth":3,"charIndex":5111},{"text":"Committing your Changes","id":"committing-your-changes","depth":3,"charIndex":5385},{"text":"Format of PR titles","id":"format-of-pr-titles","depth":3,"charIndex":5481},{"text":"Publishing","id":"publishing","depth":2,"charIndex":5763}],"domain":"","content":"#\n\nThanks for that you are interested in contributing to Modern.js. Before starting\nyour contribution, please take a moment to read the following guidelines.\n\n--------------------------------------------------------------------------------\n\n\nSetup the Dev Environment#\n\n\nFork the Repo#\n\nFork this repository to your own GitHub account and then clone it to your local.\n\n\nInstall Node.js#\n\nWe recommend using Node.js 16 or 18. You can check your currently used Node.js\nversion with the following command:\n\nnode -v\n#v16.18.0\n\n\nIf you do not have Node.js installed in your current environment, you can use\nnvm or fnm to install it.\n\nHere is an example of how to install the Node.js 16 LTS version via nvm:\n\n# Install the LTS version of Node.js 16\nnvm install 16 --lts\n\n# Make the newly installed Node.js 16 as the default version\nnvm alias default 16\n\n# Switch to the newly installed Node.js 16\nnvm use 16\n\n\n\nInstall pnpm#\n\n# Enable pnpm with corepack, only available on Node.js >= `v14.19.0`\ncorepack enable\n\n\n\nInstall Dependencies#\n\npnpm install\n\n\nWhat this will do:\n\n * Install all dependencies\n * Create symlinks between packages in the monorepo\n * Run the prepare script to build all packages (this will take some time, but\n   is necessary to make ensure all packages are built)\n\n> A full rebuild of all packages is generally not required after this. If a new\n> feature you are developing requires an updated version of another package, it\n> is usually sufficient to build the changed dependencies.\n\n\nSet Git Email#\n\nPlease make sure you have your email set up in . This will be needed later when\nyou want to submit a pull request.\n\nCheck that your git client is already configured the email:\n\ngit config --list | grep email\n\n\nSet the email to global config:\n\ngit config --global user.email \"SOME_EMAIL@example.com\"\n\n\nSet the email for local repo:\n\ngit config user.email \"SOME_EMAIL@example.com\"\n\n\n--------------------------------------------------------------------------------\n\n\nMaking Changes and Building#\n\nOnce you have set up the local development environment in your forked repo, we\ncan start development.\n\n\nCheckout A New Branch#\n\nIt is recommended to develop on a new branch, as it will make things easier\nlater when you submit a pull request:\n\ngit checkout -b MY_BRANCH_NAME\n\n\n\nBuild the Package#\n\nTo build the package you want to change, first open the package directory, then\nrun the build command:\n\n# Replace some-path with the path of the package you want to work on\ncd ./packages/some-path\npnpm run build\n\n\nAlternatively, you can build the package from the root directory of the\nrepository using the --filter option:\n\npnpm run --filter @modern-js/some-package build\n\n\nBuild all packages:\n\npnpm run prepare\n\n\nIf you need to clean all node_modules/* in the project, run the reset command:\n\npnpm run reset\n\n\n--------------------------------------------------------------------------------\n\n\nTesting#\n\n\nAdd New Tests#\n\nIf you've fixed a bug or added code that should be tested, then add some tests.\n\nYou can add unit test cases in the /tests folder. The test syntax is based on\nJest and Vitest.\n\n\nRun Unit Tests#\n\nBefore submitting a pull request, it's important to make sure that the changes\nhaven't introduced any regressions or bugs. You can run the unit tests for the\nproject by executing the following command:\n\npnpm run test\n\n\nAlternatively, you can run the unit tests of single package using the --filter\noption:\n\npnpm run --filter @modern-js/some-package test\n\n\n\nRun E2E Tests#\n\nIn addition to the unit tests, the Modern.js also includes end-to-end (E2E)\ntests, which checks the functionality of the application as a whole.\n\nYou can run the test:e2e command to run the E2E tests:\n\npnpm run test:e2e\n\n\nIf you need to run a specified test, you can add keywords to filter:\n\n# Only run test cases with the copy-assets keyword\nnpx jest copy-assets\n\n\n--------------------------------------------------------------------------------\n\n\nLinting#\n\nTo help maintain consistency and readability of the codebase, we use a ESLint to\nlint the codes.\n\nYou can run the Linter by executing the following command:\n\npnpm run lint\n\n\n--------------------------------------------------------------------------------\n\n\nDocumentation#\n\nCurrently Modern.js provides documentation in English and Chinese. If you can\nuse Chinese, please update both documents at the same time. Otherwise, just\nupdate the English documentation.\n\nYou can find all the documentation in the packages/document folder:\n\nroot\n└─ packages\n   └─ document\n       ├─ builder-doc    # Documentation for Modern.js Builder\n       ├─ doc-tools-doc  # Documentation for Modern.js Doc\n       ├─ main-doc       # Documentation for Modern.js Framework\n       └─ module-doc     # Documentation for Modern.js Module\n\n\nThis website is built with Modern.js Doc, the document content can be written\nusing markdown or mdx syntax. You can refer to the Modern.js Doc Website for\ndetailed usage.\n\nThe source code of Modern.js Doc can be found in this folder.\n\n--------------------------------------------------------------------------------\n\n\nSubmitting Changes#\n\n\nAdd a Changeset#\n\nModern.js is using Changesets to manage the versioning and changelogs.\n\nIf you've changed some packages, you need add a new changeset for the changes.\nPlease run change command to select the changed packages and add the changeset\ninfo.\n\npnpm run change\n\n\n\nCommitting your Changes#\n\nCommit your changes to your forked repo, and create a pull request.\n\n\nFormat of PR titles#\n\nThe format of PR titles follow Conventional Commits.\n\nAn example:\n\nfeat(plugin-swc): Add `xxx` config\n^    ^    ^\n|    |    |__ Subject\n|    |_______ Scope\n|____________ Type\n\n\n--------------------------------------------------------------------------------\n\n\nPublishing#\n\nWe use Modern.js Monorepo Solution to manage version and changelog.\n\nRepository maintainers can publish a new version of all packages to npm.\n\nHere are the steps to publish (we generally use CI for releases and avoid\npublishing npm packages locally):\n\n 1. Pull latest code from the main branch.\n 2. Install:\n\npnpm i\n\n\n 3. Build packages:\n\npnpm run prepare\n\n\n 4. Bump version:\n\npnpm run bump\n\n\n 5. Commit the version change.\n\ngit add .\ngit commit -m \"Release va.b.c\"\n","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/community/contributing-guide.mdx","_relativePath":"en/community/contributing-guide.mdx"},{"id":56,"title":"Releases","routePath":"/en/community/releases","lang":"en","toc":[{"text":"Changelog","id":"changelog","depth":2,"charIndex":3},{"text":"Version Specification","id":"version-specification","depth":2,"charIndex":104},{"text":"Release Cycle","id":"release-cycle","depth":2,"charIndex":366},{"text":"Version Upgrade","id":"version-upgrade","depth":2,"charIndex":655}],"domain":"","content":"#\n\n\nChangelog#\n\nPlease visit GitHub - Releases to see what has changed with each release of\nModern.js.\n\n\nVersion Specification#\n\nModern.js follows the Semantic Versioning specification.\n\n * Major version: Contains incompatible API changes.\n * Minor version: Contains backward compatible functional changes.\n * Patch version: Contains backwards compatible bug fixes\n\n\nRelease Cycle#\n\n * Modern.js generally releases an official release every Thursday.\n * If critical bugs appear, we will release a revised version on the same day.\n * We expect to keep Modern.js v2 stable and compatible, there are currently no\n   plans to release the next major version.\n\n\nVersion Upgrade#\n\nWhen you need to upgrade the Modern.js version in your project, you can use the\nmodern upgrade command, refer to Upgrade.\n\nnpx modern upgrade\n","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/community/releases.mdx","_relativePath":"en/community/releases.mdx"},{"id":57,"title":"Showcase","routePath":"/en/community/showcase","lang":"en","toc":[{"text":"The Cases","id":"the-cases","depth":2,"charIndex":-1}],"domain":"","content":"#\n\nWelcome to the Modern.js showcase page! Here, we present a collection of\nwebsites that have been built using Modern.js.\n\nIf you have built a website using Modern.js, we would love for you to share it\nwith the community. Simply reply to the GitHub discussion thread with a link to\nyour website. We will collect content on a regular basis and display it on the\ncurrent page.\n\n\nThe Cases#","frontmatter":{"sidebar_position":0},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/community/showcase.mdx","_relativePath":"en/community/showcase.mdx"},{"id":58,"title":"Meet the Team","routePath":"/en/community/team","lang":"en","toc":[{"text":"Core Team Members","id":"core-team-members","depth":2,"charIndex":101},{"text":"All Contributors","id":"all-contributors","depth":2,"charIndex":156}],"domain":"","content":"#\n\nThe development of Modern.js is driven by ByteDance's Modern.js team and\ncommunity contributors.\n\n\nCore Team Members#\n\nThe Modern.js core team members:\n\n\nAll Contributors#\n\nThanks to the following friends for their contributions to Modern.js:","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/community/team.mdx","_relativePath":"en/community/team.mdx"},{"id":59,"title":"autoLoadPlugins","routePath":"/en/configure/app/auto-load-plugin","lang":"en","toc":[{"text":"Manual Registration Plugin","id":"manual-registration-plugin","depth":3,"charIndex":114},{"text":"Auto Registration plugin","id":"auto-registration-plugin","depth":3,"charIndex":345}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to configure whether Modern.js enables auto-registration of plugins.\n\n\nManual Registration Plugin#\n\nBy default, installing the plugin requires you to register the plugin manually\nin the modern.config.ts.\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  plugins: [appTools(), i18nPlugin()],\n});\n\n\n\nAuto Registration plugin#\n\nIn addition to means registration, Modern.js also provides a way to\nautomatically register plugins: set the autoLoadPlugin configuration item to\ntrue.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  autoLoadPlugins: true,\n});\n\n\nModern.js will help you automatically register the plugin by following these\nsteps\n\n 1. Modern.js maintains an official list of plugins internally.\n\nconst InternalPlugins = ['@modern-js/app-tools', '@modern-js/plugin-i18n', ...];\n\n\n 2. Modern.js will read your package.json and collect the dependency\n    information.\n\npackage.json\n\n\"dependencies\": {\n  \"@modern-js/plugin-i18n\": \"x.x.x\"\n  ...\n},\n\"devDependencies\": {\n  \"@modern-js/app-tools\": \"x.x.x\"\n  ...\n}\n\n\n 3. Modern.js observes that when you install dependencies such as\n    @modern-js/plugin-i18n and @modern-js/app-tools, automatic plugin\n    registration will be imported.\n\nYou can notice that this approach is relatively black-box and you are not even\naware of the process of loading the plugin. We want to expose more details to\nthe developer and be able to let the developer control the process.\n\nTherefore we recommend you to register the plugin manually.","frontmatter":{"title":"autoLoadPlugins","sidebar_position":11},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/auto-load-plugin.mdx","_relativePath":"en/configure/app/auto-load-plugin.mdx"},{"id":60,"title":"enableHandleWeb","routePath":"/en/configure/app/bff/enable-handle-web","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nCAUTION\n\nFirst you need to enable the \"BFF\" function using new command.\n\nBy default, the BFF service can only handle requests from the BFF API.\n\nWhen this value is set to true, page request traffic also goes through the BFF,\nand the logic built into Modern.js for page rendering defaults to running as the\nlast middleware for the BFF service.\n\nmodern.config.ts\n\nexport default defineConfig({\n  bff: {\n    enableHandleWeb: true,\n  },\n});\n","frontmatter":{"title":"enableHandleWeb"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/bff/enable-handle-web.mdx","_relativePath":"en/configure/app/bff/enable-handle-web.mdx"},{"id":61,"title":"bff.prefix","routePath":"/en/configure/app/bff/prefix","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n * Default: /api\n\nCAUTION\n\nFirst you need to enable the \"BFF\" function using new command.\n\nBy default, the route access BFF prefix's directory is /api, with the following\ndirectory structure:\n\napi\n└── hello.ts\n\n\nThe corresponding route for api/hello.ts access is localhost:8080/api/hello.\n\nThis configuration option can modify the default route prefix:\n\nmodern.config.ts\n\nexport default defineConfig({\n  bff: {\n    prefix: '/api-demo',\n  },\n});\n\n\nThe corresponding api/hello.ts access route is localhost:8080/api-demo/hello.","frontmatter":{"sidebar_label":"prefix"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/bff/prefix.mdx","_relativePath":"en/configure/app/bff/prefix.mdx"},{"id":62,"title":"bff.proxy","routePath":"/en/configure/app/bff/proxy","lang":"en","toc":[{"text":"Common usage","id":"common-usage","depth":2,"charIndex":1586},{"text":"Solve interface cross-domain problems","id":"solve-interface-cross-domain-problems","depth":3,"charIndex":1602}],"domain":"","content":"#\n\n * Type: Record\n * Default: {}\n\nCaution\n\nFirst you need to enable the \"BFF\" function using new command.\n\nWith simple configuration, no code is required, Modern.js automatically forwards\nrequests. Requests sent to Modern.js BFF server are proxied to the specified\nservice.\n\nBFF Proxy uses the powerful http-proxy-middleware, and if you need more advanced\nusage, you can check its documentation.\n\nAdd the following configuration to modern.server-runtime.config.ts, you can turn\non the proxy:\n\nmodern.server-runtime.config.ts\n\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api': 'https://cnodejs.org',\n    },\n  },\n});\n\n\nAssuming that the starting Modern.js BFF server's service address is\nlocalhost:8080, all requests whose path starts with api will be intercepted,\nsuch as requests sent to localhost:8080/api/v1/topics will be proxied to\nhttps://cnodejs.org/api/v1/topics.\n\nYou can do path rewriting, such as proxying requests sent to\nlocalhost:8080/api/topics to https://cnodejs.org/api/v1/topics.\n\nmodern.server-runtime.config.js\n\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api': {\n        target: 'https://cnodejs.org',\n        pathRewrite: { '/api/topics': '/api/v1/topics' },\n        changeOrigin: true,\n      },\n    },\n  },\n});\n\n\nUnlike dev.proxy, the proxy described in this section only works on requests\nentering the BFF/API service; at the same time, this configuration can be used\nnot only in the development environment, but also in the production environment.\nThe corresponding request will also be proxied in the production environment.\n\n\nCommon usage#\n\n\nSolve interface cross-domain problems#\n\nIn the process of project development, because web pages and interface services\nare not deployed under the same domain name, cross-domain problems are often\nencountered.\n\nThere are many ways to solve cross-domain problems, and here we use bff.proxy to\neasily solve cross-domain problems.\n\nINFO\n\nIn BFF proxy mode, if you do not need to write the BFF interface, the API\ndirectory can be deleted; at this time, BFF proxy will still be enabled.\n\nAs shown below, in the modern.server-runtime.config.js, write the following\nconfiguration; we send all web pages to the same domain that request proxies\nstarting with /api to another domain's service.\n\nmodern.server-runtime.config.ts\n\nexport default defineServerConfig({\n  bff: {\n    proxy: {\n      '/api': 'https://cnodejs.org',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"proxy"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/bff/proxy.mdx","_relativePath":"en/configure/app/bff/proxy.mdx"},{"id":63,"title":"builderPlugins","routePath":"/en/configure/app/builder-plugins","lang":"en","toc":[{"text":"Precautions","id":"precautions","depth":2,"charIndex":290},{"text":"When to use","id":"when-to-use","depth":2,"charIndex":638},{"text":"Example","id":"example","depth":2,"charIndex":1156},{"text":"Using plugins on npm","id":"using-plugins-on-npm","depth":3,"charIndex":1217},{"text":"Using local plugins","id":"using-local-plugins","depth":3,"charIndex":1435},{"text":"Plugin configuration items","id":"plugin-configuration-items","depth":3,"charIndex":1660}],"domain":"","content":"#\n\n * Type: BuilderPlugin[]\n * Default: []\n\nUsed to configure the Modern.js Builder plugin.\n\nModern.js Builder is the build engine of Modern.js, please read Builder for\nbackground. If you want to know how to write Builder plugins, you can refer to\nModern.js Builder - Introduce to Plugin.\n\n\nPrecautions#\n\nThis option is used to configure the Modern.js Builder plugins. If you need to\nconfigure other types of plugins, please select the corresponding configs:\n\n * Use plugins to configure Modern.js framework plugins.\n * Use tools.webpack or tools.webpackChain to configure webpack plugins.\n * Use tools.babel to configure babel plugins.\n\n\nWhen to use#\n\nIn most scenarios, we recommend you to use the Modern.js framework plugin, which\ncan be registered through the plugins config. Because the API provided by the\nframework plugin is richer and more capable, while the API provided by the\nBuilder plugin can only be used to build scenes.\n\nWhen you need to reference some existing Builder plugins (and there is no\nrelated capability in Modern.js), or reuse Builder plugins between different\nframeworks, you can use the builderPlugins field to register them.\n\n\nExample#\n\nBelow is an example of using the Builder plugin.\n\n\nUsing plugins on npm#\n\nTo use a plugin on npm, you need to install the plugin through the package\nmanager and import it.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  builderPlugins: [myBuilderPlugin()],\n});\n\n\n\nUsing local plugins#\n\nUse the plugin in the local code repository, you can import it directly through\nthe relative path import.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  builderPlugins: [myBuilderPlugin()],\n});\n\n\n\nPlugin configuration items#\n\nIf the plugin provides some custom configuration options, you can pass in the\nconfiguration through the parameters of the plugin function.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  builderPlugins: [\n    myBuilderPlugin({\n      foo: 1,\n      bar: 2,\n    }),\n  ],\n});\n","frontmatter":{"title":"builderPlugins","sidebar_position":10},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/builder-plugins.mdx","_relativePath":"en/configure/app/builder-plugins.mdx"},{"id":64,"title":"deploy.microFrontend","routePath":"/en/configure/app/deploy/microFrontend","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":379},{"text":"Configuration","id":"configuration","depth":2,"charIndex":500},{"text":"enableHtmlEntry","id":"enablehtmlentry","depth":3,"charIndex":517},{"text":"externalBasicLibrary","id":"externalbasiclibrary","depth":3,"charIndex":1159}],"domain":"","content":"#\n\n * Type: object\n * Default: { enableHtmlEntry: true, externalBasicLibrary: false }\n\ninterface MicroFrontend {\n  enableHtmlEntry?: boolean;\n  externalBasicLibrary?: boolean;\n  moduleApp?: string;\n}\n\n\nDevelopers can use the deploy.microFrontend to configure micro-frontend\nsub-application information.\n\nCAUTION\n\nEnable the \"Micro Frontend\" features through pnpm run new first.\n\n\nExample#\n\nexport default defineConfig({\n  deploy: {\n    microFrontend: {\n      enableHtmlEntry: true,\n    },\n  },\n});\n\n\n\nConfiguration#\n\n\nenableHtmlEntry#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the html entry, the default is true, the sub-application is\nbuilt into the HTML mode, Garfish supports the html entry, you can turn on the\nopen option, experience the corresponding features, and directly point the\nsub-application entry to the HTML entry when it is the HTML entry. Just point to\nthe html of the sub-application\n\nSet it to false to indicate that the sub-application is built as js. After the\nsub-application is built as js, it cannot run independently. When it is a JS\nentry, point the entry file of the sub-application to the JS of the\nsub-application.\n\n\nexternalBasicLibrary#\n\n * Type: boolean\n * Default: false\n\nWhether the external base library, when set to true, the current child\napplication will be external: react, react-dom, Modern.js main application will\nautomatically setExternal these two base libraries, if other types of frameworks\nPlease add react, react-dom dependencies through Garfish.setExternal.","frontmatter":{"sidebar_label":"microFrontend"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/deploy/microFrontend.mdx","_relativePath":"en/configure/app/deploy/microFrontend.mdx"},{"id":65,"title":"dev.assetPrefix","routePath":"/en/configure/app/dev/asset-prefix","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":4,"charIndex":618},{"text":"String type","id":"string-type","depth":4,"charIndex":875}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ndev.assetPrefix.\n\n * Type: boolean | string\n * Default: '/'\n\nSet the URL prefix of static assets in the development environment, similar to\nthe output.publicPath config of webpack.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the development environment. In the production\nenvironment, please use the output.assetPrefix to set the URL prefix.\n\nBoolean Type#\n\nIf assetPrefix is set to true, the URL prefix will be http://localhost:port/:\n\nexport default {\n  dev: {\n    assetPrefix: true,\n  },\n};\n\n\nThe script URL will be:\n\n\n\n\nIf assetPrefix is set to false or not set, / is used as the default value.\n\nString type#\n\nWhen the value of assetPrefix is string type, the string will be used as the URL\nprefix:\n\nexport default {\n  dev: {\n    assetPrefix: 'http://example.com/assets/',\n  },\n};\n\n\nThe script URL will be:\n\n\n","frontmatter":{"sidebar_label":"assetPrefix"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/asset-prefix.mdx","_relativePath":"en/configure/app/dev/asset-prefix.mdx"},{"id":66,"title":"dev.beforeStartUrl","routePath":"/en/configure/app/dev/before-start-url","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ndev.beforeStartUrl.\n\n * Type: () => Promise | void\n * Default: undefined\n\ndev.beforeStartUrl is used to execute a callback function before opening the\nstartUrl, this config needs to be used together with dev.startUrl.\n\nexport default {\n  dev: {\n    startUrl: true,\n    beforeStartUrl: async () => {\n      await doSomeThing();\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"beforeStartUrl"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/before-start-url.mdx","_relativePath":"en/configure/app/dev/before-start-url.mdx"},{"id":67,"title":"dev.hmr","routePath":"/en/configure/app/dev/hmr","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.hmr.\n\n * Type: boolean\n * Default: true\n\nWhether to enable Hot Module Replacement.\n\nIf hmr is set to false, the HMR and react-refresh will no longer work.\n\nexport default {\n  dev: {\n    hmr: false,\n  },\n};\n","frontmatter":{"sidebar_label":"hmr"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/hmr.mdx","_relativePath":"en/configure/app/dev/hmr.mdx"},{"id":68,"title":"dev.host","routePath":"/en/configure/app/dev/host","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.host.\n\n * Type: string\n * Default: 0.0.0.0\n\nSpecify the host that the dev server listens to.\n\nBy default, the dev server will listen to 0.0.0.0, which means listening to all\nnetwork interfaces, including localhost and public network addresses.\n\nIf you want the dev server to listen only on localhost, you can set it to:\n\nexport default {\n  dev: {\n    host: 'localhost',\n  },\n};\n","frontmatter":{"sidebar_label":"host"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/host.mdx","_relativePath":"en/configure/app/dev/host.mdx"},{"id":69,"title":"dev.https","routePath":"/en/configure/app/dev/https","lang":"en","toc":[{"text":"Automatically generate certificates","id":"automatically-generate-certificates","depth":4,"charIndex":418},{"text":"Manually set the certificate","id":"manually-set-the-certificate","depth":4,"charIndex":1171}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.https.\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nAfter configuring this option, you can enable HTTPS Dev Server, and disabling\nthe HTTP Dev Server.\n\nHTTP:\n\n  > Local: http://localhost:8080/\n  > Network: http://192.168.0.1:8080/\n\n\nHTTPS:\n\n  > Local: https://localhost:8080/\n  > Network: https://192.168.0.1:8080/\n\n\nAutomatically generate certificates#\n\nYou can directly set https to true, Builder will automatically generate the\nHTTPS certificate based on devcert.\n\nWhen using this method, you need to manually install the devcert dependency in\nyour project:\n\n# npm\nnpm install devcert@1.2.2 -D\n\n#yarn\nyarn add devcert@1.2.2 -D\n\n#pnpm\npnpm add devcert@1.2.2 -D\n\n\nThen configure dev.https to true:\n\nexport default {\n  dev: {\n    https: true,\n  },\n};\n\n\nThe devcert has some limitations, it does not currently support IP addresses\nyet.\n\nTIP\n\nThe https proxy automatically installs the certificate and needs root authority,\nplease enter the password according to the prompt.The password is only used to\ntrust the certificate, and will not be leaked or be used elsewhere.\n\nManually set the certificate#\n\nYou can also manually pass in the certificate and the private key required in\nthe dev.https option. This parameter will be directly passed to the createServer\nmethod of the https module in Node.js.\n\nFor details, please refer to https.createServer.\n\n\n\nexport default {\n  dev: {\n    https: {\n      key: fs.readFileSync('certificates/private.pem'),\n      cert: fs.readFileSync('certificates/public.pem'),\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"https"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/https.mdx","_relativePath":"en/configure/app/dev/https.mdx"},{"id":70,"title":"dev.port","routePath":"/en/configure/app/dev/port","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":285}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.port.\n\n * Type: number\n * Default: 8080\n\nSpecify a port number for Dev Server to listen.\n\nBy default, Dev Server listens on port 8080 and automatically increments the\nport number when the port is occupied.\n\n\nExample#\n\nSet the port to 3000:\n\nexport default {\n  dev: {\n    port: 3000,\n  },\n};\n","frontmatter":{"sidebar_label":"port"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/port.mdx","_relativePath":"en/configure/app/dev/port.mdx"},{"id":71,"title":"dev.progressBar","routePath":"/en/configure/app/dev/progress-bar","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ndev.progressBar.\n\n * Type:\n\ntype ProgressBar =\n  | boolean\n  | {\n      id?: string;\n    };\n\n\n * Default: true\n\nWhether to display progress bar during compilation.\n\nexport default {\n  dev: {\n    progressBar: false,\n  },\n};\n\n\nIf you need to modify the text displayed on the left side of the progress bar,\nyou can set the id option:\n\nexport default {\n  dev: {\n    progressBar: {\n      id: 'Some Text',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"progressBar"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/progress-bar.mdx","_relativePath":"en/configure/app/dev/progress-bar.mdx"},{"id":72,"title":"dev.proxy","routePath":"/en/configure/app/dev/proxy","lang":"en","toc":[],"domain":"","content":"#","frontmatter":{"sidebar_label":"proxy"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/proxy.mdx","_relativePath":"en/configure/app/dev/proxy.mdx"},{"id":73,"title":"dev.startUrl","routePath":"/en/configure/app/dev/start-url","lang":"en","toc":[{"text":"Port placeholder","id":"port-placeholder","depth":3,"charIndex":659}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.startUrl.\n\n * Type: boolean | string | string[] | undefined\n * Default: undefined\n\ndev.startUrl is used to set the URL of the page that automatically opens in the\nbrowser when Dev Server starts.\n\nBy default, no page will be opened.\n\nYou can set it to the following values:\n\nexport default {\n  dev: {\n    // Open the project's default preview page, equivalent to `http://localhost:`\n    startUrl: true,\n    // Open the specified page\n    startUrl: 'http://localhost:8080',\n    // Open multiple pages\n    startUrl: ['http://localhost:8080', 'http://localhost:8080/about'],\n  },\n};\n\n\n\nPort placeholder#\n\nSince the port number may change, you can use the placeholder to refer to the\ncurrent port number, and Builder will automatically replace the placeholder with\nthe actual listening port number.\n\nexport default {\n  dev: {\n    startUrl: 'http://localhost:/home',\n  },\n};\n","frontmatter":{"sidebar_label":"startUrl"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/dev/start-url.mdx","_relativePath":"en/configure/app/dev/start-url.mdx"},{"id":74,"title":"experiments.lazyCompilation","routePath":"/en/configure/app/experiments/lazy-compilation","lang":"en","toc":[{"text":"Lazy Compilation for Dynamic Imports","id":"lazy-compilation-for-dynamic-imports","depth":3,"charIndex":680},{"text":"Lazy Compilation for Entires","id":"lazy-compilation-for-entires","depth":3,"charIndex":1138},{"text":"Limitations","id":"limitations","depth":3,"charIndex":1969},{"text":"Disable split chunks","id":"disable-split-chunks","depth":4,"charIndex":1983},{"text":"Use proxy","id":"use-proxy","depth":4,"charIndex":2286}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nexperiments.lazyCompilation.\n\n * Type:\n\ntype LazyCompilationOptions =\n  | boolean\n  | {\n      // Whether to enable lazy compilation for entries\n      entries?: boolean;\n      // Whether to enable lazy compilation for dynamic imports\n      imports?: boolean;\n    };\n\n\n * Default: false\n * Bundler: only support webpack\n\nUsed to enable the lazy compilation (i.e. compile on demand). When this config\nis enabled, Builder will compile entrypoints and dynamic imports only when they\nare used. It will improve the compilation startup time of the project.\n\nLazy compilation only takes effect in the development.\n\n\nLazy Compilation for Dynamic Imports#\n\nLazy compile async modules introduced by Dynamic Import:\n\nexport default {\n  experiments: {\n    lazyCompilation: {\n      imports: true,\n      entries: false,\n    },\n  },\n};\n\n\nWhen imports option is enabled, all async modules will only be compiled when\nrequested. If your project is a single-page application, and routing is split\nthrough Dynamic Import, there will be a significant effect of speeding up\ncompilation.\n\n\nLazy Compilation for Entires#\n\nIn addition to lazy compilation for async modules, you can also choose to lazily\ncompile both entries and async modules at the same time.\n\nexport default {\n  experiments: {\n    lazyCompilation: {\n      imports: true,\n      entries: true,\n    },\n  },\n};\n\n\nThe above config can also be simplified to:\n\nexport default {\n  experiments: {\n    lazyCompilation: true,\n  },\n};\n\n\nWhen entries option is enabled, all pages will not be compiled when the\ncompilation is started, and the page will be compiled only when you visit it.\n\nWhen using lazy compilation for entries, there are some considerations:\n\n * Only work for multi-page applications, no work for single-page applications.\n * when you visit a page, there will be a white screen for a period of time due\n   to waiting for the page to be compiled.\n\n\nLimitations#\n\nDisable split chunks#\n\nWhen you enable lazy compilation, in order to ensure the compilation results,\nBuilder will disable split chunks in the development. This will not affect the\nbuild results in the production, but will cause a difference between the build\nresults of the development and production.\n\nUse proxy#\n\nLazy Compilation relies on the local development server of webpack. When you\nproxy a domain name to localhost, Lazy Compilation will not work properly.\nTherefore, if you need to develop with proxy, please disable Lazy Compilation.","frontmatter":{"sidebar_label":"lazyCompilation"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/experiments/lazy-compilation.mdx","_relativePath":"en/configure/app/experiments/lazy-compilation.mdx"},{"id":75,"title":"html.appIcon","routePath":"/en/configure/app/html/app-icon","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":523}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.appIcon.\n\n * Type: string\n * Default: undefined\n\nSet the file path of the apple-touch-icon icon for the iOS system, can be set as\na relative path relative to the project root directory, or as an absolute path\nto the file. Setting it as a CDN URL is not currently supported.\n\nAfter config this option, the icon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\nexport default {\n  html: {\n    appIcon: './src/assets/icon.png',\n  },\n};\n\n\nSet to an absolute path:\n\n\n\nexport default {\n  html: {\n    appIcon: path.resolve(__dirname, './src/assets/icon.png'),\n  },\n};\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n","frontmatter":{"sidebar_label":"appIcon"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/app-icon.mdx","_relativePath":"en/configure/app/html/app-icon.mdx"},{"id":76,"title":"html.crossorigin","routePath":"/en/configure/app/html/crossorigin","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.crossorigin.\n\n * Type: boolean | 'anonymous' | 'use-credentials'\n * Default: false\n\nSet the crossorigin attribute of the","frontmatter":{"sidebar_label":"crossorigin"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/crossorigin.mdx","_relativePath":"en/configure/app/html/crossorigin.mdx"},{"id":77,"title":"html.disableHtmlFolder","routePath":"/en/configure/app/html/disable-html-folder","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":282}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.disableHtmlFolder.\n\n * Type: boolean\n * Default: false\n\nRemove the folder of the HTML files. When this option is enabled, the generated\nHTML file path will change from [name]/index.html to [name].html.\n\n\nExample#\n\nBy default, the structure of HTML files in the dist directory is:\n\n/dist\n└── html\n    └── main\n        └── index.html\n\n\nEnable the html.disableHtmlFolder config:\n\nexport default {\n  html: {\n    disableHtmlFolder: true,\n  },\n};\n\n\nAfter recompiling, the directory structure of the HTML files in dist is:\n\n/dist\n└── html\n    └── main.html\n\n\n> If you want to set the path of the HTML files, use the output.distPath.html\n> config.","frontmatter":{"sidebar_label":"disableHtmlFolder"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/disable-html-folder.mdx","_relativePath":"en/configure/app/html/disable-html-folder.mdx"},{"id":78,"title":"html.faviconByEntries","routePath":"/en/configure/app/html/favicon-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":346}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.faviconByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different favicon for different pages.\n\nThe usage is same as favicon, and you can use the \"entry name\" as the key to set\neach page individually.\n\nfaviconByEntries will overrides the value set in favicon.\n\n\nExample#\n\nexport default {\n  html: {\n    favicon: './src/assets/default.png',\n    faviconByEntries: {\n      foo: './src/assets/foo.png',\n    },\n  },\n};\n\n\nAfter recompiling, you will see:\n\n * The favicon for page foo is ./src/assets/foo.png.\n * The favicon for other pages is ./src/assets/default.png.","frontmatter":{"sidebar_label":"faviconByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/favicon-by-entries.mdx","_relativePath":"en/configure/app/html/favicon-by-entries.mdx"},{"id":79,"title":"html.favicon","routePath":"/en/configure/app/html/favicon","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":460}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.favicon.\n\n * Type: string\n * Default: undefined\n\nSet the favicon icon path for all pages, can be set as:\n\n * a URL.\n * an absolute path to the file.\n * a relative path relative to the project root directory.\n\nAfter config this option, the favicon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\nexport default {\n  html: {\n    favicon: './src/assets/icon.png',\n  },\n};\n\n\nSet to an absolute path:\n\n\n\nexport default {\n  html: {\n    favicon: path.resolve(__dirname, './src/assets/icon.png'),\n  },\n};\n\n\nSet to a URL:\n\n\n\nexport default {\n  html: {\n    favicon: 'https://foo.com/favicon.ico',\n  },\n};\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n","frontmatter":{"sidebar_label":"favicon"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/favicon.mdx","_relativePath":"en/configure/app/html/favicon.mdx"},{"id":80,"title":"html.injectByEntries","routePath":"/en/configure/app/html/inject-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":362}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.injectByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different script tag inject positions for different pages.\n\nThe usage is same as inject, and you can use the \"entry name\" as the key to set\neach page individually.\n\ninjectByEntries will overrides the value set in inject.\n\n\nExample#\n\nexport default {\n  html: {\n    inject: 'head',\n    injectByEntries: {\n      foo: 'body',\n    },\n  },\n};\n\n\nAfter recompiling, you will see:\n\n * The script tag of the page foo will be injected inside the body tag.\n * The script tag of other pages will be injected inside the head tag.","frontmatter":{"sidebar_label":"injectByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/inject-by-entries.mdx","_relativePath":"en/configure/app/html/inject-by-entries.mdx"},{"id":81,"title":"html.inject","routePath":"/en/configure/app/html/inject","lang":"en","toc":[{"text":"Default inject position","id":"default-inject-position","depth":4,"charIndex":-1},{"text":"Inject into body","id":"inject-into-body","depth":4,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"inject"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/inject.mdx","_relativePath":"en/configure/app/html/inject.mdx"},{"id":82,"title":"html.metaByEntries","routePath":"/en/configure/app/html/meta-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":336}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.metaByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different meta tags for different pages.\n\nThe usage is same as meta, and you can use the \"entry name\" as the key to set\neach page individually.\n\nmetaByEntries will overrides the value set in meta.\n\n\nExample#\n\nexport default {\n  html: {\n    meta: {\n      description: 'ByteDance',\n    },\n    metaByEntries: {\n      foo: {\n        description: 'TikTok',\n      },\n    },\n  },\n};\n\n\nAfter compiling, you can see that the meta of the page foo is:\n\n\n\n\nThe meta of other pages is:\n\n\n","frontmatter":{"sidebar_label":"metaByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/meta-by-entries.mdx","_relativePath":"en/configure/app/html/meta-by-entries.mdx"},{"id":83,"title":"html.meta","routePath":"/en/configure/app/html/meta","lang":"en","toc":[{"text":"String Type","id":"string-type","depth":4,"charIndex":157},{"text":"Object Type","id":"object-type","depth":4,"charIndex":484},{"text":"Remove Default Value","id":"remove-default-value","depth":3,"charIndex":911}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.meta.\n\n * Type: Record>\n * Default: undefined\n\nConfigure the tag of the HTML.\n\nString Type#\n\nWhen the value of a meta object is a string, the key of the object is\nautomatically mapped to name, and the value is mapped to content.\n\nFor example to set description:\n\nexport default {\n  html: {\n    meta: {\n      description: 'a description of the page',\n    },\n  },\n};\n\n\nThe generated meta tag in HTML is:\n\n\n\n\nObject Type#\n\nWhen the value of a meta object is an object, the key: value of the object is\nmapped to the attribute of the meta tag.\n\nIn this case, the name and content properties will not be set by default.\n\nFor example to set http-equiv:\n\nexport default {\n  html: {\n    meta: {\n      'http-equiv': {\n        'http-equiv': 'x-ua-compatible',\n        content: 'ie=edge',\n      },\n    },\n  },\n};\n\n\nThe meta tag in HTML is:\n\n\n\n\n\nRemove Default Value#\n\nSetting the value of the meta object to false and the meta tag will not be\ngenerated.\n\nFor example to remove the imagemode:\n\nexport default {\n  html: {\n    meta: {\n      imagemode: false,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"meta"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/meta.mdx","_relativePath":"en/configure/app/html/meta.mdx"},{"id":84,"title":"html.mountId","routePath":"/en/configure/app/html/mount-id","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Notes","id":"notes","depth":3,"charIndex":-1},{"text":"Update Relevant Code","id":"update-relevant-code","depth":4,"charIndex":-1},{"text":"Custom Templates","id":"custom-templates","depth":4,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"mountId"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/mount-id.mdx","_relativePath":"en/configure/app/html/mount-id.mdx"},{"id":85,"title":"html.scriptLoading","routePath":"/en/configure/app/html/script-loading","lang":"en","toc":[{"text":"defer","id":"defer","depth":3,"charIndex":-1},{"text":"blocking","id":"blocking","depth":3,"charIndex":-1},{"text":"module","id":"module","depth":3,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"scriptLoading"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/script-loading.mdx","_relativePath":"en/configure/app/html/script-loading.mdx"},{"id":86,"title":"html.tagsByEntries","routePath":"/en/configure/app/html/tags-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":374}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.tagsByEntries.\n\n * Type: Record>\n * Default: undefined\n\nUsed for multiple entry applications, injecting different tags for each entry.\n\nThe usage is the same as tags, and you can use the \"entry name\" as the key to\nset each page individually.\n\ntagsByEntries will override the value set in tags.\n\n\nExample#\n\nexport default {\n  html: {\n    tags: [{ tag: 'script', attrs: { src: 'a.js' } }],\n    tagsByEntries: {\n      foo: [{ tag: 'script', attrs: { src: 'b.js' } }],\n    },\n  },\n};\n\n\nCompile the application and you can see a tag injected on the foo page:\n\n\n\n\nAnd for any other pages:\n\n\n","frontmatter":{"sidebar_label":"tagsByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/tags-by-entries.mdx","_relativePath":"en/configure/app/html/tags-by-entries.mdx"},{"id":87,"title":"html.tags","routePath":"/en/configure/app/html/tags","lang":"en","toc":[{"text":"Tag Object","id":"tag-object","depth":4,"charIndex":-1},{"text":"Tags Handler","id":"tags-handler","depth":4,"charIndex":-1},{"text":"Limitation","id":"limitation","depth":4,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"tags"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/tags.mdx","_relativePath":"en/configure/app/html/tags.mdx"},{"id":88,"title":"html.templateByEntries","routePath":"/en/configure/app/html/template-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":356}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.templateByEntries.\n\n * Type: Object\n * Default: undefined\n\nSet different template file for different pages.\n\nThe usage is same as template, and you can use the \"entry name\" as the key to\nset each page individually.\n\ntemplateByEntries will overrides the value set in template.\n\n\nExample#\n\nexport default {\n  output: {\n    template: './static/index.html',\n    templateByEntries: {\n      foo: './src/pages/foo/index.html',\n      bar: './src/pages/bar/index.html',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"templateByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/template-by-entries.mdx","_relativePath":"en/configure/app/html/template-by-entries.mdx"},{"id":89,"title":"html.templateParametersByEntries","routePath":"/en/configure/app/html/template-parameters-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":402}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.templateParametersByEntries.\n\n * Type: Object\n * Default: undefined\n\nSet different template parameters for different pages.\n\nThe usage is same as templateParameters, and you can use the \"entry name\" as the\nkey to set each page individually.\n\ntemplateParametersByEntries will overrides the value set in templateParameters.\n\n\nExample#\n\nexport default {\n  html: {\n    templateParametersByEntries: {\n      foo: {\n        type: 'a',\n      },\n      bar: {\n        type: 'b',\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"templateParametersByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/template-parameters-by-entries.mdx","_relativePath":"en/configure/app/html/template-parameters-by-entries.mdx"},{"id":90,"title":"html.templateParameters","routePath":"/en/configure/app/html/template-parameters","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1484}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.templateParameters.\n\n * Type: Object | Function\n * Default:\n\ntype DefaultParameters = {\n  meta: string; // corresponding to html.meta config\n  title: string; // corresponding to html.title config\n  mountId: string; // corresponding to html.mountId config\n  entryName: string; // entry name\n  assetPrefix: string; // corresponding to output.assetPrefix config\n  compilation: webpack.Compilation; // Compilation object corresponding to webpack\n  webpackConfig: config; // webpack config\n  // htmlWebpackPlugin built-in parameters\n  // See https://github.com/jantimon/html-webpack-plugin for details\n  htmlWebpackPlugin: {\n    tags: object;\n    files: object;\n    options: object;\n  };\n};\n\n\nDefine the parameters in the HTML template, corresponding to the\ntemplateParameters config of html-webpack-plugin. You can use the config as an\nobject or a function.\n\nIf it is an object, it will be merged with the default parameters. For example:\n\nexport default {\n  html: {\n    templateParameters: {\n      title: 'My App',\n    },\n  },\n};\n\n\nIf it is a function, the default parameters will be passed in, and you can\nreturn an object to override the default parameters. For example:\n\nexport default {\n  html: {\n    templateParameters: defaultParameters => {\n      console.log(defaultParameters.compilation);\n      console.log(defaultParameters.title);\n      return {\n        title: 'My App',\n      };\n    },\n  },\n};\n\n\n\nExample#\n\nTo use the foo parameter in the HTML template, you can add the following config:\n\nexport default {\n  html: {\n    templateParameters: {\n      foo: 'bar',\n    },\n  },\n};\n\n\nOr you can use a function to dynamically generate the parameters:\n\nexport default {\n  html: {\n    templateParameters: defaultParameters => {\n      return {\n        foo: 'bar',\n      };\n    },\n  },\n};\n\n\nThen you can use the foo parameter in the HTML template by <%= foo %>:\n\n\n\n\nThe compiled HTML is:\n\n\n","frontmatter":{"sidebar_label":"templateParameters"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/template-parameters.mdx","_relativePath":"en/configure/app/html/template-parameters.mdx"},{"id":91,"title":"html.template","routePath":"/en/configure/app/html/template","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":219}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.template.\n\n * Type: string\n * Default:\n\nDefine the path to the HTML template, corresponding to the template config of\nhtml-webpack-plugin.\n\n\nExample#\n\nReplace the default template with a custom HTML template file, you can add the\nfollowing config:\n\nexport default {\n  html: {\n    template: './static/index.html',\n  },\n};\n","frontmatter":{"sidebar_label":"template"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/template.mdx","_relativePath":"en/configure/app/html/template.mdx"},{"id":92,"title":"html.titleByEntries","routePath":"/en/configure/app/html/title-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":336}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.titleByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different title for different pages.\n\nThe usage is same as title, and you can use the \"entry name\" as the key to set\neach page individually.\n\ntitleByEntries will overrides the value set in title.\n\n\nExample#\n\nexport default {\n  html: {\n    title: 'ByteDance',\n    titleByEntries: {\n      foo: 'TikTok',\n    },\n  },\n};\n\n\nAfter recompiling, you can see:\n\n * The title of the page foo is TikTok.\n * The title of other pages is ByteDance.","frontmatter":{"sidebar_label":"titleByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/title-by-entries.mdx","_relativePath":"en/configure/app/html/title-by-entries.mdx"},{"id":93,"title":"html.title","routePath":"/en/configure/app/html/title","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.title.\n\n * Type: string\n * Default: undefined\n\nSet the title tag of the HTML page, for example:\n\nexport default {\n  html: {\n    title: 'example',\n  },\n};\n","frontmatter":{"sidebar_label":"title"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/html/title.mdx","_relativePath":"en/configure/app/html/title.mdx"},{"id":94,"title":"output.assetPrefix","routePath":"/en/configure/app/output/asset-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":770}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.assetPrefix.\n\n * Type: boolean | string\n * Default: '/'\n\nWhen using CDN in the production environment, you can use this option to set the\nURL prefix of static assets, similar to the output.publicPath config of webpack.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the production environment. In the development\nenvironment, please use the dev.assetPrefix to set the URL prefix.\n\nAfter setting, the URLs of JavaScript, CSS and other static files will be\nprefixed with output.assetPrefix:\n\n\nExample#\n\nexport default {\n  output: {\n    assetPrefix: 'https://cdn.example.com/assets/',\n  },\n};\n\n\nAfter building, you can see that the JS files are loaded from:\n\n\n","frontmatter":{"sidebar_label":"assetPrefix"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/asset-prefix.mdx","_relativePath":"en/configure/app/output/asset-prefix.mdx"},{"id":95,"title":"output.assetsRetry","routePath":"/en/configure/app/output/assets-retry","lang":"en","toc":[{"text":"assetsRetry.max","id":"assetsretrymax","depth":3,"charIndex":1318},{"text":"assetsRetry.domain","id":"assetsretrydomain","depth":3,"charIndex":1511},{"text":"assetsRetry.type","id":"assetsretrytype","depth":3,"charIndex":1757},{"text":"assetsRetry.test","id":"assetsretrytest","depth":3,"charIndex":1982},{"text":"assetsRetry.crossOrigin","id":"assetsretrycrossorigin","depth":3,"charIndex":2240},{"text":"assetsRetry.onRetry","id":"assetsretryonretry","depth":3,"charIndex":2488},{"text":"assetsRetry.onSuccess","id":"assetsretryonsuccess","depth":3,"charIndex":2891},{"text":"assetsRetry.onFail","id":"assetsretryonfail","depth":3,"charIndex":3305},{"text":"assetsRetry.inlineScript","id":"assetsretryinlinescript","depth":3,"charIndex":3713}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.assetsRetry.\n\n * Type: Object\n\noutput.assetsRetry is used to configure the retry of assets.The type of\nAssetsRetryOptions is as follows:\n\nexport type AssetsRetryHookContext = {\n  times: number;\n  domain: string;\n  url: string;\n  tagName: string;\n};\n\nexport type AssetsRetryOptions = {\n  type?: string[];\n  domain?: string[];\n  max?: number;\n  test?: string | ((url: string) => boolean);\n  crossOrigin?: boolean;\n  onRetry?: (options: AssetsRetryHookContext) => void;\n  onSuccess?: (options: AssetsRetryHookContext) => void;\n  onFail?: (options: AssetsRetryHookContext) => void;\n};\n\n\nSince the ability will inject some extra runtime code into HTML, we have\ndisabled this ability by default. If you need to enable it, you can configure it\nin the form of an object, for example:\n\nexport default {\n  output: {\n    assetsRetry: {},\n  },\n};\n\n\nWhen you enable this ability, the default config of assetsRetry is as follows:\n\nexport const defaultAssetsRetryOptions: AssetsRetryOptions = {\n  type: ['script', 'link', 'img'],\n  domain: [],\n  max: 3,\n  test: '',\n  crossOrigin: false,\n  onRetry: () => {},\n  onSuccess: () => {},\n  onFail: () => {},\n};\n\n\nAt the same time, you can also customize your retry logic using the following\nconfigurations.\n\n\nassetsRetry.max#\n\n * Type: number\n * Default: 3\n\nThe maximum number of retries for a single asset. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      max: 3,\n    },\n  },\n};\n\n\n\nassetsRetry.domain#\n\n * Type: string[]\n * Default: []\n\nThe domain of the asset to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      domain: ['https://cdn1.example.com', 'https://cdn2.example.com'],\n    },\n  },\n};\n\n\n\nassetsRetry.type#\n\n * Type: string[]\n * Default: ['script', 'link', 'img']\n\nThe type of the asset to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      type: ['script', 'link'],\n    },\n  },\n};\n\n\n\nassetsRetry.test#\n\n * Type: string | ((url: string) => boolean) | undefined\n * Default: undefined\n\nThe test function of the asset to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      test: /cdn\\.example\\.com/,\n    },\n  },\n};\n\n\n\nassetsRetry.crossOrigin#\n\n * Type: undefined | boolean\n * Default: false\n\nWhether to add the crossOrigin attribute to the asset to be retried. For\nexample:\n\nexport default {\n  output: {\n    assetsRetry: {\n      crossOrigin: true,\n    },\n  },\n};\n\n\n\nassetsRetry.onRetry#\n\n * Type: undefined | (options: AssetsRetryHookContext) => void\n\nThe callback function when the asset is being retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      onRetry: ({ times, domain, url, tagName }) => {\n        console.log(\n          `Retry ${times} times, domain: ${domain}, url: ${url}, tagName: ${tagName}`,\n        );\n      },\n    },\n  },\n};\n\n\n\nassetsRetry.onSuccess#\n\n * Type: undefined | (options: AssetsRetryHookContext) => void\n\nThe callback function when the asset is successfully retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      onSuccess: ({ times, domain, url, tagName }) => {\n        console.log(\n          `Retry ${times} times, domain: ${domain}, url: ${url}, tagName: ${tagName}`,\n        );\n      },\n    },\n  },\n};\n\n\n\nassetsRetry.onFail#\n\n * Type: undefined | (options: AssetsRetryHookContext) => void\n\nThe callback function when the asset is failed to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      onFail: ({ times, domain, url, tagName }) => {\n        console.log(\n          `Retry ${times} times, domain: ${domain}, url: ${url}, tagName: ${tagName}`,\n        );\n      },\n    },\n  },\n};\n\n\n\nassetsRetry.inlineScript#\n\n * Type: boolean\n * Default: true\n\nWhether to inline the runtime JavaScript code of assetsRetry into the HTML file.\n\nIf you don't want to insert the code in the HTML file, you can set\nassetsRetry.inlineScript to false:\n\nexport default {\n  output: {\n    assetsRetry: {\n      inlineScript: false,\n    },\n  },\n};\n\n\nAfter adding the above configuration, the runtime code of assetsRetry will be\nextracted into a separate assets-retry.[version].js file and output to the dist\ndirectory.\n\nThe downside is that assets-retry.[version].js itself may fail to load. If this\nhappens, the assets retry will not work. Therefore, we prefer to inline the\nruntime code into the HTML file.","frontmatter":{"sidebar_label":"assetsRetry"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/assets-retry.mdx","_relativePath":"en/configure/app/output/assets-retry.mdx"},{"id":96,"title":"output.charset","routePath":"/en/configure/app/output/charset","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.charset.\n\n * Type: 'ascii' | 'utf8'\n * Default: 'ascii'\n\nBy default, Builder's output is ASCII-only and will escape all non-ASCII\ncharacters.\n\nIf you want to output the original characters without using escape sequences,\nyou can set output.charset to utf8.\n\nexport default {\n  output: {\n    charset: 'utf8',\n  },\n};\n\n\nBuilder will automatically add to the generated HTML files if output.charset is\nutf8.","frontmatter":{"sidebar_label":"charset"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/charset.mdx","_relativePath":"en/configure/app/output/charset.mdx"},{"id":97,"title":"output.cleanDistPath","routePath":"/en/configure/app/output/clean-dist-path","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.cleanDistPath.\n\n * Type: boolean\n * Default: true\n\nWhether to clean all files in the dist path before starting compilation.\n\nBy default, Builder clean up the dist file, you can disable this behavior by\nsetting cleanDistPath to false.\n\nexport default {\n  output: {\n    cleanDistPath: false,\n  },\n};\n","frontmatter":{"sidebar_label":"cleanDistPath"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/clean-dist-path.mdx","_relativePath":"en/configure/app/output/clean-dist-path.mdx"},{"id":98,"title":"output.convertToRem","routePath":"/en/configure/app/output/convert-to-rem","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":4,"charIndex":334},{"text":"Object Type","id":"object-type","depth":4,"charIndex":852},{"text":"Example","id":"example","depth":3,"charIndex":2420}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.convertToRem.\n\n * Type: boolean | object\n * Default: false\n\nBy setting output.convertToRem, the Builder can do the following things:\n\n * Convert px to rem in CSS.\n * Insert runtime code into the HTML template to set the fontSize of the root\n   element.\n\nBoolean Type#\n\nIf output.convertToRem is set to true, Rem processing capability will be turned\non.\n\nexport default {\n  output: {\n    convertToRem: true,\n  },\n};\n\n\nAt this point, the rem configuration defaults as follows:\n\n{\n  enableRuntime: true,\n  rootFontSize: 50,\n  screenWidth: 375,\n  rootFontSize: 50,\n  maxRootFontSize: 64,\n  widthQueryKey: '',\n  excludeEntries: [],\n  supportLandscape: false,\n  useRootFontSizeBeyondMax: false,\n  pxtorem: {\n    rootValue: 50,\n    unitPrecision: 5,\n    propList: ['*'],\n  }\n}\n\n\nObject Type#\n\nWhen the value of output.convertToRem is object type, The Builder will perform\nRem processing based on the current configuration.\n\noptions:\n\nNAME                       TYPE       DEFAULT   DESCRIPTION\nenableRuntime              boolean    true      Whether to generate runtime code to calculate and set the\n                                                font size of the root element\ninlineRuntime              boolean    true      Whether to inline the runtime code to HTML. If set to false,\n                                                the runtime code will be extracted into a separate\n                                                convert-rem.[version].js file and output to the dist\n                                                directory\nrootFontSize               number     50        The root element font size\nmaxRootFontSize            number     64        The root element max font size\nwidthQueryKey              string     ''        Get clientWidth from the url query based on widthQueryKey\nscreenWidth                number     375       The screen width for UI design drawings (Usually, fontSize =\n                                                (clientWidth * rootFontSize) / screenWidth)\nexcludeEntries             string[]   []        The entries to ignore\nsupportLandscape           boolean    false     Use height to calculate rem in landscape\nuseRootFontSizeBeyondMax   boolean    false     Whether to use rootFontSize when large than maxRootFontSize\npxtorem                    object               postcss-pxtorem options\n\n\nExample#\n\nexport default {\n  output: {\n    convertToRem: {\n      rootFontSize: 30,\n      excludeEntries: ['404', 'page2'],\n      pxtorem: {\n        propList: ['font-size'],\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"convertToRem"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/convert-to-rem.mdx","_relativePath":"en/configure/app/output/convert-to-rem.mdx"},{"id":99,"title":"output.copy","routePath":"/en/configure/app/output/copy","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see output.copy.\n\n * Type: CopyPluginOptions | CopyPluginOptions['patterns']\n * Default: undefined\n\nCopies the specified file or directory to the dist directory.\n\nFor example, copy the files under src/assets to the dist directory:\n\nexport default {\n  output: {\n    copy: [{ from: './src/assets', to: '' }],\n  },\n};\n\n\nFor more detailed configuration, please refer to: copy-webpack-plugin.","frontmatter":{"sidebar_label":"copy"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/copy.mdx","_relativePath":"en/configure/app/output/copy.mdx"},{"id":100,"title":"output.cssModuleLocalIdentName","routePath":"/en/configure/app/output/css-module-local-ident-name","lang":"en","toc":[{"text":"Default Value","id":"default-value","depth":3,"charIndex":360},{"text":"Template String","id":"template-string","depth":3,"charIndex":688},{"text":"Example","id":"example","depth":3,"charIndex":1139}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.cssModuleLocalIdentName.\n\n * Type: string\n * Default:\n\n// isProd indicates that the production build\nconst localIdentName = isProd\n  ? '[hash:base64:5]'\n  : '[path][name]__[local]--[hash:base64:5]';\n\n\nSets the format of the className generated by CSS Modules after compilation.\n\n\nDefault Value#\n\ncssModuleLocalIdentName has different default values in development and\nproduction.\n\nIn a production, Builder will generate shorter class names to reduce the bundle\nsize.\n\n\n\n// In development, the value is `.src-index-module__header--xxxxx`\n// In production, the value is `.xxxxx`\nconsole.log(styles.header);\n\n\n\nTemplate String#\n\nYou can use the following template strings in cssModuleLocalIdentName:\n\n * [name] - the basename of the asset.\n * [local] - original class.\n * [hash] - the hash of the string.\n * [folder] - the folder relative path.\n * [path] - the relative path.\n * [file] - filename and path.\n * [ext] - extension with leading dot.\n * [hash::]: hash with hash settings.\n\nTIP\n\nWhen using Rspack as the bundler, currently does not support custom .\n\n\nExample#\n\nSet cssModuleLocalIdentName to other value:\n\nexport default {\n  output: {\n    cssModuleLocalIdentName: '[hash:base64:4]',\n  },\n};\n","frontmatter":{"sidebar_label":"cssModuleLocalIdentName"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/css-module-local-ident-name.mdx","_relativePath":"en/configure/app/output/css-module-local-ident-name.mdx"},{"id":101,"title":"output.dataUriLimit","routePath":"/en/configure/app/output/data-uri-limit","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":750}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.dataUriLimit.\n\n * Type\n\ntype DataUriLimitConfig = {\n  svg?: number;\n  font?: number;\n  image?: number;\n  media?: number;\n};\n\n\n * Default\n\nconst defaultDatUriLimit = {\n  svg: 10000,\n  font: 10000,\n  image: 10000,\n  media: 10000,\n};\n\n\nSet the size threshold to inline static assets such as images and fonts.\n\nBy default, static assets will be Base64 encoded and inline into the page if the\nsize is less than 10KB.\n\nYou can adjust the threshold by setting the dataUriLimit config.\n\nDetail:\n\n * svg: The threshold of the SVG image.\n * font: The threshold of the font file.\n * image: The threshold of non-SVG images.\n * media: The threshold of media assets such as videos.\n\n\nExample#\n\nSet the threshold of images to 5000 Bytes, and set media assets not to be\ninlined:\n\nexport default {\n  output: {\n    dataUriLimit: {\n      image: 5000,\n      media: 0,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"dataUriLimit"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/data-uri-limit.mdx","_relativePath":"en/configure/app/output/data-uri-limit.mdx"},{"id":102,"title":"output.disableCssExtract","routePath":"/en/configure/app/output/disable-css-extract","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableCssExtract.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to disable CSS extract and inline CSS files into JS files.\n\nBy default, Builder will extract CSS into a separate .css file and output it to\nthe dist directory. When this option is set to true, CSS files will be inlined\ninto JS files and inserted on the page at runtime via","frontmatter":{"sidebar_label":"disableCssExtract"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-css-extract.mdx","_relativePath":"en/configure/app/output/disable-css-extract.mdx"},{"id":103,"title":"output.disableCssModuleExtension","routePath":"/en/configure/app/output/disable-css-module-extension","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":693},{"text":"Detailed","id":"detailed","depth":3,"charIndex":780},{"text":"disableCssModuleExtension is false (default)","id":"disablecssmoduleextension-is-false-(default)","depth":4,"charIndex":858},{"text":"disableCssModuleExtension is true","id":"disablecssmoduleextension-is-true","depth":4,"charIndex":1095}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableCssModuleExtension.\n\n * Type: boolean\n * Default: false\n\nWhether to treat all .css files in the source directory as CSS Modules.\n\nBy default, only the *.module.css files are treated as CSS Modules. After\nenabling this config, all *.css style files in the source directory will be\nregarded as CSS Modules.\n\n.sass, .scss and .less files are also affected by disableCssModuleExtension.\n\nTIP\n\nWe do not recommend enabling this config, because after enabling\ndisableCssModuleExtension, CSS Modules files and ordinary CSS files cannot be\nclearly distinguished, which is not conducive to long-term maintenance.\n\n\nExample#\n\nexport default {\n  output: {\n    disableCssModuleExtension: true,\n  },\n};\n\n\n\nDetailed#\n\nThe following is a detailed explanation of the CSS Modules rules:\n\ndisableCssModuleExtension is false (default)#\n\nThe following files are treated as CSS Modules:\n\n * all *.module.css files\n\nThe following files are treated as normal CSS:\n\n * all *.css files (excluding .module)\n * all *.global.css files\n\ndisableCssModuleExtension is true#\n\nThe following files are treated as CSS Modules:\n\n * *.css and *.module.css files in the source directory\n * *.module.css files under node_modules\n\nThe following files are treated as normal CSS:\n\n * all *.global.css files\n * *.css files under node_modules (without .module)\n\nTIP\n\nFor CSS Modules files inside node_modules, please always use the *.module.css\nsuffix.","frontmatter":{"sidebar_label":"disableCssModuleExtension"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-css-module-extension.mdx","_relativePath":"en/configure/app/output/disable-css-module-extension.mdx"},{"id":104,"title":"output.disableFilenameHash","routePath":"/en/configure/app/output/disable-filename-hash","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":379}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableFilenameHash.\n\n * Type: boolean\n * Default: false\n\nRemove the hash from the name of static files after production build.\n\nAfter the production build, there will be a hash in the middle of the filename\nby default. You can disable this behavior through the output.disableFilenameHash\nconfig.\n\n\nExample#\n\nBy default, the filename is:\n\nFile                                     Size         Gzipped\ndist/static/css/187.7879e19d.css         126.99 KB    9.17 KB\ndist/static/js/main.18a568e5.js          2.24 KB      922 B\n\n\nAdd output.disableFilenameHash config:\n\nexport default {\n  output: {\n    disableFilenameHash: true,\n  },\n};\n\n\nAfter rebuild, the filenames become:\n\nFile                            Size         Gzipped\ndist/static/css/187.css         126.99 KB    9.17 KB\ndist/static/js/main.js          2.24 KB      922 B\n","frontmatter":{"sidebar_label":"disableFilenameHash"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-filename-hash.mdx","_relativePath":"en/configure/app/output/disable-filename-hash.mdx"},{"id":105,"title":"output.disableInlineRuntimeChunk","routePath":"/en/configure/app/output/disable-inline-runtime-chunk","lang":"en","toc":[{"text":"Disable Inlining","id":"disable-inlining","depth":3,"charIndex":766},{"text":"Merge Into Page Chunk","id":"merge-into-page-chunk","depth":3,"charIndex":1041}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableInlineRuntimeChunk.\n\n * Type: boolean\n * Default: false\n\nUsed to control whether to inline the bundler's runtime code into HTML.\n\nWhat is runtimeChunk\n\nBuilder will generate a builder-runtime.js file in the dist directory, which is\nthe runtime code of webpack or Rspack.\n\nruntimeChunk is a piece of runtime code, which is provided by webpack or Rspack,\nthat contains the necessary module processing logic, such as module loading,\nmodule parsing, etc. See Runtime for details.\n\nIn the production environment, Builder will inline the runtimeChunk file into\nthe HTML file by default instead of writing it to the dist directory. This is\ndone to reduce the number of file requests.\n\n\nDisable Inlining#\n\nIf you don't want the runtimeChunk file to be inlined into the HTML file, you\ncan set disableInlineRuntimeChunk to true and a separate builder-runtime.js file\nwill be generated.\n\nexport default {\n  output: {\n    disableInlineRuntimeChunk: true,\n  },\n};\n\n\n\nMerge Into Page Chunk#\n\nIf you don't want to generate a separate runtimeChunk file, but want the\nruntimeChunk code to be bundled into the page chunk, you can set the config like\nthis:\n\nexport default {\n  tools: {\n    webpack: {\n      optimization: {\n        runtimeChunk: false,\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"disableInlineRuntimeChunk"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-inline-runtime-chunk.mdx","_relativePath":"en/configure/app/output/disable-inline-runtime-chunk.mdx"},{"id":106,"title":"output.disableMinimize","routePath":"/en/configure/app/output/disable-minimize","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableMinimize.\n\n * Type: boolean\n * Default: false\n\nWhether to disable code minification in production build.\n\nBy default, JS code and CSS code are minified during production build. If you do\nnot want to minify the code, you can set disableMinimize to true.\n\nexport default {\n  output: {\n    disableMinimize: true,\n  },\n};\n","frontmatter":{"sidebar_label":"disableMinimize"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-minimize.mdx","_relativePath":"en/configure/app/output/disable-minimize.mdx"},{"id":107,"title":"output.disableNodePolyfill","routePath":"/en/configure/app/output/disable-node-polyfill","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: true\n\nThis config is used to control whether to inject the Polyfill of the Node module\ninto the code.\n\nBy default, we will not inject Node Polyfill into the code to avoid bundle size\nincrease. If you need to inject Node Polyfill, you can set\noutput.disableNodePolyfill to false:\n\nmodern.config.ts\n\nexport default defineConfig({\n  output: {\n    disableNodePolyfill: false,\n  },\n});\n\n\nThis config is implemented based on the Node Polyfill plugin of Modern.js\nBuilder, you can read Modern.js Builder - Node Polyfill Plugin documentation for\ndetails.","frontmatter":{"sidebar_label":"disableNodePolyfill"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-node-polyfill.mdx","_relativePath":"en/configure/app/output/disable-node-polyfill.mdx"},{"id":108,"title":"output.disableSourceMap","routePath":"/en/configure/app/output/disable-source-map","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableSourceMap.\n\n * Type:\n\ntype DisableSourceMap =\n  | boolean\n  | {\n      js?: boolean;\n      css?: boolean;\n    };\n\n\n * Default:\n\nconst defaultDisableSourceMap = {\n  js: false,\n  css: process.env.NODE_ENV === 'production',\n};\n\n\nWhether to disable Source Map generation.\n\nWhat is a Source Map\n\nSource Map is an information file that saves the source code mapping\nrelationship. It records each location of the compiled code and the\ncorresponding pre-compilation location. With Source Map, you can directly view\nthe source code when debugging the compiled code.\n\nBy default, Builder's Source Map generation rules are:\n\n * In development build, SourceMap of JS files and CSS files will be generated,\n   which is convenient for debugging.\n * In production build, the Source Map of JS files will be generated for\n   debugging and troubleshooting online problems; the Source Map of CSS files\n   will not be generated.\n\nTIP\n\nWhen using Rspack as the bundler, disable css sourcemap alone is not currently\nsupported.\n\nIf the project does not need Source Map, you can turned off it to speed up the\ncompile speed.\n\nexport default {\n  output: {\n    disableSourceMap: true,\n  },\n};\n\n\nIf you want to enable Source Map in development and disable it in the\nproduction, you can set to:\n\nexport default {\n  output: {\n    disableSourceMap: process.env.NODE_ENV === 'production',\n  },\n};\n\n\nIf you need to individually control the Source Map of JS files or CSS files, you\ncan refer to the following settings:\n\nexport default {\n  output: {\n    disableSourceMap: {\n      js: false,\n      css: true,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"disableSourceMap"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-source-map.mdx","_relativePath":"en/configure/app/output/disable-source-map.mdx"},{"id":109,"title":"output.disableSvgr","routePath":"/en/configure/app/output/disable-svgr","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableSvgr.\n\n * Type: boolean\n * Default: false\n\nWhether to transform SVGs into React components. If true, will treat all .svg\nfiles as assets.\n\nBy default, when an SVG resource is referenced in a JS file, Builder will call\nSVGR to convert the SVG into a React component. If you are sure that all SVG\nresources in your project are not being used as React components, you can turn\noff this conversion by setting disableSvgr to true to improve build performance.\n\nexport default {\n  output: {\n    disableSvgr: true,\n  },\n};\n","frontmatter":{"sidebar_label":"disableSvgr"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-svgr.mdx","_relativePath":"en/configure/app/output/disable-svgr.mdx"},{"id":110,"title":"output.disableTsChecker","routePath":"/en/configure/app/output/disable-ts-checker","lang":"en","toc":[{"text":"Blocking Compilation","id":"blocking-compilation","depth":3,"charIndex":508},{"text":"Example","id":"example","depth":3,"charIndex":726}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableTsChecker.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to disable TypeScript type checker during compilation.\n\nBy default, Builder will run the TypeScript type checker in a separate process\nduring the build process. Its checking logic is consistent with TypeScript's\nnative tsc command. You can use tsconfig.json or Builder's tools.tsChecker\nconfig to customize the checking behavior.\n\n\nBlocking Compilation#\n\n * In development build, type errors will not block the compilation process.\n * In production build, type errors will cause the build to fail to ensure the\n   stability of the production code.\n\n\nExample#\n\nDisable TypeScript type checker:\n\nexport default {\n  output: {\n    disableTsChecker: true,\n  },\n};\n\n\nDisable type checker in development:\n\nexport default {\n  output: {\n    disableTsChecker: process.env.NODE_ENV === 'development',\n  },\n};\n\n\nDisable type checker in production:\n\nexport default {\n  output: {\n    disableTsChecker: process.env.NODE_ENV === 'production',\n  },\n};\n\n\nTIP\n\nIt is not recommended to disable type checker in production, which will reduce\nthe stability of the production code, please use it with caution.","frontmatter":{"sidebar_label":"disableTsChecker"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/disable-ts-checker.mdx","_relativePath":"en/configure/app/output/disable-ts-checker.mdx"},{"id":111,"title":"output.distPath","routePath":"/en/configure/app/output/dist-path","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1108}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.distPath.\n\n * Type\n\ntype DistPathConfig = {\n  root?: string;\n  js?: string;\n  css?: string;\n  svg?: string;\n  font?: string;\n  html?: string;\n  image?: string;\n  media?: string;\n  server?: string;\n};\n\n\n * Default\n\nconst defaultDistPath = {\n  root: 'dist',\n  html: 'html',\n  js: 'static/js',\n  css: 'static/css',\n  svg: 'static/svg',\n  font: 'static/font',\n  image: 'static/image',\n  media: 'static/media',\n  server: 'bundles',\n};\n\n\nSet the directory of the dist files. Builder will output files to the\ncorresponding subdirectory according to the file type.\n\nDetail:\n\n * root: The root directory of all files.\n * html: The output directory of HTML files.\n * js: The output directory of JavaScript files.\n * css: The output directory of CSS style files.\n * svg: The output directory of SVG images.\n * font: The output directory of font files.\n * image: The output directory of non-SVG images.\n * media: The output directory of media assets, such as videos.\n * server: The output directory of server bundles when target is node.\n\n\nExample#\n\nThe JavaScript files will be output to the distPath.root + distPath.js\ndirectory, which is dist/static/js.\n\nIf you need to output JavaScript files to the build/resource/js directory, you\ncan add following config:\n\nexport default {\n  output: {\n    distPath: {\n      root: 'build',\n      js: 'resource/js',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"distPath"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/dist-path.mdx","_relativePath":"en/configure/app/output/dist-path.mdx"},{"id":112,"title":"output.enableAssetFallback","routePath":"/en/configure/app/output/enable-asset-fallback","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":269}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableAssetFallback.\n\n * Type: boolean\n * Default: false\n\nIf this option is enabled, all unrecognized files will be emitted to the dist\ndirectory; otherwise, an exception will be thrown.\n\n\nExample#\n\nEnable the config:\n\nexport default {\n  output: {\n    enableAssetFallback: true,\n  },\n};\n\n\nImport a module of unknown type in code:\n\nimport './foo.xxx';\n\n\nAfter compilation, foo.xxx will be output to the dist/static/media directory.\n\nYou can control the output path and filename after fallback through the\noutput.distPath.media and output.filename.media configs.\n\nTIP\n\nEnabling this config will change the rules structure in the webpack config. In\nmost cases, we do not recommend using this config.","frontmatter":{"sidebar_label":"enableAssetFallback"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/enable-asset-fallback.mdx","_relativePath":"en/configure/app/output/enable-asset-fallback.mdx"},{"id":113,"title":"output.enableAssetManifest","routePath":"/en/configure/app/output/enable-asset-manifest","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":250}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableAssetManifest.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to generate a manifest file that contains information of all assets.\n\n\nExample#\n\nEnable asset manifest:\n\nexport default {\n  output: {\n    enableAssetManifest: true,\n  },\n};\n\n\nAfter compiler, there will be a dist/manifest.json file:\n\n{\n  \"files\": {\n    \"main.css\": \"/static/css/main.45b01211.css\",\n    \"main.js\": \"/static/js/main.52fd298f.js\",\n    \"html/main/index.html\": \"/html/main/index.html\"\n  },\n  \"entrypoints\": [\"static/css/main.45b01211.css\", \"static/js/main.52fd298f.js\"]\n}\n","frontmatter":{"sidebar_label":"enableAssetManifest"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/enable-asset-manifest.mdx","_relativePath":"en/configure/app/output/enable-asset-manifest.mdx"},{"id":114,"title":"output.enableCssModuleTSDeclaration","routePath":"/en/configure/app/output/enable-css-module-tsdeclaration","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":249}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableCssModuleTSDeclaration.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to generate a TypeScript declaration file for CSS modules.\n\n\nExample#\n\nEnable CSS module TypeScript declaration:\n\nexport default {\n  output: {\n    enableCssModuleTSDeclaration: true,\n  },\n};\n\n\nAfter building, there will be a .d.ts file for each CSS module file. For example\n\ninterface CssExports {\n  title: string;\n}\nexport const cssExports: CssExports;\nexport default cssExports;\n","frontmatter":{"sidebar_label":"enableCssModuleTSDeclaration"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/enable-css-module-tsdeclaration.mdx","_relativePath":"en/configure/app/output/enable-css-module-tsdeclaration.mdx"},{"id":115,"title":"output.enableInlineScripts","routePath":"/en/configure/app/output/enable-inline-scripts","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":239}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableInlineScripts.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to inline output scripts files (.js files) into HTML with\n\n\nUsing RegExp#\n\nIf you need to inline part of the JS files, you can set enableInlineScripts to a\nregular expression that matches the URL of the JS file that needs to be inlined.\n\nFor example, to inline main.js into HTML, you can add the following\nconfiguration:\n\nexport default {\n  output: {\n    enableInlineScripts: /\\/main\\.\\w+\\.js$/,\n  },\n};\n\n\nTIP\n\nThe production filename will contains a hash by default, such as\n/main.18a568e5.js.","frontmatter":{"sidebar_label":"enableInlineScripts"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/enable-inline-scripts.mdx","_relativePath":"en/configure/app/output/enable-inline-scripts.mdx"},{"id":116,"title":"output.enableInlineStyles","routePath":"/en/configure/app/output/enable-inline-styles","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"enableInlineStyles"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/enable-inline-styles.mdx","_relativePath":"en/configure/app/output/enable-inline-styles.mdx"},{"id":117,"title":"output.enableLatestDecorators","routePath":"/en/configure/app/output/enable-latest-decorators","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableLatestDecorators.\n\n * Type: boolean\n * Default: false\n\nWhether to use the new decorator proposal.\n\nBy default, Builder uses the legacy decorator proposal when compiling\ndecorators.\n\nWhen output.enableLatestDecorators is set to true, the Builder will compile with\nthe new decorator proposal (version 2018-09).\n\nexport default {\n  output: {\n    enableLatestDecorators: true,\n  },\n};\n","frontmatter":{"sidebar_label":"enableLatestDecorators"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/enable-latest-decorators.mdx","_relativePath":"en/configure/app/output/enable-latest-decorators.mdx"},{"id":118,"title":"output.externals","routePath":"/en/configure/app/output/externals","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":430}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.externals.\n\n * Type: string | object | function | RegExp\n\n * Default: undefined\n\nAt build time, prevent some import dependencies from being packed into bundles\nin your code, and instead fetch them externally at runtime.\n\nFor more information, please see: webpack Externals\n\nTIP\n\nWhen using Rspack as the bundler, only the Record type is supported.\n\n\nExample#\n\nExclude the react-dom dependency from the build product. To get this module at\nruntime, the value of react-dom will globally retrieve the ReactDOM variable.\n\nexport default {\n  output: {\n    externals: {\n      'react-dom': 'ReactDOM',\n    },\n  },\n};\n\n\nTIP\n\nWhen the build target is Web Worker, externals will not take effect. This is\nbecause the Worker environment can not access global variables.","frontmatter":{"sidebar_label":"externals"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/externals.mdx","_relativePath":"en/configure/app/output/externals.mdx"},{"id":119,"title":"output.filename","routePath":"/en/configure/app/output/filename","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1220}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.filename.\n\n * Type\n\ntype FilenameConfig = {\n  js?: string;\n  css?: string;\n  svg?: string;\n  font?: string;\n  image?: string;\n  media?: string;\n};\n\n\n * Default\n\n// Development\nconst devDefaultFilename = {\n  js: '[name].js',\n  css: '[name].css',\n  svg: '[name].[contenthash:8].svg',\n  font: '[name].[contenthash:8][ext]',\n  image: '[name].[contenthash:8][ext]',\n  media: '[name].[contenthash:8][ext]',\n};\n\n// Production\nconst prodDefaultFilename = {\n  js: '[name].[contenthash:8].js',\n  css: '[name].[contenthash:8].css',\n  svg: '[name].[contenthash:8].svg',\n  font: '[name].[contenthash:8][ext]',\n  image: '[name].[contenthash:8][ext]',\n  media: '[name].[contenthash:8][ext]',\n};\n\n\nSets the filename of dist files.\n\nAfter the production build, there will be a hash in the middle of the filename\nby default. You can disable this behavior through the output.disableFilenameHash\nconfig.\n\nDetail:\n\n * js: The name of the JavaScript file.\n * css: The name of the CSS style file.\n * svg: The name of the SVG image.\n * font: The name of the font file.\n * image: The name of a non-SVG image.\n * media: The name of a media asset, such as a video.\n\n\nExample#\n\nSet the name of the JavaScript file to [name]_script.js:\n\nexport default {\n  output: {\n    filename: {\n      js:\n        process.env.NODE_ENV === 'production'\n          ? '[name]_script.[contenthash:8].js'\n          : '[name]_script.js',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"filename"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/filename.mdx","_relativePath":"en/configure/app/output/filename.mdx"},{"id":120,"title":"output.legalComments","routePath":"/en/configure/app/output/legal-comments","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":834}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.legalComments.\n\n * Type: 'linked' | 'inline' | 'none'\n * Default: 'linked'\n\nConfigure how to handle the legal comment.\n\nA \"legal comment\" is considered to be any statement-level comment in JS or\nrule-level comment in CSS that contains @license or @preserve or that starts\nwith //! or /*!. These comments are preserved in output files by default since\nthat follows the intent of the original authors of the code.\n\nThis behavior can be configured by using one of the following options:\n\n * linked: Extract all legal comments to a .LEGAL.txt file and link to them with\n   a comment.\n * inline: Preserve all legal comments in original position.\n * none: Remove all legal comments.\n\nTIP\n\nWhen using Rspack as the bundler, inline is not currently supported.\n\n\nExample#\n\nRemove all legal comments:\n\nexport default {\n  output: {\n    legalComments: 'none',\n  },\n};\n","frontmatter":{"sidebar_label":"legalComments"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/legal-comments.mdx","_relativePath":"en/configure/app/output/legal-comments.mdx"},{"id":121,"title":"output.overrideBrowserslist","routePath":"/en/configure/app/output/override-browserslist","lang":"en","toc":[{"text":"Priority","id":"priority","depth":4,"charIndex":406},{"text":"Default Value","id":"default-value","depth":4,"charIndex":806},{"text":"Example","id":"example","depth":3,"charIndex":1015},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":1322}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.overrideBrowserslist.\n\n * Type: string[] | Record\n * Default: undefined\n\nSpecifies the range of target browsers that the project is compatible with. This\nvalue will be used by @babel/preset-env and autoprefixer to identify the\nJavaScript syntax that need to be transformed and the CSS browser prefixes that\nneed to be added.\n\nPriority#\n\nThe overrideBrowserslist config will override the .browserslistrc config file in\nthe project and the browserslist field in package.json.\n\nIn most cases, it is recommended to use the .browserslistrc file rather than the\noverrideBrowserslist config. Because the .browserslistrc file is the official\nconfig file, it is more general and can be recognized by other libraries in the\ncommunity.\n\nDefault Value#\n\nIf there is no browserslist configs defined in the project, nor\noverrideBrowserslist defined, then Builder will set the default browserslist to:\n\n['> 0.01%', 'not dead', 'not op_mini all'];\n\n\n\nExample#\n\nAn example compatible with mobile scenarios:\n\nexport default {\n  output: {\n    overrideBrowserslist: [\n      'iOS >= 9',\n      'Android >= 4.4',\n      'last 2 versions',\n      '> 0.2%',\n      'not dead',\n    ],\n  },\n};\n\n\nCheck out the browserslist documentation to learn more about browserslist.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different browser\nranges for different targets. At this point, you need to set\noverrideBrowserslist to an object whose key is the corresponding build target.\n\nFor example to set different ranges for web and node:\n\nexport default {\n  output: {\n    overrideBrowserslist: {\n      web: [\n        'iOS >= 9',\n        'Android >= 4.4',\n        'last 2 versions',\n        '> 0.2%',\n        'not dead',\n      ],\n      node: ['node >= 14'],\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"overrideBrowserslist"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/override-browserslist.mdx","_relativePath":"en/configure/app/output/override-browserslist.mdx"},{"id":122,"title":"output.polyfill","routePath":"/en/configure/app/output/polyfill","lang":"en","toc":[{"text":"Config","id":"config","depth":3,"charIndex":224},{"text":"entry","id":"entry","depth":4,"charIndex":233},{"text":"usage","id":"usage","depth":4,"charIndex":402},{"text":"ua","id":"ua","depth":4,"charIndex":552},{"text":"off","id":"off","depth":4,"charIndex":792}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.polyfill.\n\n * Type: 'entry' | 'usage' | 'ua' | 'off'\n * Default: 'entry'\n\nVia output.polyfill you can configure how the polyfill is injected.\n\n\nConfig#\n\nentry#\n\nPolyfill is injected in every entry file when output.polyfill is configured as\n'entry'.\n\nEquivalent to useBuiltIns: 'entry' configuration in @babel/preset-env.\n\nusage#\n\nPolyfill is injected in each file based on the API used in the code.\n\nEquivalent to useBuiltIns: 'usage' configuration in @babel/preset-env.\n\nua#\n\nThe Polyfill code is dynamically delivered according to the currently requested\nUA information.\n\nTIP\n\nThe dynamic delivery feature requires the @modern-js/plugin-polyfill plugin. For\nmore details, please refer to Polyfill At Runtime.\n\noff#\n\nPolyfill is not injected. When using this option, you need to ensure code\ncompatibility yourself.\n\nTIP\n\nWhen using Rspack as the bundler, the usage configuration item is not currently\nsupported.","frontmatter":{"sidebar_label":"polyfill"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/polyfill.mdx","_relativePath":"en/configure/app/output/polyfill.mdx"},{"id":123,"title":"output.splitRouteChunks","routePath":"/en/configure/app/output/splitRouteChunks","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: true\n\nWhen using convention-based routing, the framework will split js and css based\non the route to load on demand. If your project does not want to split js and\ncss based on routes, you can set this option to false.\n\nExample:\n\nexport default {\n  output: {\n    splitRouteChunks: false,\n  },\n}\n","frontmatter":{"sidebar_label":"splitRouteChunks"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/splitRouteChunks.mdx","_relativePath":"en/configure/app/output/splitRouteChunks.mdx"},{"id":124,"title":"output.ssg","routePath":"/en/configure/app/output/ssg","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":175},{"text":"Single Entry","id":"single-entry","depth":3,"charIndex":186},{"text":"Multi Entries","id":"multi-entries","depth":3,"charIndex":1224},{"text":"Configure Route","id":"configure-route","depth":3,"charIndex":2080},{"text":"Prevent Default","id":"prevent-default","depth":3,"charIndex":3046},{"text":"Dynamic Params","id":"dynamic-params","depth":3,"charIndex":3654}],"domain":"","content":"#\n\n * Type: boolean | object | function\n * Default: undefined\n\nEnable the SSG for Self-controlled Routing or Conventional Routing.\n\nINFO\n\nFor more routes detail, see routes.\n\n\nExample#\n\n\nSingle Entry#\n\nWhen the configuration is set to true, the SSG of all entries will be enabled by\ndefault.\n\nFor self-controlled routing, the root route of the entry will be rendered. For\nconvention routing, every route in the entry will be rendered.\n\nFor example, the src/ directory has the following file structure that satisfies\nconventional routing:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       ├── page.tsx\n│       └── user\n│           ├── layout.tsx\n│           ├── page.tsx\n│           └── profile\n│               └── page.tsx\n\n\nMake the following config in modern.config.[tj]s:\n\nexport default defineConfig({\n  output: {\n    ssg: true,\n  },\n});\n\n\nAfter executing pnpm build to build the application. The dist/ directory will\ngenerate three HTML for each of the three routes (only one HTML if SSG not\nenabled), and all HTML has been rendered.\n\nFor example the following self-controlled routing:\n\nAlso using the above configuration, after executing pnpm run build, only the\nentry route / will generate the rendered HTML.\n\n\nMulti Entries#\n\noutput.ssg can also be configured according to the entries, and the rules that\nthe configuration takes effect are also determined by the entries routing\nmethod.\n\nFor example the following directory structure:\n\n.\n├── src\n│   ├── entryA\n│   │   └── routes\n│   │       ├── layout.tsx\n│   │       ├── page.tsx\n│   │       └── user\n│   │           ├── layout.tsx\n│   │           ├── page.tsx\n│   │           └── profile\n│   │               └── page.tsx\n│   └── entryB\n│       └── App.tsx\n\n\nBy default, all entryA entrances are rendered at build time after setting\noutput.ssg to true. You can configure false to cancel the default behavior of\nthe specified entries. For example, to cancel the rendering of the entryA at\nbuild time:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      entryA: true,\n      entryB: false,\n    },\n  },\n});\n\n\n\nConfigure Route#\n\nAs mentioned above, Self-Controlled Routing only enables SSG configuration for\nentries route by default.\n\nSet specific routes in output.ssg can tell Modern.js to enable the SSG of these\nclient side routes. For example, the content of the above src/App.tsx file is:\n\nWhen set like this in modern.config.[jt]s, the /about route will also enable\nSSG:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      routes: ['/', '/about'],\n    },\n  },\n});\n\n\nModern.js will automatically concat the complete URL according to the entry and\nhand it over to the SSG plugin to complete the rendering.\n\nRequest headers can also be configured for specific entries or routes, for\nexample:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      headers: {},\n      routes: [\n        '/',\n        {\n          url: '/about',\n          headers: {},\n        },\n      ],\n    },\n  },\n});\n\n\nINFO\n\nThe headers set in the route override the headers set in the entry.\n\n\nPrevent Default#\n\nBy default, Conventional Routing all turn on SSG. Modern.js provides another\nfield to prevent the default SSG behavior.\n\nFor example, the following directory structure , /、/user and /user/profle all\nhave SSG enabled:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       ├── page.tsx\n│       └── user\n│           ├── layout.tsx\n│           ├── page.tsx\n│           └── profile\n│               └── page.tsx\n\n\nYou can set this to disable the default behavior of a client-side route:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      preventDefault: ['/user'],\n    },\n  },\n});\n\n\n\nDynamic Params#\n\nSome routes may be dynamic, such as the /user/:id in a self-controlled route or\nthe route generated by the user/[id]/page.tsx file in a conventional route.\n\nconfigure specific parameters in output.ssg to render the route of the specified\nparameters, for example:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      routes: [\n        {\n          url: '/user/:id',\n          params: [\n            {\n              id: 'modernjs',\n            },\n          ],\n        },\n      ],\n    },\n  },\n});\n\n\nThe features of dynamic routing and SSG is useful when generating static pages\nin real time based on CMS system.","frontmatter":{"sidebar_label":"ssg"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/ssg.mdx","_relativePath":"en/configure/app/output/ssg.mdx"},{"id":125,"title":"output.svgDefaultExport","routePath":"/en/configure/app/output/svg-default-export","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.svgDefaultExport.\n\n * Type: url | component\n * Default: url\n\noutput.svgDefaultExport is used to configure the default export type of SVG\nfiles.\n\nWhen output.svgDefaultExport is set to url , the default export of SVG files is\nthe URL of the file. For example:\n\n\n\nconsole.log(logo); // => asset url\n\n\nWhen output.svgDefaultExport is set to component , the default export of SVG\nfiles is the React component of the file. For example:\n\n\n\nconsole.log(Logo); // => React Component\n\n\nAt this time, you can also specify the ?url query to import the URL, for\nexample:\n\n\n\nconsole.log(logo); // => asset url\n","frontmatter":{"sidebar_label":"svgDefaultExport"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/output/svg-default-export.mdx","_relativePath":"en/configure/app/output/svg-default-export.mdx"},{"id":126,"title":"performance.buildCache","routePath":"/en/configure/app/performance/build-cache","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.buildCache.\n\n * Type:\n\ntype BuildCacheConfig =\n  | {\n      /**\n       * Base directory for the filesystem cache.\n       */\n      cacheDirectory?: string;\n    }\n  | boolean;\n\n\n * Default:\n\nconst defaultBuildCacheConfig = {\n  cacheDirectory: './node_modules/.cache/webpack',\n};\n\n\n * Bundler: only support webpack\n\nControls the Builder's caching behavior during the build process.\n\nBuilder will enable build cache by default to improve the compile speed, the\ngenerated cache files are write to the ./node_modules/.cache/webpack directory\nby default.\n\nYou can configure the cache path with buildCache, e.g.\n\nexport default {\n  performance: {\n    buildCache: {\n      cacheDirectory: './node_modules/.custom_cache/webpack',\n    },\n  },\n};\n\n\nYou can also disable the build cache by setting it to false:\n\nexport default {\n  performance: {\n    buildCache: false,\n  },\n};\n","frontmatter":{"sidebar_label":"buildCache"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/build-cache.mdx","_relativePath":"en/configure/app/performance/build-cache.mdx"},{"id":127,"title":"performance.bundleAnalyze","routePath":"/en/configure/app/performance/bundle-analyze","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.bundleAnalyze.\n\n * Type: Object | undefined\n\nYou have two ways to enable webpack-bundle-analyzer to analyze the size of\noutput files:\n\n * Add environment variable BUNDLE_ANALYZE=true.\n * Add performance.bundleAnalyze config.\n\nBy default, webpack-bundle-analyzer is not enabled. When enabled, its\nconfiguration is as follows:\n\n{\n  analyzerMode: 'static',\n  openAnalyzer: false,\n  // `target` is the compilation target, such as `web`, `node`, etc.\n  reportFilename: `report-${target}.html`,\n}\n\n\nYou can override the default config through performance.bundleAnalyze, for\nexample:\n\nexport default {\n  performance: {\n    bundleAnalyze: {\n      analyzerMode: 'server',\n      openAnalyzer: true,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"bundleAnalyze"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/bundle-analyze.mdx","_relativePath":"en/configure/app/performance/bundle-analyze.mdx"},{"id":128,"title":"performance.chunkSplit","routePath":"/en/configure/app/performance/chunk-split","lang":"en","toc":[{"text":"chunkSplit.strategy","id":"chunksplitstrategy","depth":3,"charIndex":860},{"text":"Default Strategy","id":"default-strategy","depth":3,"charIndex":1409},{"text":"chunkSplit.minSize","id":"chunksplitminsize","depth":3,"charIndex":2362},{"text":"chunkSplit.maxSize","id":"chunksplitmaxsize","depth":3,"charIndex":2739},{"text":"chunkSplit.forceSplitting","id":"chunksplitforcesplitting","depth":3,"charIndex":3122},{"text":"chunkSplit.splitChunks","id":"chunksplitsplitchunks","depth":3,"charIndex":3635},{"text":"chunkSplit.override","id":"chunksplitoverride","depth":3,"charIndex":4241}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.chunkSplit.\n\n * Type: Object\n * Default: { strategy: 'split-by-experience' }\n\nperformance.chunkSplit is used to configure the chunk splitting strategy. The\ntype of ChunkSplit is as follows:\n\ntype ForceSplitting = RegExp[] | Record;\n\ninterface BaseChunkSplit {\n  strategy?:\n    | 'split-by-module'\n    | 'split-by-experience'\n    | 'all-in-one'\n    | 'single-vendor';\n  override?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitBySize {\n  strategy?: 'split-by-size';\n  minSize?: number;\n  maxSize?: number;\n  override?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitCustom {\n  strategy?: 'custom';\n  splitChunks?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\nexport type ChunkSplit = BaseChunkSplit | SplitBySize | SplitCustom;\n\n\n\nchunkSplit.strategy#\n\nBuilder supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n\n * split-by-size: automatically split according to module size.\n\n * all-in-one: bundle all codes into one chunk.\n\n * single-vendor: bundle all NPM packages into a single chunk.\n\n * custom: custom chunk splitting strategy.\n\n\nDefault Strategy#\n\nBuilder adopts the split-by-experience strategy by default, which is a strategy\nwe have developed from experience. Specifically, when the following npm packages\nare referenced in your project, they will automatically be split into separate\nchunks:\n\n * lib-polyfill.js: includes core-js, @babel/runtime, @swc/helpers.\n * lib-react.js: includes react, react-dom.\n * lib-router.js: includes react-router, react-router-dom, history,\n   @remix-run/router.\n * lib-lodash.js: includes lodash, lodash-es.\n * lib-antd.js: includes antd.\n * lib-arco.js: includes @arco-design/web-react.\n * lib-semi.js: includes @douyinfe/semi-ui.\n\nTIP\n\nIf the above npm packages are not installed or used in the project, the\ncorresponding chunk will not be generated.\n\nIf you want to use other splitting strategies, you can specify it via\nperformance.chunkSplit.strategy.\n\nTIP\n\nThe split-by-module strategy is not supported when using Rspack as the bundler.\n\n\nchunkSplit.minSize#\n\n * Type: number\n * Default: 10000\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nminimum size of a chunk via performance.chunkSplit.minSize, the unit is bytes.\nThe default value is 10000. For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      minSize: 20000,\n    },\n  },\n};\n\n\n\nchunkSplit.maxSize#\n\n * Type: number\n * Default: Infinity\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nmaximum size of a chunk via performance.chunkSplit.maxSize, the unit is bytes.\nThe default value is Infinity. For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      maxSize: 50000,\n    },\n  },\n};\n\n\n\nchunkSplit.forceSplitting#\n\n * Type: RegExp[] | Record\n * Default: []\n\nVia performance.chunkSplit.forceSplitting, you can specify the NPM packages that\nneed to be forced to split.\n\nFor example, split the axios library under node_modules into axios.js:\n\nexport default {\n   performance: {\n     chunkSplit: {\n       strategy: 'split-by-experience',\n       forceSplitting: {\n         axios: /node_modules\\/axios/,\n       },\n     },\n   },\n};\n\n\nThis is an easier way than configuring webpack's splitChunks directly.\n\n\nchunkSplit.splitChunks#\n\nWhen performance.chunkSplit.strategy is custom, you can specify the custom\nwebpack chunk splitting config via performance.chunkSplit.splitChunks. This\nconfig will be merged with the webpack splitChunks config (the cacheGroups\nconfig will also be merged). For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'custom',\n      splitChunks: {\n        cacheGroups: {\n          react: {\n            test: /[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n\n\n\nchunkSplit.override#\n\nWhen performance.chunkSplit.strategy is split-by-experience, split-by-module,\nsplit-by-size or single-vendor, you can specify the custom webpack chunk\nsplitting config via performance.chunkSplit.override. This config will be merged\nwith the webpack splitChunks config (the cacheGroups config will also be\nmerged). For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-experience',\n      override: {\n        cacheGroups: {\n          react: {\n            test: /[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n\n\n> When the Builder target is \"node\", since Node Bundles do not need to be\n> splitted to optimize loading performance, the chunkSplit rule will not take\n> effect.","frontmatter":{"sidebar_label":"chunkSplit"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/chunk-split.mdx","_relativePath":"en/configure/app/performance/chunk-split.mdx"},{"id":129,"title":"performance.printFileSize","routePath":"/en/configure/app/performance/print-file-size","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":622}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.printFileSize.\n\n * Type: boolean\n * Default: true\n\nWhether to print the file sizes after production build.\n\ninfo    File sizes after production build:\n\n  File                                     Size         Gzipped\n  dist/static/js/lib-corejs.1c836fe7.js    212.89 kB    66.57 kB\n  dist/static/js/lib-react.fcafbc5c.js     134.65 kB    43.45 kB\n  dist/static/js/main.6ff06f70.js          8.93 kB      3.73 kB\n  dist/static/css/main.9f48031b.css        2.64 kB      927 B\n  dist/html/main/index.html                1.64 kB      874 B\n\n\n\nExample#\n\nDisable the logs:\n\nexport default {\n  performance: {\n    printFileSize: false,\n  },\n};\n","frontmatter":{"sidebar_label":"printFileSize"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/print-file-size.mdx","_relativePath":"en/configure/app/performance/print-file-size.mdx"},{"id":130,"title":"performance.profile","routePath":"/en/configure/app/performance/profile","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":257}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.profile.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether capture timing information for each module, same as the profile config\nof webpack.\n\n\nExample#\n\nexport default {\n  performance: {\n    profile: true,\n  },\n};\n\n\nWhen turned on, webpack generates a JSON file with some statistics about the\nmodule that includes information about timing information for each module.","frontmatter":{"sidebar_label":"profile"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/profile.mdx","_relativePath":"en/configure/app/performance/profile.mdx"},{"id":131,"title":"performance.removeConsole","routePath":"/en/configure/app/performance/remove-console","lang":"en","toc":[{"text":"Remove all consoles","id":"remove-all-consoles","depth":4,"charIndex":204},{"text":"Remove specific console","id":"remove-specific-console","depth":4,"charIndex":368}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.removeConsole.\n\n * Type: boolean | ConsoleType[]\n * Default: false\n\nWhether to remove console.xx in production build.\n\nRemove all consoles#\n\nWhen removeConsole is set to true, all types of console.xx are removed:\n\nexport default {\n  performance: {\n    removeConsole: true,\n  },\n};\n\n\nRemove specific console#\n\nYou can also specify to remove only certain types of console.xx, such as\nconsole.log and console.warn:\n\nexport default {\n  performance: {\n    removeConsole: ['log', 'warn'],\n  },\n};\n\n\nThe following types of console are currently supported:\n\ntype ConsoleType = 'log' | 'info' | 'warn' | 'error' | 'table' | 'group';\n","frontmatter":{"sidebar_label":"removeConsole"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/remove-console.mdx","_relativePath":"en/configure/app/performance/remove-console.mdx"},{"id":132,"title":"performance.removeMomentLocale","routePath":"/en/configure/app/performance/remove-moment-locale","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.removeMomentLocale.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to remove the locales of moment.js.\n\nmoment.js contains a lot of locales by default, which will increase the bundle\nsize.\n\nWhen moment.js is used in the project, it is recommended to enable this option\nto automatically exclude all locales:\n\nexport default {\n  performance: {\n    removeMomentLocale: true,\n  },\n};\n\n\nOnce enabled, you can load a specific locale via:\n\n\nimport 'moment/locale/zh-cn';\n\nmoment.locale('zh-cn');\n","frontmatter":{"sidebar_label":"removeMomentLocale"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/performance/remove-moment-locale.mdx","_relativePath":"en/configure/app/performance/remove-moment-locale.mdx"},{"id":133,"title":"plugins","routePath":"/en/configure/app/plugins","lang":"en","toc":[{"text":"Precautions","id":"precautions","depth":2,"charIndex":171},{"text":"Plugin type","id":"plugin-type","depth":2,"charIndex":525},{"text":"Plugin execution order","id":"plugin-execution-order","depth":2,"charIndex":976},{"text":"Example","id":"example","depth":2,"charIndex":1346},{"text":"Using plugins on npm","id":"using-plugins-on-npm","depth":3,"charIndex":1403},{"text":"Use local plugins","id":"use-local-plugins","depth":3,"charIndex":1609},{"text":"Plugin configuration","id":"plugin-configuration","depth":3,"charIndex":1820}],"domain":"","content":"#\n\n * Type: CliPlugin[]\n * Default: []\n\nUsed to configure custom Modern.js framework plugins.\n\nFor the way to write custom plugins, please refer to How to Write Plugins.\n\n\nPrecautions#\n\nThis config is used to configure the Modern.js framework plugin. If you need to\nconfigure other types of plugins, please select the corresponding configs:\n\n * Use builderPlugins to configure Modern.js Builder plugins.\n * Use tools.webpack or tools.webpackChain to configure webpack plugins.\n * Use tools.babel to configure babel plugins.\n\n\nPlugin type#\n\nThere are three different type of framework plugins built into the Modern.js:\n\n * CLI Plugin, for local development, compilation and build phases, can extend\n   various capabilities on the command line and compilation phases.\n * Server Plugin, for server-level.\n * Runtime Plugin, for runtime.\n\nThe ability to customize CLI plugins is currently open Modern.js, and the Server\nplugin and Runtime plugin will be available in the future.\n\n\nPlugin execution order#\n\nBy default, custom plugins are executed sequentially in the order of an array of\nplugins, Modern.js built-in plugins are executed earlier than custom plugins.\n\nWhen the plugin uses related fields that control the order, such as pre and\npost, the execution order will be adjusted based on the declared fields, see\nRelationship between plugins.\n\n\nExample#\n\nBelow is an example of using the CLI plugin.\n\n\nUsing plugins on npm#\n\nTo use the plugin on npm, you need to install the plugin through the package\nmanager and import it.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\n\nUse local plugins#\n\nUsing the plugin in the local code repository, you can import it directly\nthrough the relative path import.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\n\nPlugin configuration#\n\nIf the plugin provides some custom configuration options, you can pass in the\nconfiguration through the parameters of the plugin function.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [\n    myPlugin({\n      foo: 1,\n      bar: 2,\n    }),\n  ],\n});\n","frontmatter":{"title":"plugins","sidebar_position":9},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/plugins.mdx","_relativePath":"en/configure/app/plugins.mdx"},{"id":134,"title":"Overview","routePath":"/en/configure/app/runtime/intro","lang":"en","toc":[{"text":"Configuration","id":"configuration","depth":2,"charIndex":68},{"text":"runtime","id":"runtime","depth":3,"charIndex":85},{"text":"Base","id":"base","depth":4,"charIndex":151},{"text":"DefineConfig","id":"defineconfig","depth":4,"charIndex":299},{"text":"runtimeByEntries","id":"runtimebyentries","depth":3,"charIndex":1132},{"text":"Introduction","id":"introduction","depth":4,"charIndex":1168}],"domain":"","content":"#\n\nThis section describes the configuration of the Runtime plugin.\n\n\nConfiguration#\n\n\nruntime#\n\n * Type: Object\n\nThe runtime is configured as follows:\n\nBase#\n\nConfigure in modern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  runtime: {\n    state: true,\n    router: true,\n  },\n});\n\n\nDefineConfig#\n\nConfigure use defineConfig API:\n\nINFO\n\nWhen there is a function in the runtime configuration, it can only be configured\nin this way.\n\nsrc/App.tsx\n\n\n\nconst App = () => {\n  /** */\n};\n\ndefineConfig(App, {\n  router: {\n    supportHtml5History: false,\n  },\n});\n\nexport default App;\n\n\nINFO\n\nUsing runtime configuration, you can solve the problem that runtime plugin\nconfiguration needs to be at runtime to get specific content.\n\nRuntime plugin runtime configuration and configuration directly in\nmodern.config.ts are merged by default, and runtime configuration takes\nprecedence.\n\nWARNING\n\ndefineConfig can only define the specific configuration content of the Runtime\nplugin. To confirm whether to enable the plugin, it needs to be determined\nthrough the configuration in modernConfig in package.json or modern.config.ts.\n\n\nruntimeByEntries#\n\n * Type: Object\n\nIntroduction#\n\nAdd the runtime configuration according to the entry. The option attribute is\nconsistent with the runtime. The specified value will be replaced and merged\nwith the content of the runtime attribute.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  runtime: {\n    state: false,\n  },\n  runtimeByEntries: {\n    entry1: {\n      state: true, // { state: true }\n    },\n    entry2: {\n      // { state: false, router: true }\n      router: true,\n    },\n  },\n});\n","frontmatter":{"sidebar_label":"Overview","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/runtime/intro.mdx","_relativePath":"en/configure/app/runtime/intro.mdx"},{"id":135,"title":"runtime.masterApp","routePath":"/en/configure/app/runtime/master-app","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":101},{"text":"apps","id":"apps","depth":3,"charIndex":112},{"text":"Other Config","id":"other-config","depth":3,"charIndex":378}],"domain":"","content":"#\n\n * Type: Object\n\nINFO\n\nFirst you need to enable the \"micro frontend\" function using new command.\n\n\nExample#\n\n\napps#\n\nWhen apps is an object, it represents the information of the child application\nmodule Array.\n\ninterface AppInfo {\n  name: string;\n  entry: string;\n  activeWhen?: string | ()=> boolean;\n}\n\n\n * name: The name of the module.\n * entry: The entry of the module.\n\n\nOther Config#\n\nUnder the masterApp configuration, developers can pass through the configuration\nitems of Garfish.\n\nAll supported configuration items see here.","frontmatter":{"sidebar_label":"masterApp"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/runtime/master-app.mdx","_relativePath":"en/configure/app/runtime/master-app.mdx"},{"id":136,"title":"runtime.router","routePath":"/en/configure/app/runtime/router","lang":"en","toc":[{"text":"basename","id":"basename","depth":2,"charIndex":176},{"text":"supportHtml5History","id":"supporthtml5history","depth":2,"charIndex":331}],"domain":"","content":"#\n\n * Type: boolean | Object\n * Default: false\n\nWhen router is enabled, routing management of conventional routes provided by\nModern.js is supported. Based on React Router 6.\n\n\nbasename#\n\n * Type: string\n * Default: ``\n\nThe basename of the app for situations where you can't deploy to the root of the\ndomain, but a sub directory.\n\n\nsupportHtml5History#\n\n * Type: boolean\n * Default: true\n\nIf the value of supportHtml5History is true, BrowserRouter would be used,\notherwise HashRouter would be used. BrowserRouter is recommended.\n\nWARNING\n\nWhen SSR is enabled, supportHtml5History is not supported.","frontmatter":{"sidebar_label":"router"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/runtime/router.mdx","_relativePath":"en/configure/app/runtime/router.mdx"},{"id":137,"title":"runtime.state","routePath":"/en/configure/app/runtime/state","lang":"en","toc":[{"text":"models","id":"models","depth":2,"charIndex":162},{"text":"initialState","id":"initialstate","depth":2,"charIndex":385},{"text":"immer","id":"immer","depth":2,"charIndex":555},{"text":"effects","id":"effects","depth":2,"charIndex":722},{"text":"autoActions","id":"autoactions","depth":2,"charIndex":893},{"text":"devtools","id":"devtools","depth":2,"charIndex":1068}],"domain":"","content":"#\n\n * Type: boolean | object\n * Default: false\n\nOnce state is enabled, you can use Model for state management.\n\nThe specific configuration items are as follows:\n\n\nmodels#\n\n * Type: Array\n * Default: []\n\nRegister model objects that are mounted in advance, and these models will be\nmounted immediately after the Reduck store is created. Generally, there is no\nneed to mount in advance.\n\n\ninitialState#\n\n * Type: Object\n * Default: {}\n\nUsed to set the initial state of the global store. Generally used for SSR to\ninitialize data during the hydration phase.\n\n\nimmer#\n\n * Type: boolean\n * Default: true\n\nWhether to enable to update the state with mutable, it is enabled by default,\nand set to false if you want to disable it.\n\n\neffects#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the side effect management feature, it is enabled by default,\nand set to false if you want to disable it.\n\n\nautoActions#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the auto-generated actions feature, it is enabled by default,\nand set to false if you want to disable it.\n\n\ndevtools#\n\n * Type: boolean | EnhancerOptions\n * Default: true\n\nWhether to enable devtools, it is enabled by default, and all parameters of\nredux-devtools-extension are supported at the same time. If you want to disable\nit, set it to false.","frontmatter":{"sidebar_label":"state"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/runtime/state.mdx","_relativePath":"en/configure/app/runtime/state.mdx"},{"id":138,"title":"security.checkSyntax","routePath":"/en/configure/app/security/check-syntax","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":442},{"text":"Error Log","id":"error-log","depth":3,"charIndex":915},{"text":"Solution","id":"solution","depth":3,"charIndex":1319}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsecurity.checkSyntax.\n\n * Type:\n\ntype CheckSyntax =\n  | boolean\n  | {\n      targets: string[];\n      exclude?: RegExp | Array;\n    };\n\n\n * Default: false\n * Bundler: only support webpack\n\nAnalyzes the build output files for the presence of high-level syntax that is\nincompatible with the current browserslist. If present, the details will be\nprinted in the terminal.\n\n\nExample#\n\nexport default {\n  security: {\n    checkSyntax: true,\n    exclude: /node_modules\\/foo/,\n  },\n};\n\n\nIf security.checkSyntax is specified as true, targets will be recognized as the\nbrowserslist set by the project. For details, please refer to Browserslist.\n\nWhen enabled, it will be detected in the production environment, and when an\nincompatible advanced syntax is detected, it will not only print the error logs\non the terminal but also exit the build process.\n\n\nError Log#\n\nThe format of the error log is as follows, including the source file, output\nlocation, error reason and source code:\n\nerror [Syntax Checker] Find some syntax errors after production build:\n\n   ERROR#1:\n   source - /node_modules/foo/index.js:1:0\n   output - /Project/dist/static/js/main.3f7a4d7e.js:2:39400\n   reason - The keyword 'const' is reserved (2:39400)\n   code - const foo = 'bar';\n\n\n\nSolution#\n\nIf a syntax error is detected, you can handle it in the following ways:\n\n * If you want to downgrade this syntax to ensure good code compatibility, you\n   can compile the corresponding module through the source.include config.\n * If you don't want to downgrade the syntax, you can adjust the project's\n   browserslist to match the syntax.\n * If you do not want to check the syntax of certain products, you can use the\n   checkSyntax.exclude configuration to exclude the files to be checked.","frontmatter":{"sidebar_label":"checkSyntax"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/security/check-syntax.mdx","_relativePath":"en/configure/app/security/check-syntax.mdx"},{"id":139,"title":"security.sri","routePath":"/en/configure/app/security/sri","lang":"en","toc":[{"text":"Introduce SRI","id":"introduce-sri","depth":4,"charIndex":611},{"text":"Example","id":"example","depth":4,"charIndex":1087}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see security.sri.\n\n * Type:\n\ntype SRIOptions =\n  | {\n      hashFuncNames?: string[];\n      enabled?: 'auto' | boolean;\n      hashLoading?: 'eager' | 'lazy';\n    }\n  | boolean;\n\n\n * Default: undefined\n * Bundler: only support webpack\n\nAdding an integrity attribute (integrity) to sub-resources introduced by HTML\nallows the browser to verify the integrity of the introduced resource, thus\npreventing tampering with the downloaded resource.\n\nEnabling this option will set the webpack output.crossOriginLoading\nconfiguration item to anonymous.\n\nIntroduce SRI#\n\nSubresource Integrity (SRI) is a security feature that enables browsers to\nverify that resources they fetch (for example, from a CDN) are delivered without\nunexpected manipulation. It works by allowing you to provide a cryptographic\nhash that a fetched resource must match.\n\nFor script tags, the result is to refuse to execute the code; for CSS links, the\nresult is not to load the styles.\n\nFor more on subresource integrity, see Subresource Integrity - MDN.\n\nExample#\n\nBy default, SRI is not turned on, and when it is, its default configuration is\nas follows:\n\n{\n  hashFuncNames: ['sha384'];\n  enabled: \"auto\",\n  hashLoading: \"eager\",\n}\n\n\nYou can customize the configuration items according to your own needs:\n\nexport default {\n  security: {\n    sri: {\n      hashFuncNames: ['sha-256'],\n      enabled: true,\n      hashLoading: 'lazy',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"sri"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/security/sri.mdx","_relativePath":"en/configure/app/security/sri.mdx"},{"id":140,"title":"server.baseUrl","routePath":"/en/configure/app/server/base-url","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string | string[]\n * Default: undefined\n\nUniformly set the server-level routing prefix (often used in the case of shared\ndomain names to distinguish traffic).\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    // All generated routes are automatically prefixed with `/base`\n    // Path to the generated server-side route file: dist/route.json\n    baseUrl: '/base'\n\n    // Multiple baseUrl\n    baseUrl: ['/base-new', '/base-old']\n  }\n})\n\n\nAfter dev, you can see that the routed access will be prefixed accordingly:\n\nApp running at:\n\n  > Local:    http://localhost:8080/base/\n  > Network:  http://192.168.0.1:8080/base/\n","frontmatter":{"sidebar_label":"baseUrl"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/base-url.mdx","_relativePath":"en/configure/app/server/base-url.mdx"},{"id":141,"title":"server.enableFrameworkExt","routePath":"/en/configure/app/server/enable-framework-ext","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":314}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nBy default, with Custom Web Server enabled, Middleware uses the syntax of the\nModern.js itself.\n\nEnable server.enableFrameworkExt to use the syntax of framework extensions.\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    enableFrameworkExt: true,\n  },\n});\n\n\n\nExample#\n\nDefault usage:\n\nserver/index.ts\n\n\n\nexport const middleware: Middleware = (ctx, next) => {\n  console.log(ctx.request.url);\n  next();\n};\n\n\nWhen enabled, Middleware types will be exported from other namespaces and can\nthe syntax of framework extensions:\n\nserver/index.ts\n\n\n\nexport const middleware: SomeType = (...args) => {\n  console.log(args[0].url);\n  next();\n};\n\n\nNOTE\n\nThe above code is pseudo-code, and the specific usage needs to refer to the\ncorresponding framework extension.","frontmatter":{"sidebar_label":"enableFrameworkExt"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/enable-framework-ext.mdx","_relativePath":"en/configure/app/server/enable-framework-ext.mdx"},{"id":142,"title":"server.port","routePath":"/en/configure/app/server/port","lang":"en","toc":[{"text":"Difference with dev.port","id":"difference-with-devport","depth":3,"charIndex":363}],"domain":"","content":"#\n\n * Type: number\n * Default: 8080\n\nWhen Modern.js executes dev, start and serve commands, it will start with 8080\nas the default port, and will automatically increment the port number when the\nport is occupied. You can change the port number of Server through this config:\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    port: 3000,\n  },\n});\n\n\n\nDifference with dev.port#\n\nIn most cases, we recommend using server.port instead of dev.port to set the\nport number, the differences between them are as follows:\n\n * dev.port only takes effect in the development, and server.port takes effect\n   in both development and production.\n * In the development, dev.port takes precedence over server.port.\n\nWhen you set dev.port and server.port at the same time, dev.port will take\neffect in the development, and server.port will take effect in the production.\nFor example, in the following example, the port in the development is 3001, and\nthe port in the production is 3002.\n\nmodern.config.ts\n\nexport default defineConfig({\n  dev: {\n    port: 3001,\n  },\n  server: {\n    port: 3002,\n  },\n});\n","frontmatter":{"sidebar_label":"port"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/port.mdx","_relativePath":"en/configure/app/server/port.mdx"},{"id":143,"title":"server.publicRoutes","routePath":"/en/configure/app/server/public-routes","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: Object\n * Default: Automatic generation of server-level routing rules based on file\n   conventions: One routing rule is generated per file of the application.\n\nThis configuration option only applies to server-level routing, and you can\ncustomize the access route of resources in config/public/.\n\nThe key of the object is the relative file path of the current application (not\nused ./), value can be string.\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    publicRoutes: {\n      // Set up a long route\n      'index.json': '/user-config/card-info/extra/help.json',\n\n      // Set up a route without a suffix\n      'robot.txt': '/app/authentication',\n    },\n  },\n});\n","frontmatter":{"sidebar_label":"publicRoutes"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/public-routes.mdx","_relativePath":"en/configure/app/server/public-routes.mdx"},{"id":144,"title":"server.routes","routePath":"/en/configure/app/server/routes","lang":"en","toc":[{"text":"Custom access routing","id":"custom-access-routing","depth":2,"charIndex":369},{"text":"Custom response header","id":"custom-response-header","depth":2,"charIndex":1607}],"domain":"","content":"#\n\n * Type: Object\n * Default: Automatic generation of server-level routing rules based on file\n   conventions: One routing rule is generated per file of the application,and\n   the default route is the same as the entry name.\n\nThis configuration option only applies to server-level routing, and can\ncustomize the service access configuration of the application entry.\n\n\nCustom access routing#\n\nThe key of the object is the entry name of the current application, and the\nvalue can be string | Array.\n\nWhen the value type is string, the current value represents the name of the\nroute to access the entry.\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    routes: {\n      // The default route is /entryName1, /p/test1 after customization\n      entryName1: '/p/test1'\n      // Support dynamic server-level routing configuration\n      entryName2: '/detail/:id'\n    }\n  }\n});\n\n\nMultiple access routes can also be set for entries using the Array:\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    routes: {\n      'page-a': [`/a`, '/b'],\n    },\n  },\n});\n\n\nAt this point, the 'page-a entry can be accessed through both /a and /b routes.\n\nAfter executing the dev command, you can see in dist/route.json that there are\ntwo routing records in the entry page-a:\n\n{\n  \"routes\": [\n    {\n      \"urlPath\": \"/a\",\n      \"entryName\": \"page-a\",\n      \"entryPath\": \"html/page-a/index.html\",\n      \"isSPA\": true,\n      \"isSSR\": false\n    },\n    {\n      \"urlPath\": \"/b\",\n      \"entryName\": \"page-a\",\n      \"entryPath\": \"html/page-a/index.html\",\n      \"isSPA\": true,\n      \"isSSR\": false\n    }\n  ]\n}\n\n\n\nCustom response header#\n\nThe response header can be set by configuring the resHeaders of the entry:\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    routes: {\n      'page-a': {\n        route: ['/a', '/b'],\n        resHeaders: {\n          'x-modern-test': '1',\n        },\n      },\n    },\n  },\n});\n\n\nNOTE\n\nThis configuration takes effect in both the production environment and the\ndevelopment environment, and can set different response headers according to the\nNODE_ENV. But if you only need to set response headers in the development\nenvironment, tools.devServer.headers is recommended.","frontmatter":{"sidebar_label":"routes"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/routes.mdx","_relativePath":"en/configure/app/server/routes.mdx"},{"id":145,"title":"server.ssrByEntries","routePath":"/en/configure/app/server/ssr-by-entries","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: Object\n * Default: undefined\n\nSet the ssr option according to the entry. The attributes in the option are the\nsame as ssr. The specified value will be replaced and merged with the content of\nthe ssr attribute. For example:\n\nINFO\n\nThe \"entry name\" defaults to the directory name. In a few cases, when the entry\nis customized by source.entries, the entry name source.entries the key of the\nobject.\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    ssr: true,\n    ssrByEntries: {\n      // page-a does not enable ssr\n      'page-a': false,\n    },\n  },\n});\n\n\nAs configured above, the project has ssr enabled as a whole, but the ssr\nrendering capability is turned off for the entry page-a.","frontmatter":{"sidebar_label":"ssrByEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/ssr-by-entries.mdx","_relativePath":"en/configure/app/server/ssr-by-entries.mdx"},{"id":146,"title":"server.ssr","routePath":"/en/configure/app/server/ssr","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":66},{"text":"Object Type","id":"object-type","depth":3,"charIndex":290}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nEnalbe SSR configuration.\n\n\nBoolean Type#\n\nWhen the value type is boolean, it indicates whether to enable SSR deployment\nmode, and false is not enabled by default.\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    ssr: true,\n  },\n});\n\n\n\nObject Type#\n\nWhen the value type is Object, The following properties can be configured:\n\n * mode: string = 'string', use renderToString rendering default. onfigure\n   'stream' to enable streaming rendering.\n * forceCSR: boolean = false, forced CSR rendering is disable by default. When\n   configured as true, add ?csr=true in URL to force CSR.\n * inlineScript：boolean = true, by default SSR data will be injected into HTML\n   as inline scripts and directly assigned to global variables. Configure as\n   false to inject JSON instead of directly assigning.\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    forceCSR: true,\n    mode: 'stream',\n    inlineScript: false,\n  },\n});\n","frontmatter":{"sidebar_label":"ssr"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/server/ssr.mdx","_relativePath":"en/configure/app/server/ssr.mdx"},{"id":147,"title":"source.alias","routePath":"/en/configure/app/source/alias","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":4,"charIndex":438},{"text":"Function Type","id":"function-type","depth":4,"charIndex":765}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see source.alias.\n\n * Type: Record | Function\n * Default: undefined\n\nCreate aliases to import or require certain modules, same as the resolve.alias\nconfig of webpack.\n\nTIP\n\nFor TypeScript projects, you only need to configure compilerOptions.paths in\ntsconfig.json, Builder will automatically recognize the aliases in\ntsconfig.json, so the alias config is unnecessary.\n\nObject Type#\n\nThe alias can be an Object, and the relative path will be automatically\nconverted to absolute path.\n\nexport default {\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n};\n\n\nWith above configuration, if @common/Foo.tsx is import in the code, it will be\nmapped to the /src/common/Foo.tsx path.\n\nFunction Type#\n\nThe alias can be a function, it will accept the previous alias object, and you\ncan modify it.\n\nexport default {\n  source: {\n    alias: alias => {\n      alias['@common'] = './src/common';\n    },\n  },\n};\n\n\nYou can also return a new object as the final result in the function, which will\nreplace the previous alias object.\n\nexport default {\n  source: {\n    alias: alias => {\n      return {\n        '@common': './src/common',\n      };\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"alias"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/alias.mdx","_relativePath":"en/configure/app/source/alias.mdx"},{"id":148,"title":"source.compileJsDataURI","routePath":"/en/configure/app/source/compile-js-data-uri","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":293}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.compileJsDataURI.\n\n * Type: boolean\n * Default: true\n\nWhether to compile JavaScript code imported via Data URI.\n\nSuch as:\n\n\n\nimport 'data:text/javascript;charset=utf-8;base64,Y29uc29sZS5sb2coJ2lubGluZSAxJyk7';\n\n\n\nExample#\n\nAdd the following config to disable:\n\nexport default {\n  source: {\n    compileJsDataURI: false,\n  },\n};\n","frontmatter":{"sidebar_label":"compileJsDataURI"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/compile-js-data-uri.mdx","_relativePath":"en/configure/app/source/compile-js-data-uri.mdx"},{"id":149,"title":"source.configDir","routePath":"/en/configure/app/source/config-dir","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n * Default: ./config\n\nModern.js supports placing some files in the ./config folder to customize HTML\ntemplates, icons, static resources, etc. For details, please refer to File\nConvention.\n\nThis option allows you to customize the directory of configuration files.\n\nFor example, adjust the resource file directory to the resources directory:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  source: {\n    configDir: './resources',\n  },\n});\n","frontmatter":{"sidebar_label":"configDir"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/config-dir.mdx","_relativePath":"en/configure/app/source/config-dir.mdx"},{"id":150,"title":"source.define","routePath":"/en/configure/app/source/define","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":853}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see source.define.\n\n * Type: Record\n * Default: {}\n\nReplaces variables in your code with other values or expressions at compile\ntime. This can be useful for allowing different behavior between development\nbuilds and production builds.\n\nEach key passed into options is an identifier or multiple identifiers joined\nwith ..\n\n * If the value is a string it will be used as a code fragment.\n * If the value isn't a string, it will be stringified (including functions).\n * If the value is an object all keys are defined the same way.\n * If you prefix typeof to the key, it's only defined for typeof calls.\n\nFor more information please visit https://webpack.js.org/plugins/define-plugin/.\n\nTIP\n\nWhen using Rspack as the bundler, the supported types can be found in\nRspack.builtins.define.\n\n\nExample#\n\nexport default {\n  source: {\n    define: {\n      PRODUCTION: JSON.stringify(true),\n      VERSION: JSON.stringify('5fa3b9'),\n      BROWSER_SUPPORTS_HTML5: true,\n      TWO: '1 + 1',\n      'typeof window': JSON.stringify('object'),\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n      'import.meta': { test: undefined },\n    },\n  },\n};\n\n\nExpressions will be replaced with the corresponding code fragments:\n\nconst foo = TWO;\n\n// ⬇️ Turn into being...\nconst foo = 1 + 1;\n","frontmatter":{"sidebar_label":"define"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/define.mdx","_relativePath":"en/configure/app/source/define.mdx"},{"id":151,"title":"source.designSystem","routePath":"/en/configure/app/source/design-system","lang":"en","toc":[{"text":"Structure","id":"structure","depth":3,"charIndex":492},{"text":"Screens","id":"screens","depth":4,"charIndex":625},{"text":"Colors","id":"colors","depth":4,"charIndex":4942},{"text":"Spacing","id":"spacing","depth":4,"charIndex":5380},{"text":"Core plugins","id":"core-plugins","depth":4,"charIndex":5987},{"text":"Custom default configuration","id":"custom-default-configuration","depth":3,"charIndex":7104},{"text":"Override default configuration","id":"override-default-configuration","depth":4,"charIndex":7341},{"text":"Extension default configuration","id":"extension-default-configuration","depth":4,"charIndex":8108},{"text":"Reference other values","id":"reference-other-values","depth":4,"charIndex":9075},{"text":"Disable the entire core plugin","id":"disable-the-entire-core-plugin","depth":4,"charIndex":10534},{"text":"Add your own key","id":"add-your-own-key","depth":4,"charIndex":11190},{"text":"Configure reference","id":"configure-reference","depth":3,"charIndex":12502},{"text":"Additional configuration","id":"additional-configuration","depth":3,"charIndex":12991},{"text":"source.designSystem.supportStyledComponents","id":"sourcedesignsystemsupportstyledcomponents","depth":4,"charIndex":13141}],"domain":"","content":"#\n\n * Type: Object\n * Default: See configuration details below.\n\nCaution\n\nYou need to enable the Tailwind CSS feature through pnpm run new first.\n\ndesignSystem is used to define the project's color palette, typographic scale\n(Typographic Scales or Type Scale), font list, breakpoints, border rounded\nvalues, and more. Because Modern.js borrowed the design method of Tailwind\nTheme, and also integrates Tailwind CSS internally, the designSystem is used in\nthe same way as Tailwind CSS Theme.\n\n\nStructure#\n\nThe designSystem object contains properties for screens, colors, and spacing, as\nwell as each customizable core plugin.\n\nScreens#\n\nUse screens to customize response breakpoints in your project:\n\nconst designSystem = {\n  screens: {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n  },\n};\n\n\nWhere the property name in the screens object is the screen name (used as a\nprefix for adaptive utility variants generated by Tailwind CSS, such as\nmd:text-center), and the value is the min-width at which the breakpoint should\nbegin.\n\nDefault breakpoints are inspired by common device resolutions:\n\nconst designSystem = {\n  screens: {\n    sm: '640px',\n    // => @media (min-width: 640px) { ... }\n\n    md: '768px',\n    // => @media (min-width: 768px) { ... }\n\n    lg: '1024px',\n    // => @media (min-width: 1024px) { ... }\n\n    xl: '1280px',\n    // => @media (min-width: 1280px) { ... }\n  },\n};\n\n\nYou can use any name you like as a breakpoint property in your project:\n\nconst designSystem = {\n  screens: {\n    tablet: '640px',\n    // => @media (min-width: 640px) { ... }\n\n    laptop: '1024px',\n    // => @media (min-width: 1024px) { ... }\n\n    desktop: '1280px',\n    // => @media (min-width: 1280px) { ... }\n  },\n};\n\n\nThese screen names are reflected in utilities, so text-center now looks like\nthis:\n\n.text-center {\n  text-align: center;\n}\n\n@media (min-width: 640px) {\n  .tablet\\:text-center {\n    text-align: center;\n  }\n}\n\n@media (min-width: 1024px) {\n  .laptop\\:text-center {\n    text-align: center;\n  }\n}\n\n@media (min-width: 1280px) {\n  .desktop\\:text-center {\n    text-align: center;\n  }\n}\n\n\nMax-width breakpoint#\n\nIf you want to use a max-width breakpoint instead of a min-width, you can\nspecify the screen as an object with a max property:\n\nconst designSystem = {\n  screens: {\n    xl: { max: '1279px' },\n    // => @media (max-width: 1279px) { ... }\n\n    lg: { max: '1023px' },\n    // => @media (max-width: 1023px) { ... }\n\n    md: { max: '767px' },\n    // => @media (max-width: 767px) { ... }\n\n    sm: { max: '639px' },\n    // => @media (max-width: 639px) { ... }\n  },\n};\n\n\nIf necessary, to create breakpoints with min-width and max-width definitions,\nfor example:\n\nconst designSystem = {\n  screens: {\n    sm: { min: '640px', max: '767px' },\n    md: { min: '768px', max: '1023px' },\n    lg: { min: '1024px', max: '1279px' },\n    xl: { min: '1280px' },\n  },\n};\n\n\nMultiple ranges of breakpoints#\n\nSometimes it is useful to apply a single breakpoint definition to multiple\nscopes.\n\nFor example, let's say you have a sidebar and want the breakpoint to be based on\nthe width of the content area rather than the entire viewport. You can simulate\nthis situation, using a smaller breakpoint style when the sidebar is visible and\nshrinks the content area:\n\nconst designSystem = {\n  screens: {\n    sm: '500px',\n    md: [\n      // Sidebar appears at 768px, so revert to `sm:` styles between 768px\n      // and 868px, after which the main content area is wide enough again to\n      // apply the `md:` styles.\n      { min: '668px', max: '767px' },\n      { min: '868px' },\n    ],\n    lg: '1100px',\n    xl: '1400px',\n  },\n};\n\n\nCustom media queries#\n\nIf you need to provide a fully customized media query for the breakpoint, you\ncan use an object with a raw attribute:\n\nconst designSystem = {\n  extend: {\n    screens: {\n      portrait: { raw: '(orientation: portrait)' },\n      // => @media (orientation: portrait) { ... }\n    },\n  },\n};\n\n\nPrint Style#\n\nThe raw option can be especially useful if you need to apply a different style\nto the print.\n\nAll you need to do is add a print in designSystem.extend.screens:\n\nconst designSystem = {\n  extend: {\n    screens: {\n      print: { raw: 'print' },\n      // => @media print { ... }\n    },\n  },\n};\n\n\nYou can then use a class like print:text-black to specify styles that are only\napplied when someone tries to print a page:\n\n\n  {/* ...  */}\n\n\n\nDark Mode#\n\nThe raw option can be used to implement the \"dark mode\" screen:\n\nconst designSystem = {\n  extend: {\n    screens: {\n      dark: { raw: '(prefers-color-scheme: dark)' },\n      // => @media (prefers-color-scheme: dark) { ... }\n    },\n  },\n};\n\n\nYou can then style the element differently in dark mode using the dark: prefix:\n\n\n  {/* ...  */}\n\n\n\nNote that since these screen variants are implemented in Tailwind CSS, ** you\ncannot use this method to combine breakpoints with dark modes **, for example\nmd:dark:text-gray-300 will not work.\n\nColors#\n\nThe colors property allows you to customize the global palette of your project.\n\nconst designSystem = {\n  colors: {\n    transparent: 'transparent',\n    black: '#000',\n    white: '#fff',\n    gray: {\n      100: '#f7fafc',\n      // ...\n      900: '#1a202c',\n    },\n\n    // ...\n  },\n};\n\n\nBy default, these colors are inherited by the backgroundColor, textColor, and\nborderColor core plugins.\n\no learn more, see: Customizing Colors.\n\nSpacing#\n\nUsing the space property, you can customize the global spacing and scaling of\nitems:\n\nconst designSystem = {\n  spacing: {\n    px: '1px',\n    0: '0',\n    1: '0.25rem',\n    2: '0.5rem',\n    3: '0.75rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    8: '2rem',\n    10: '2.5rem',\n    12: '3rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    32: '8rem',\n    40: '10rem',\n    48: '12rem',\n    56: '14rem',\n    64: '16rem',\n  },\n};\n\n\nBy default, these values are inherited by the padding, margin, negativeMargin,\nwidth, and height core plugins.\n\nTo learn more, see: Customizing Spacing.\n\nCore plugins#\n\nThe rest of the topic section is used to configure the values available for each\ncore plugin.\n\nFor example, the borderRadius property allows you to customize the utilities of\nthe rounded corners that will be generated:\n\nconst designSystem = {\n  borderRadius: {\n    none: '0',\n    sm: '.125rem',\n    default: '.25rem',\n    lg: '.5rem',\n    full: '9999px',\n  },\n};\n\n\n** The property name determines the suffix of the generated class, and the value\ndetermines the value of the actual CSS declaration. ** The example borderRadius\nconfiguration above will generate the following CSS class:\n\n.rounded-none {\n  border-radius: 0;\n}\n.rounded-sm {\n  border-radius: 0.125rem;\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n\n\nYou will notice that the rounded class is created without the suffix using the\ndefault property in the theme configuration. This is a common convention in\nTailwind CSS supported by many, though not all, core plugins.\n\nTo learn more about customizing a specific core plugin, visit the plugin's\ndocumentation.\n\n\nCustom default configuration#\n\nOut of the box, your project will automatically inherit values from the default\ntheme configuration. If you want to customize the default theme, you have\nseveral different options depending on the target.\n\nOverride default configuration#\n\nTo override the options in the default configuration, add the properties to\noverride in designSystem:\n\nmodern.config.ts\n\nconst designSystem = {\n  // Replaces all of the default `opacity` values\n  opacity: {\n    0: '0',\n    20: '0.2',\n    40: '0.4',\n    60: '0.6',\n    80: '0.8',\n    100: '1',\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nThis completely replaces the default property configuration, so in the example\nabove, the default opacity utilities is not generated.\n\nAny properties you don't provide will be inherited from the default theme, so in\nthe example above, the default theme configuration for color, spacing, border\nrounded corners, background position, and more will be preserved.\n\nExtension default configuration#\n\nIf you want to keep the default value for the theme option, but want to add a\nnew value, add the extended content in the designSystem.extend property.\n\nFor example, if you want to add an additional breakpoint but keep the existing\none, you can extend the screens property:\n\nmodern.config.ts\n\nconst designSystem = {\n  extend: {\n    // Adds a new breakpoint in addition to the default breakpoints\n    screens: {\n      '2xl': '1440px',\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nYou can of course override some parts of the default theme and extend other\nparts of the default theme in the same configuration:\n\nmodern.config.ts\n\nconst designSystem = {\n  opacity: {\n    0: '0',\n    20: '0.2',\n    40: '0.4',\n    60: '0.6',\n    80: '0.8',\n    100: '1',\n  },\n  extend: {\n    screens: {\n      '2xl': '1440px',\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nReference other values#\n\nIf you need to reference another value in the configuration, you can do so by\nproviding a closure function instead of a static value. The function will\nreceive a theme() function as an argument, which you can use to look up other\nvalues in the configuration using dot notation.\n\nFor example, you can generate a fill utility for each color in the palette by\nreferencing theme('colors') on a fill configuration.\n\nmodern.config.ts\n\nconst designSystem = {\n  colors: {\n    // ...\n  },\n  fill: theme => theme('colors'),\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nThe theme() function tries to find the value you're looking for from a fully\nmerged configuration object, so it can reference your own custom settings as\nwell as default theme values. It also works recursively, so as long as there's a\nstatic value at the end of the chain, it can parse the value you're looking for.\n\nReference default configuration\n\nIf you want to reference a value in the default configuration for any reason,\nyou can import it from tailwindcss/defaultTheme. A useful example is if you want\nto add one of the fonts provided by the default configuration:\n\nmodern.config.ts\n\nconst defaultTheme = require('tailwindcss/defaultTheme');\n\nconst designSystem = {\n  extend: {\n    fontFamily: {\n      sans: ['Lato', ...defaultTheme.fontFamily.sans],\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nDisable the entire core plugin#\n\nIf you don't want to generate any classes for a core plugin, it's better to set\nthe plugin to false in the corePlugins configuration instead of providing an\nempty object for this property in the configuration:\n\n// Don't assign an empty object in your theme configuration\n\nconst designSystem = {\n  opacity: {},\n};\n\n// Do disable the plugin in your corePlugins configuration\nconst designSyttem = {\n  corePlugins: {\n    opacity: false,\n  },\n};\n\n\nThe end result is the same, but since many core plugins don't expose any\nconfiguration, they can only be disabled using corePlugins anyway, and it's best\nto keep them consistent.\n\nAdd your own key#\n\nIn many cases, it can be useful to add your own properties to the configuration\nobject.\n\nAn example of this is adding new properties for reuse between multiple core\nplugins. For example, you can extract a positions object that both the\nbackgroundPosition and objectPosition plugins can reference:\n\nconst designSystem = {\n  positions: {\n    bottom: 'bottom',\n    center: 'center',\n    left: 'left',\n    'left-bottom': 'left bottom',\n    'left-top': 'left top',\n    right: 'right',\n    'right-bottom': 'right bottom',\n    'right-top': 'right top',\n    top: 'top',\n  },\n  backgroundPosition: theme => theme('positions'),\n  objectPosition: theme => theme('positions'),\n};\n\n\nAnother example is adding new attributes to a custom plugin for reference. For\nexample, if you wrote a gradual change plugin for a project, you can add a\ngradual change attribute to the subject object referenced by the plugin:\n\nmodern.config.ts\n\nconst designSystem = {\n  gradients: theme => ({\n    'blue-green': [theme('colors.blue.500'), theme('colors.green.500')],\n    'purple-blue': [theme('colors.purple.500'), theme('colors.blue.500')],\n    // ...\n  }),\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n  tools: {\n    tailwind: {\n      plugins: [require('./plugins/gradients')],\n    },\n  },\n});\n\n\n\nConfigure reference#\n\nWith the exception of screens, colors, and spacing, all properties in the\nconfiguration object map to the core plugin of Tailwind CSS. Since many plugins\nare responsible for accepting only CSS properties for static value sets (eg\nfloat), note that not every plugin has corresponding properties in the theme\nobject.\n\nAll of these properties can also be used in the designSystem.extend property to\nextend the default theme.\n\nSee this link for what all properties do.\n\n\nAdditional configuration#\n\nIn addition to the same configuration as the Tailwind CSS Theme, there are\nadditional configurations available Modern.js.\n\nsource.designSystem.supportStyledComponents#\n\nThe configuration type is boolean and defaults to false.\n\nWhen the configuration value is true, the runtime provides the styled-components\nThemeProvider component outside the application and will inject it through the\nTheme Token object generated by designSystem.","frontmatter":{"sidebar_label":"designSystem"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/design-system.mdx","_relativePath":"en/configure/app/source/design-system.mdx"},{"id":152,"title":"source.disableDefaultEntries","routePath":"/en/configure/app/source/disable-default-entries","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to disable the function of automatically identifying the page entry\naccording to the project directory structure.\n\nINFO\n\nBy default, Modern.js will get the page entries according to the project\ndirectory structure. For details, please refer to Entry.\n\nSet the following to disable the default behavior:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    disableDefaultEntries: true,\n  },\n});\n\n\nAfter turning off the default behavior, you need to use source.entries to\nconfigure custom entries.\n\nWARNING\n\nWe recommend using the directory convention provided by Modern.js to organize\nthe code, so as to better use the functions of the framework and avoid some\nredundant configurations.","frontmatter":{"sidebar_label":"disableDefaultEntries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/disable-default-entries.mdx","_relativePath":"en/configure/app/source/disable-default-entries.mdx"},{"id":153,"title":"source.disableEntryDirs","routePath":"/en/configure/app/source/disable-entry-dirs","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string[]\n * Default: []\n\nBy default, application entries are identified based on the src directory, you\ncan disable some directories from being identified as application entries with\nthis option.\n\nFor example, when the configuration and directory structure is as follows:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    disableEntryDirs: ['./src/one'],\n  },\n});\n\n\nProject\n\n└── src/\n    ├── one/\n    |    └── App.tsx\n    ├── two/\n    |    └── routes/\n    └── env.d.ts\n\n\nWhen this option is not set, Modern.js will generate two entries based on the\nproject directory:\n\n * one\n * two\n\nWhen this option is set, src/one will not be recognized as an entry directory.\n\nA common usage is to configure the src/common, src/components directories to\nthis option to avoid these directories being recognized as application entries.","frontmatter":{"sidebar_label":"disableEntryDirs"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/disable-entry-dirs.mdx","_relativePath":"en/configure/app/source/disable-entry-dirs.mdx"},{"id":154,"title":"source.enableAsyncEntry","routePath":"/en/configure/app/source/enable-async-entry","lang":"en","toc":[{"text":"Background knowledge","id":"background-knowledge","depth":2,"charIndex":310},{"text":"Example","id":"example","depth":2,"charIndex":444}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nThis option is used in the webpack Module Federation scenario.\n\nWhen this option is turned on, the Modern.js wraps the automatically generated\nasynchronous boundary via Dynamic Import, allowing the page code to consume\nremote modules generated by the module federation.\n\n\nBackground knowledge#\n\nIf you don't know webpack module federation, please read the official Module\nFederation documentation first.\n\n\nExample#\n\nFirst, turn this option on in the configuration file:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    enableAsyncEntry: true,\n  },\n});\n\n\nThen execute the dev or build command, and you can see Modern.js automatically\ngenerated file becomes the following structure:\n\nnode_modules\n  └─ .modern-js\n     └─ main\n        ├─ bootstrap.jsx  #  real entry code\n        ├─ index.js      # asynchronous entry file\n        └─ index.html\n\n\nThe index.js reads as follows:\n\nimport('./bootstrap.jsx');\n\n\nAt this point, you can consume any remote modules in the current page.\n\nINFO\n\nModern.js the ModuleFederationPlugin of webpack is not encapsulated, please\nconfigure the ModuleFederationPlugin yourself through tools.webpack Chain.","frontmatter":{"sidebar_label":"enableAsyncEntry"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/enable-async-entry.mdx","_relativePath":"en/configure/app/source/enable-async-entry.mdx"},{"id":155,"title":"source.entriesDir","routePath":"/en/configure/app/source/entries-dir","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n * Default: ./src\n\nModern.js will scan the src directory by default to identify the page entries,\nyou can customize the identification directory of the page entries through this\noption.\n\nFor example, when the configuration and directory structure are as follows:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    entriesDir: './src/pages',\n  },\n});\n\n\nProject\n\n.\n└── src\n    └── pages\n        ├── a\n        │   └── App.tsx\n        └── b\n            └── App.tsx\n\n\nModern.js will generate the build entry a and b according to the ./src/pages\ndirectory structure, the result is as follows:\n\nconst entry = {\n  a: './src/pages/a/App.tsx',\n  b: './src/pages/b/App.tsx',\n};\n","frontmatter":{"sidebar_label":"entriesDir"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/entries-dir.mdx","_relativePath":"en/configure/app/source/entries-dir.mdx"},{"id":156,"title":"source.entries","routePath":"/en/configure/app/source/entries","lang":"en","toc":[{"text":"String","id":"string","depth":2,"charIndex":564},{"text":"Object","id":"object","depth":2,"charIndex":1715},{"text":"Disable entry file generation","id":"disable-entry-file-generation","depth":3,"charIndex":2212},{"text":"Conventional Routing","id":"conventional-routing","depth":3,"charIndex":2807},{"text":"Entry Merge Rules","id":"entry-merge-rules","depth":2,"charIndex":3234}],"domain":"","content":"#\n\n * Type:\n\ntype Entries = Record<\n  string,\n  | string\n  | {\n      entry: string;\n      disableMount?: boolean;\n      customBootstrap?: string;\n    }\n>;\n\n\n * Default: An entry object calculated from the directory structure of the\n   current project.\n\nUsed to configure custom page entries.\n\nWhen to use\n\nFor most scenarios, the entries automatically generated by Modern.js according\nto the directory structure can already meet the requirements. For details,\nplease refer to entries.\n\nIf you need to customize the page entry, you can set it through this option.\n\n\nString#\n\nWhen the value of entries object is string type, it means the file path of the\nentry module:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      // Specify a new entry named entry_customize\n      entry_customize: './src/home/test/index.ts',\n    },\n    disableDefaultEntries: true,\n  },\n});\n\n\nBy default, the configured entry is equivalent to App.[jt]sx, that is, the\nspecified entry file only needs to export the root component of the application.\n\nFor example the following directory structure:\n\n.\n├── src\n│   └── entry\n│       ├── chat.tsx\n│       └── home.tsx\n└── package.json\n\n\nThe above directory does not conform to the directory structure convention of\nModern.js, therefore, Modern.js will not get any default entry when analyzing\nthe directory structure.\n\nIn cases where you do not want to change the directory structure (such as\nproject migration), you can customize the entry through source.entries:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    entries: {\n      home: './src/entry/home.tsx',\n      chat: './src/entry/chat.tsx',\n    },\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nObject#\n\nWhen the value is Object, the following properties can be configured:\n\n * entry: string, entry file path.\n * disableMount: boolean = false, turn off the entry-scanning behavior of\n   Modern.js.\n * customBootstrap: string = '', Custom Bootstrap file path。\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      entry_customize: {\n        // entry file path\n        entry: './src/home/test/App.tsx',\n      },\n    },\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nDisable entry file generation#\n\nBy default, the configured entry is equivalent to App.[jt]sx, and Modern.js will\nautomatically generate an entry file to reference your configured entry.\n\nIf you want to disable the logic of Modern.js automatically generating the entry\nfile, you can set the disableMount property to true.\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    entries: {\n      entry_customize: {\n        entry: './src/home/test/index.tsx',\n        disableMount: true,\n      },\n    },\n    // Disable default ingress scanning\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nConventional Routing#\n\nIf you need to enable conventional routing for a custom entry, you can set entry\nto a directory path:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      // enable conventional routing\n      entry_spa: {\n        // The entry path of conventional routing must be set to a directory\n        entry: './src/about',\n      },\n    },\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nEntry Merge Rules#\n\nAfter setting source.entries, if disableDefaultEntries: true is not set,\nModern.js will merge the custom entry with the entry obtained by analyzing the\ndirectory structure.\n\nThe merge rule is:\n\n * Compare the entry path set by the custom entry with the default entry path.\n   When the entry path is consistent, the custom entry will override the default\n   entry.\n\nFor example the following directory structure:\n\n.\n├── src\n│   ├── chat\n│   │   └── App.tsx\n│   └── home\n│       └── index.ts\n└── package.json\n\n\nModern.js will analyze the src/ directory to get the default entries chat and\nhome. When the user configures the following in the modern.config.ts file:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      index: './src/home/index.ts',\n    },\n  },\n};\n\n\nYou can see that the path of the custom entry index is the same as the path of\nthe default entry home. During the merging process, index will override home,\nand the final entry is as follows:\n\n * chat -> ./src/chat/App.tsx\n * index -> ./src/home/index.ts","frontmatter":{"sidebar_label":"entries"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/entries.mdx","_relativePath":"en/configure/app/source/entries.mdx"},{"id":157,"title":"source.exclude","routePath":"/en/configure/app/source/exclude","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.exclude.\n\n * Type: Array\n * Default: []\n * Bundler: only support webpack\n\nSpecifies JavaScript/TypeScript files that do not need to be compiled. The usage\nis consistent with Rule.exclude in webpack, which supports passing in strings or\nregular expressions to match the module path.\n\nTIP\n\nWhen using Rspack as the bundler, all files will be compiled by default, and at\nthe same time, exclusion through source.exclude is not supported.\n\nFor example:\n\n\n\nexport default {\n  source: {\n    exclude: [path.resolve(__dirname, 'src/module-a'), /src\\/module-b/],\n  },\n};\n","frontmatter":{"sidebar_label":"exclude"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/exclude.mdx","_relativePath":"en/configure/app/source/exclude.mdx"},{"id":158,"title":"source.globalVars","routePath":"/en/configure/app/source/global-vars","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":566},{"text":"Function Usage","id":"function-usage","depth":3,"charIndex":909},{"text":"Difference with define","id":"difference-with-define","depth":3,"charIndex":1349},{"text":"Precautions","id":"precautions","depth":3,"charIndex":2037}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.globalVars.\n\n * Type: Record | Function\n * Default:\n\nconst defaultGlobalVars = {\n  // The environment variable `process.env.NODE_ENV` will be added by default,\n  // so you don't need to set it in manually.\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n};\n\n\nUsed to define global variables. It can replace expressions like process.env.FOO\nin your code after compile. Such as:\n\nconsole.log(process.env.NODE_ENV);\n\n// ⬇️ Turn into being...\nconsole.log('development');\n\n\n\nExample#\n\nIn the following example, the ENABLE_VCONSOLE and APP_CONTEXT are injected into\nthe code:\n\nexport default {\n  source: {\n    globalVars: {\n      ENABLE_VCONSOLE: true,\n      APP_CONTEXT: { answer: 42 },\n    },\n  },\n};\n\n\nYou can use them directly in your code:\n\nif (ENABLE_VCONSOLE) {\n  // do something\n}\n\nconsole.log(APP_CONTEXT);\n\n\n\nFunction Usage#\n\n * Type:\n\ntype GlobalVarsFn = (\n  obj: Record,\n  utils: { env: NodeEnv; target: BuilderTarget },\n) => Record | void;\n\n\nYou can set source.globalVars to a function to dynamically setting some\nenvironment variables.\n\nFor example, dynamically set according to the build target:\n\nexport default {\n  source: {\n    globalVars(obj, { target }) {\n      obj['MY_TARGET'] = target === 'node' ? 'server' : 'client';\n    },\n  },\n};\n\n\n\nDifference with define#\n\nYou can take source.globalVars as the syntax sugar of source.define, the only\ndifference is that source.globalVars will automatically stringify the value,\nwhich makes it easier to set the value of global variables. The values of\nglobalVars should be JSON-safe to ensure it can be serialized.\n\nexport default {\n  source: {\n    globalVars: {\n      'process.env.BUILD_VERSION': '0.0.1',\n      'import.meta.foo': { bar: 42 },\n      'import.meta.baz': false,\n    },\n    define: {\n      'process.env.BUILD_VERSION': JSON.stringify('0.0.1'),\n      'import.meta': {\n        foo: JSON.stringify({ bar: 42 }),\n        baz: JSON.stringify(false),\n      },\n    },\n  },\n};\n\n\n\nPrecautions#\n\nsource.globalVars injects environment variables through string replacement, so\nit cannot take effect on dynamic syntaxes such as destructuring.\n\nWhen using destructuring assignment, Builder will not be able to determine\nwhether the variable NODE_ENV is associated with the expression\nprocess.env.NODE_ENV to be replaced, so the following usage is invalid:\n\nconst { NODE_ENV } = process.env;\nconsole.log(NODE_ENV);\n// ❌ Won't get a string.\n","frontmatter":{"sidebar_label":"globalVars"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/global-vars.mdx","_relativePath":"en/configure/app/source/global-vars.mdx"},{"id":159,"title":"source.include","routePath":"/en/configure/app/source/include","lang":"en","toc":[{"text":"Compile Npm Packages","id":"compile-npm-packages","depth":3,"charIndex":933},{"text":"Compile Sub Dependencies","id":"compile-sub-dependencies","depth":3,"charIndex":1975},{"text":"Compile Libraries in Monorepo","id":"compile-libraries-in-monorepo","depth":3,"charIndex":2441},{"text":"Compile CommonJS Module","id":"compile-commonjs-module","depth":3,"charIndex":3095},{"text":"Matching Symlink","id":"matching-symlink","depth":3,"charIndex":3614},{"text":"Precautions","id":"precautions","depth":3,"charIndex":4035}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.include.\n\n * Type: Array\n * Default: []\n * Bundler: only support webpack\n\nIn order to maintain faster compilation speed, Builder will not compile\nJavaScript/TypeScript files under node_modules through babel-loader or ts-loader\nby default, as will as the JavaScript/TypeScript files outside the current\nproject directory.\n\nThrough the source.include config, you can specify directories or modules that\nneed to be compiled by Builder. The usage of source.include is consistent with\nRule.include in webpack, which supports passing in strings or regular\nexpressions to match the module path.\n\nFor example:\n\n\n\nexport default {\n  source: {\n    include: [path.resolve(__dirname, '../other-dir')],\n  },\n};\n\n\nTIP\n\nWhen using Rspack as the bundler, all files will be compiled by default, and at\nthe same time, exclusion through source.exclude is not supported.\n\n\nCompile Npm Packages#\n\nA typical usage scenario is to compile npm packages under node_modules, because\nsome third-party dependencies have ES6+ syntax, which may cause them to fail to\nrun on low-version browsers. You can solve the problem by using this config to\nspecify the dependencies that need to be compiled.\n\nTake query-string as an example, you can add the following config:\n\n\n\nexport default {\n  source: {\n    include: [\n      // Method 1:\n      // First get the path of the module by require.resolve\n      // Then pass path.dirname to point to the corresponding directory\n      path.dirname(require.resolve('query-string')),\n      // Method 2:\n      // Match by regular expression\n      // All paths containing `/query-string/` will be matched\n      /\\/query-string\\//,\n    ],\n  },\n};\n\n\n> Note that this config will only compile the code of query-string itself, not\n> the sub-dependencies of query-string. If you need to compile a sub-dependency\n> of query-string, you need to add the corresponding npm package to\n> source.include.\n\n\nCompile Sub Dependencies#\n\nWhen you compile an npm package via source.include, Builder will only compile\nthe matching module by default, not the Sub Dependencies of the module.\n\nTake query-string for example, it depends on the decode-uri-component package,\nwhich also has ES6+ code, so you need to add the decode-uri-component package to\nsource.include as well.\n\nexport default {\n  source: {\n    include: [/\\/query-string\\//, /\\/decode-uri-component\\//],\n  },\n};\n\n\n\nCompile Libraries in Monorepo#\n\nWhen developing in Monorepo, if you need to refer to the source code of other\nlibraries in Monorepo, you can add the corresponding library to source.include:\n\n\n\nexport default {\n  source: {\n    include: [\n      // Method 1:\n      // Compile all files in Monorepo's package directory\n      path.resolve(__dirname, '../../packages'),\n\n      // Method 2:\n      // Compile the source code of a package in Monorepo's package directory\n      // This way of writing matches the range more accurately and has less impact on the overall build performance.\n      path.resolve(__dirname, '../../packages/xxx/src'),\n    ],\n  },\n};\n\n\n\nCompile CommonJS Module#\n\nBabel cannot compile CommonJS modules by default, and if you compile a CommonJS\nmodule, you may get a runtime error message exports is not defined.\n\nWhen you need to compile a CommonJS module using source.include, you can set\nBabel's sourceType configuration to unambiguous.\n\nexport default {\n  tools: {\n    babel(config) {\n      config.sourceType = 'unambiguous';\n    },\n  },\n};\n\n\nSetting sourceType to unambiguous may have some other effects, please refer to\nBabel official documentation.\n\n\nMatching Symlink#\n\nIf you match a module that is symlinked to the current project, then you need to\nmatch the real path of the module, not the symlinked path.\n\nFor example, if you symlink the packages/foo path in Monorepo to the\nnode_modules/foo path of the current project, you need to match the packages/foo\npath, not the node_modules/foo path.\n\nThis behavior can be controlled via webpack's resolve.symlinks config.\n\n\nPrecautions#\n\nNote that source.include should not be used to compile the entire node_modules\ndirectory. For example, the following usage is wrong:\n\nexport default {\n  source: {\n    include: [/\\/node_modules\\//],\n  },\n};\n\n\nIf you compile the entire node_modules, not only will the build time be greatly\nincreased, but also unexpected errors may occur. Because most of the npm\npackages in node_modules are already compiled, there is usually no need for a\nsecond compilation. In addition, exceptions may occur after npm packages such as\ncore-js are compiled.","frontmatter":{"sidebar_label":"include"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/include.mdx","_relativePath":"en/configure/app/source/include.mdx"},{"id":160,"title":"source.moduleScopes","routePath":"/en/configure/app/source/module-scopes","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":348},{"text":"Array Type","id":"array-type","depth":4,"charIndex":792},{"text":"Function Type","id":"function-type","depth":4,"charIndex":943}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.moduleScopes.\n\n * Type: Array | Function\n * Default: undefined\n * Bundler: only support webpack\n\nRestrict importing paths. After configuring this option, all source files can\nonly import code from the specific paths, and import code from other paths is\nnot allowed.\n\n\nExample#\n\nFirst, we configure moduleScopes to only include the src directory:\n\nexport default {\n  source: {\n    moduleScopes: ['./src'],\n  },\n};\n\n\nThen we import the utils/a module outside the src directory in src/App.tsx:\n\n\n\n\nAfter compiling, there will be a reference path error:\n\n\n\nIf we configure the utils directory in moduleScopes, the error will disappear.\n\nexport default {\n  source: {\n    moduleScopes: ['./src', './utils'],\n  },\n};\n\n\nArray Type#\n\nYou can directly set several paths like this:\n\nexport default {\n  source: {\n    moduleScopes: ['./src', './shared', './utils'],\n  },\n};\n\n\nFunction Type#\n\nmoduleScopes also supports setting as a function, which can be modified instead\nof overriding the default value:\n\nexport default {\n  source: {\n    moduleScopes: scopes => {\n      scopes.push('./shared');\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"moduleScopes"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/module-scopes.mdx","_relativePath":"en/configure/app/source/module-scopes.mdx"},{"id":161,"title":"source.preEntry","routePath":"/en/configure/app/source/pre-entry","lang":"en","toc":[{"text":"Add a single script","id":"add-a-single-script","depth":4,"charIndex":340},{"text":"Add global style","id":"add-global-style","depth":4,"charIndex":718},{"text":"Add multiple scripts","id":"add-multiple-scripts","depth":4,"charIndex":978}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.preEntry.\n\n * Type: string | string[]\n * Default: undefined\n\nAdd a script before the entry file of each page. This script will be executed\nbefore the page code. It can be used to execute global logics, such as injecting\npolyfills, setting global styles, etc.\n\nAdd a single script#\n\nFirst create a src/polyfill.ts file:\n\nconsole.log('I am a polyfill');\n\n\nThen configure src/polyfill.ts to source.preEntry:\n\nexport default {\n  source: {\n    preEntry: './src/polyfill.ts',\n  },\n};\n\n\nRe-run the compilation and visit any page, you can see that the code in\nsrc/polyfill.ts has been executed, and the I am a polyfill is logged in the\nconsole.\n\nAdd global style#\n\nYou can also configure the global style through source.preEntry, this CSS code\nwill be loaded earlier than the page code, such as introducing a normalize.css\nfile:\n\nexport default {\n  source: {\n    preEntry: './src/normalize.css',\n  },\n};\n\n\nAdd multiple scripts#\n\nYou can add multiple scripts by setting preEntry to an array, and they will be\nexecuted in array order:\n\nexport default {\n  source: {\n    preEntry: ['./src/polyfill-a.ts', './src/polyfill-b.ts'],\n  },\n};\n","frontmatter":{"sidebar_label":"preEntry"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/pre-entry.mdx","_relativePath":"en/configure/app/source/pre-entry.mdx"},{"id":162,"title":"source.resolveExtensionPrefix","routePath":"/en/configure/app/source/resolve-extension-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":354},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":729}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.resolveExtensionPrefix.\n\n * Type: string | Record\n * Default: undefined\n\nAdd a prefix to resolve.extensions.\n\nIf multiple files share the same name but have different extensions, Builder\nwill resolve the one with the extension listed first in the array and skip the\nrest.\n\n\nExample#\n\nexport default {\n  source: {\n    resolveExtensionPrefix: '.web',\n  },\n};\n\n\nWith the configuration above, the extensions array will become:\n\n// before\nconst extensions = ['.js', '.ts', ...];\n\n// after\nconst extensions = ['.web.js', '.js', '.web.ts' , '.ts', ...];\n\n\nWhen import './foo' in the code, the foo.web.js file will be resolved first,\nthen the foo.js file.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nextension prefix for different targets. At this point, you need to set\nresolveExtensionPrefix to an object whose key is the corresponding build target.\n\nFor example to set different extension prefix for web and node:\n\nexport default {\n  output: {\n    source: {\n      resolveExtensionPrefix: {\n        web: '.web',\n        node: '.node',\n      },\n    },\n  },\n};\n\n\nWhen import './foo' in the code, the foo.node.js file will be resolved for node\ntarget, and the foo.web.js file will be resolved for web target.","frontmatter":{"sidebar_label":"resolveExtensionPrefix"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/resolve-extension-prefix.mdx","_relativePath":"en/configure/app/source/resolve-extension-prefix.mdx"},{"id":163,"title":"source.resolveMainFields","routePath":"/en/configure/app/source/resolve-main-fields","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":356},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":460}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.resolveMainFields.\n\n * Type:\n\ntype Fields = (string | string[])[];\n\ntype ResolveMainFields = Fields | Record;\n\n\n * Default: undefined\n\nThis config will determine which field of package.json you use to import the npm\nmodule. Same as the resolve.mainFields config of webpack.\n\n\nExample#\n\nexport default {\n  source: {\n    resolveMainFields: ['main', 'browser', 'exports'],\n  },\n};\n\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nmainFields for different targets. At this point, you need to set\nresolveMainFields to an object whose key is the corresponding build target.\n\nFor example to set different mainFields for web and node:\n\nexport default {\n  output: {\n    source: {\n      resolveMainFields: {\n        web: ['main', 'browser', 'exports'],\n        node: ['main', 'node', 'exports'],\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"resolveMainFields"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/resolve-main-fields.mdx","_relativePath":"en/configure/app/source/resolve-main-fields.mdx"},{"id":164,"title":"source.transformImport","routePath":"/en/configure/app/source/transform-import","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1520},{"text":"Configuration","id":"configuration","depth":3,"charIndex":1750},{"text":"libraryName","id":"libraryname","depth":4,"charIndex":1766},{"text":"libraryDirectory","id":"librarydirectory","depth":4,"charIndex":1853},{"text":"style","id":"style","depth":4,"charIndex":2071},{"text":"styleLibraryDirectory","id":"stylelibrarydirectory","depth":4,"charIndex":2387},{"text":"camelToDashComponentName","id":"cameltodashcomponentname","depth":4,"charIndex":2754},{"text":"transformToDefaultImport","id":"transformtodefaultimport","depth":4,"charIndex":2925},{"text":"customName","id":"customname","depth":4,"charIndex":3101},{"text":"customStyleName","id":"customstylename","depth":4,"charIndex":3974}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.transformImport.\n\nUsed to import the code and style of the component library on demand, which is\nequivalent to babel-plugin-import.\n\nThe difference from babel-plugin-import is that source.transformImport is not\ncoupled with Babel. The Builder will automatically identify whether the\ncurrently used tools is Babel, SWC or Rspack, and apply the corresponding\non-demand import configuration.\n\n * Type:\n\ntype Config = false | Array<{\n  libraryName: string;\n  libraryDirectory?: string;\n  style?: string | boolean;\n  styleLibraryDirectory?: string;\n  camelToDashComponentName?: boolean;\n  transformToDefaultImport?: boolean;\n  customName?: ((member: string) => string | undefined) | string;\n  customStyleName?: ((member: string) => string | undefined) | string;\n}>;\n\n\n * Default:\n\nWhen the antd component library <= 4.x version is installed in the project,\nBuilder will automatically add the corresponding on-demand import configuration.\nThe default configuration is as follows:\n\n{\n  libraryName: 'antd',\n  libraryDirectory: target === 'node' ? 'lib' : 'es',\n  style: true,\n}\n\n\nYou can manually set transformImport: false to turn off the default behavior of\ntransformImport.\n\nFor example, when you use externals to avoid bundling antd, because\ntransformImport will convert the imported path of antd by default, the matching\npath changes and externals cannot take effect. At this time, you can set\ntransformImport: false to avoid this problem.\n\n\nExample#\n\nWhen using the above antd default configuration:\n\n{\n  libraryName: 'antd',\n  libraryDirectory: 'es',\n  style: true,\n}\n\n\nThe source code is as follows:\n\n\n\n\nIt will be transformed into:\n\n\nimport 'antd/es/button/style';\n\n\n\nConfiguration#\n\nlibraryName#\n\n * Type: string\n\nThe original import path that needs to be transformed.\n\nlibraryDirectory#\n\n * Type: string\n * Default: 'lib'\n\nUsed to splice the transformed path, the splicing rule is\n${libraryName}/${libraryDirectory}/${member}, where member is the imported\nmember.\n\nExample:\n\n\n\n\nOut:\n\n\n\n\nstyle#\n\n * Type: boolean\n * Default: undefined\n\nDetermines whether to import related styles. If it is true, the path\n${libraryName}/${libraryDirectory}/${member}/style will be imported. If it is\nfalse or undefined, the style will not be imported.\n\nWhen it is set to true:\n\n\n\n\nOut:\n\n\nimport 'foo/lib/button/style';\n\n\nstyleLibraryDirectory#\n\n * Type: string\n * Default: undefined\n\nThis configuration is used to splice the import path when importing styles. If\nthis configuration is specified, the style configuration item will be ignored.\nThe spliced import path is ${libraryName}/${styleLibraryDirectory}/${member}.\n\nWhen it is set to styles:\n\n\n\n\nOut:\n\n\nimport 'foo/styles/button';\n\n\ncamelToDashComponentName#\n\n * Type: boolean\n * Default: true\n\nWhether to convert camelCase imports to kebab-case.\n\nExample:\n\n\n\n\nOut:\n\n// set to true:\n\n// set to false:\n\n\n\ntransformToDefaultImport#\n\n * Type: boolean\n * Default: true\n\nWhether to convert import statements to default imports.\n\nExample:\n\n\n\n\nOut:\n\n// set to true:\n\n// set to false:\n\n\n\ncustomName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported path after conversion. The input is the imported member.\nFor example, configure it as (member) => `my-lib/${member}` , which will convert\nto .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.\n\ncustomStyleName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported style path after conversion. The input is the imported\nmember. For example, configure it as (member) => `my-lib/${member}` , which will\nconvert to .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.","frontmatter":{"sidebar_label":"transformImport"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/source/transform-import.mdx","_relativePath":"en/configure/app/source/transform-import.mdx"},{"id":165,"title":"testing.transformer","routePath":"/en/configure/app/testing/transformer","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: 'babel-jest' | 'ts-jest'\n * Default: babel-jest\n\nCaution\n\nFirst you need to enable the \"Unit Test\" function using new command.\n\nConfigure the compiler for source code when executing tests: babel-jest or\nts-jest. babel-jest is used by default.\n\nAdditional information\n\nBabel-jest can also compile TS files, but there is no type error. If you need to\ncheck the TS type when running tests, then use ts-jest.","frontmatter":{"title":"testing.transformer","sidebar_label":"transformer","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/testing/transformer.mdx","_relativePath":"en/configure/app/testing/transformer.mdx"},{"id":166,"title":"tools.autoprefixer","routePath":"/en/configure/app/tools/autoprefixer","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":390},{"text":"Function Type","id":"function-type","depth":3,"charIndex":624}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.autoprefixer.\n\n * Type: Object | Function\n * Default:\n\n{\n  flexbox: 'no-2009',\n  // Depends on the browserslist config in the project\n  // and the `output.overrideBrowserslist` (higher priority) config\n  overrideBrowserslist: browserslist,\n}\n\n\nYou can modify the config of autoprefixer by tools.autoprefixer.\n\n\nObject Type#\n\nWhen tools.autoprefixer is configured as Object type, it is merged with the\ndefault config through Object.assign. For example:\n\nexport default {\n  tools: {\n    autoprefixer: {\n      flexbox: 'no-2009',\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.autoprefixer is a Function, the default config is passed as the first\nparameter and can be directly modified or returned as the final result. For\nexample:\n\nexport default {\n  tools: {\n    autoprefixer(config) {\n      // modify flexbox config\n      config.flexbox = 'no-2009';\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"autoprefixer"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/autoprefixer.mdx","_relativePath":"en/configure/app/tools/autoprefixer.mdx"},{"id":167,"title":"tools.babel","routePath":"/en/configure/app/tools/babel","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":3,"charIndex":435},{"text":"Object Type","id":"object-type","depth":3,"charIndex":1307},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":1846},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":1966},{"text":"addPresets","id":"addpresets","depth":4,"charIndex":2353},{"text":"removePlugins","id":"removeplugins","depth":4,"charIndex":2603},{"text":"removePresets","id":"removepresets","depth":4,"charIndex":2930},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":3264},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":3885},{"text":"modifyPresetEnvOptions","id":"modifypresetenvoptions","depth":4,"charIndex":4490},{"text":"modifyPresetReactOptions","id":"modifypresetreactoptions","depth":4,"charIndex":4903}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.babel.\n\n * Type: Object | Function\n * Default: undefined\n\nBy tools.babel you can modify the options of babel-loader.\n\nWARNING\n\nWhen using Rspack as a packaging tool, using this configuration item will slow\ndown Rspack builds a bit. Because Rspack uses SWC compilation by default, there\nwill be additional compilation overhead when configuring the Babel.\n\n\nFunction Type#\n\nWhen tools.babel's type is Function, the default babel config will be passed in\nas the first parameter, the config object can be modified directly, or a value\ncan be returned as the final result. The second parameter provides some util\nfunctions that can be called directly:\n\nexport default {\n  tools: {\n    babel(config) {\n      // Add a babel plugin\n      // note: the plugin have been added to the default config to support antd load on demand\n      config.plugins.push([\n        'babel-plugin-import',\n        {\n          libraryName: 'xxx-components',\n          libraryDirectory: 'es',\n          style: true,\n        },\n      ]);\n    },\n  },\n};\n\n\nTIP\n\nThe above example is just for reference, usually you don't need to manually\nconfigure babel-plugin-import, because the Builder already provides a more\ngeneral source.transformImport configuration.\n\n\nObject Type#\n\nWhen tools.babel's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nCAUTION\n\nNote that Object.assign is a shallow copy and will completely overwrite the\nbuilt-in presets or plugins array, please use it with caution.\n\nexport default {\n  tools: {\n    babel: {\n      plugins: [\n        [\n          'babel-plugin-import',\n          {\n            libraryName: 'xxx-components',\n            libraryDirectory: 'es',\n            style: true,\n          },\n        ],\n      ],\n    },\n  },\n};\n\n\n\nUtil Functions#\n\nWhen tools.babel is a Function, the tool functions available for the second\nparameter are as follows:\n\naddPlugins#\n\n * Type: (plugins: BabelPlugin[]) => void\n\nAdd some Babel plugins. For example:\n\nexport default {\n  tools: {\n    babel(config, { addPlugins }) {\n      addPlugins([\n        [\n          'babel-plugin-import',\n          {\n            libraryName: 'xxx-components',\n            libraryDirectory: 'es',\n            style: true,\n          },\n        ],\n      ]);\n    },\n  },\n};\n\n\naddPresets#\n\n * Type: (presets: BabelPlugin[]) => void\n\nAdd Babel preset configuration. (No need to add presets in most cases)\n\nexport default {\n  tools: {\n    babel(config, { addPresets }) {\n      addPresets(['@babel/preset-env']);\n    },\n  },\n};\n\n\nremovePlugins#\n\n * Type: (plugins: string | string[]) => void\n\nTo remove the Babel plugin, just pass in the name of the plugin to be removed,\nyou can pass in a single string or an array of strings.\n\nexport default {\n  tools: {\n    babel(config, { removePlugins }) {\n      removePlugins('babel-plugin-import');\n    },\n  },\n};\n\n\nremovePresets#\n\n * Type: (presets: string | string[]) => void\n\nTo remove the Babel preset configuration, pass in the name of the preset to be\nremoved, you can pass in a single string or an array of strings.\n\nexport default {\n  tools: {\n    babel(config, { removePresets }) {\n      removePresets('@babel/preset-env');\n    },\n  },\n};\n\n\naddIncludes#\n\n * Type: (includes: string | RegExp | (string | RegExp)[]) => void\n\nBy default, Babel will only compile the application code in the src directory.\nWith addIncludes you can specify that Babel compile some files in node_modules.\nFor example:\n\nexport default {\n  tools: {\n    babel(config, { addIncludes }) {\n      addIncludes(/\\/query-string\\//);\n    },\n  },\n};\n\n\nTIP\n\nThe usage of the addIncludes function is basically the same as the\nsource.include config, please see the source.include documentation for a more\ndetailed usage. You can also use source.include directly instead of the\naddIncludes function.\n\naddExcludes#\n\n * Type: (excludes: string | RegExp | (string | RegExp)[]) => void\n\nContrary to addIncludes, specifies that certain files are excluded from Babel's\ncompilation.\n\nFor example, without compiling files in the src/example directory:\n\nexport default {\n  tools: {\n    babel(config, { addExcludes }) {\n      addExcludes('src/example');\n    },\n  },\n};\n\n\nTIP\n\nThe usage of the addExcludes function is basically the same as the\nsource.exclude config, please see the source.exclude documentation for a more\ndetailed usage. You can also use source.exclude directly instead of the\naddExcludes function.\n\nmodifyPresetEnvOptions#\n\n * Type: (options: PresetEnvOptions) => void\n\nModify the configuration of @babel/preset-env, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\nexport default {\n  tools: {\n    babel(config, { modifyPresetEnvOptions }) {\n      modifyPresetEnvOptions({\n        targets: {\n          browsers: ['last 2 versions'],\n        },\n      });\n    },\n  },\n};\n\n\nmodifyPresetReactOptions#\n\n * Type: (options: PresetReactOptions) => void\n\nModify the configuration of @babel/preset-react, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\nexport default {\n  tools: {\n    babel(config, { modifyPresetReactOptions }) {\n      modifyPresetReactOptions({\n        pragma: 'React.createElement',\n      });\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"babel"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/babel.mdx","_relativePath":"en/configure/app/tools/babel.mdx"},{"id":168,"title":"tools.bundlerChain","routePath":"/en/configure/app/tools/bundler-chain","lang":"en","toc":[{"text":"Utils","id":"utils","depth":3,"charIndex":1104},{"text":"env","id":"env","depth":4,"charIndex":1112},{"text":"isProd","id":"isprod","depth":4,"charIndex":1474},{"text":"target","id":"target","depth":4,"charIndex":1761},{"text":"isServer","id":"isserver","depth":4,"charIndex":2052},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":2301},{"text":"HtmlPlugin","id":"htmlplugin","depth":3,"charIndex":2572},{"text":"CHAIN_ID","id":"chain_id","depth":4,"charIndex":2834},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":3,"charIndex":3160},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":3,"charIndex":3620},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":3,"charIndex":3945},{"text":"Examples","id":"examples","depth":3,"charIndex":4577}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.bundlerChain.\n\n * Type: Function | undefined\n * Default: undefined\n\nYou can modify the webpack and Rspack configuration by configuring\ntools.bundlerChain which is type of Function. The function receives two\nparameters, the first is the original bundler chain object, and the second is an\nobject containing some utils.\n\nWhat is BundlerChain\n\nBundler chain is a subset of webpack chain, which contains part of the webpack\nchain API that you can use to modify both webpack and Rspack configuration.\n\nConfigurations modified via bundler chain will work on both webpack and Rspack\nbuilds. Note that the bundler chain only supports modifying the configuration of\nthe non-differentiated parts of webpack and Rspack. For example, modifying the\ndevtool configuration item (webpack and Rspack have the same devtool property\nvalue type), or adding an Rspack-compatible webpack plugin.\n\n> tools.bundlerChain is executed earlier than tools.webpackChain / tools.webpack\n> / tools.rspack and thus will be overridden by changes in others.\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { env }) => {\n      if (env === 'development') {\n        chain.devtool('cheap-module-eval-source-map');\n      }\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { isProd }) => {\n      if (isProd) {\n        chain.devtool('source-map');\n      }\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current environment. For\nexample:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n    },\n  },\n};\n\n\n\nHtmlPlugin#\n\n * Type: typeof import('html-webpack-plugin') | import('@rspack/plugin-html')\n\nThe HtmlPlugin instance in webpack or Rspack:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { HtmlPlugin }) => {\n      console.log(HtmlPlugin);\n    },\n  },\n};\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Builder, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nCHAIN_ID.RULE#\n\nID          DESCRIPTION\nRULE.MJS    Rule for mjs\nRULE.CSS    Rule for css\nRULE.LESS   Rule for less\nRULE.SASS   Rule for sass\nRULE.TOML   Rule for toml\nRULE.YAML   Rule for yaml\n\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.XXX can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG          Rules for SVG, automatic choice between data URI and\n                    separate file\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\n\nCHAIN_ID.USE#\n\nUSE.XXX can match a certain loader.\n\nID            DESCRIPTION\nUSE.LESS      correspond to less-loader\nUSE.SASS      correspond to sass-loader\nUSE.TOML      correspond to toml-loader\nUSE.YAML      correspond to yaml-loader\nUSE.SVGR      correspond to @svgr/webpack\nUSE.POSTCSS   correspond to postcss-loader\n\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.XXX can match a certain webpack plugin.\n\nID                          DESCRIPTION\nPLUGIN.HTML                 correspond to HtmlPlugin, you need to splice the entry name\n                            when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.APP_ICON             correspond to AppIconPlugin\nPLUGIN.INLINE_HTML          correspond to InlineChunkHtmlPlugin\nPLUGIN.BUNDLE_ANALYZER      correspond to WebpackBundleAnalyzer\nPLUGIN.BOTTOM_TEMPLATE      correspond to BottomTemplatePlugin\nPLUGIN.AUTO_SET_ROOT_SIZE   correspond to automatically set root font size plugin in\n                            Builder\n\n\nExamples#\n\nThe usage of BundlerChain can reference: WebpackChain Examples.","frontmatter":{"sidebar_label":"bundlerChain"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/bundler-chain.mdx","_relativePath":"en/configure/app/tools/bundler-chain.mdx"},{"id":169,"title":"tools.cssExtract","routePath":"/en/configure/app/tools/css-extract","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":621},{"text":"Function Type","id":"function-type","depth":3,"charIndex":890}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.cssExtract.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  // The loader options\n  loaderOptions: {},\n  // The plugin options\n  pluginOptions: {\n    // The default value of cssPath is `static/css`\n    // while the default value of cssFilename is `[name].[contenthash:8].css`\n    filename: `${cssPath}/${cssFilename}`,\n    chunkFilename: `${cssPath}/async/${cssFilename}`,\n    ignoreOrder: true,\n  },\n};\n\n\n * Bundler: only support webpack\n\nThe config of mini-css-extract-plugin can be modified through tools.cssExtract.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. For example:\n\nexport default {\n  tools: {\n    cssExtract: {\n      pluginOptions: {\n        filename: 'static/css/[name].[contenthash:8].css',\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen the value a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\nexport default {\n  tools: {\n    cssExtract: config => {\n      config.pluginOptions.filename = 'static/css/[name].[contenthash:8].css';\n      return config;\n    },\n  },\n};\n\n\nFor more config details, please refer to mini-css-extract-plugin.","frontmatter":{"sidebar_label":"cssExtract"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/css-extract.mdx","_relativePath":"en/configure/app/tools/css-extract.mdx"},{"id":170,"title":"tools.cssLoader","routePath":"/en/configure/app/tools/css-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":658},{"text":"Function Type","id":"function-type","depth":3,"charIndex":890}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.cssLoader.\n\n * Type: Object | Function\n * Default: undefined\n * Bundler: only support webpack\n\nThe config of css-loader can be modified through tools.cssLoader. The default\nconfig is as follows:\n\n{\n  importLoaders: 1,\n  modules: {\n    auto: true,\n    exportLocalsConvention: 'camelCase',\n    localIdentName: config.output.cssModuleLocalIdentName,\n    // isServer indicates node (SSR) build\n    // isWebWorker indicates web worker build\n    exportOnlyLocals: isServer || isWebWorker,\n  },\n  // CSS Source Map enabled by default in development environment\n  sourceMap: isDev,\n}\n\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via deep\nmerge. For example:\n\nexport default {\n  tools: {\n    cssLoader: {\n      modules: {\n        exportOnlyLocals: true,\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\nexport default {\n  tools: {\n    cssLoader: config => {\n      config.modules.exportOnlyLocals = true;\n      return config;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"cssLoader"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/css-loader.mdx","_relativePath":"en/configure/app/tools/css-loader.mdx"},{"id":171,"title":"tools.devServer","routePath":"/en/configure/app/tools/dev-server","lang":"en","toc":[{"text":"Options","id":"options","depth":3,"charIndex":190},{"text":"after","id":"after","depth":4,"charIndex":200},{"text":"before","id":"before","depth":4,"charIndex":1125},{"text":"client","id":"client","depth":4,"charIndex":1476},{"text":"devMiddleware","id":"devmiddleware","depth":4,"charIndex":2161},{"text":"headers","id":"headers","depth":4,"charIndex":2456},{"text":"historyApiFallback","id":"historyapifallback","depth":4,"charIndex":2656},{"text":"hot","id":"hot","depth":4,"charIndex":3070},{"text":"https","id":"https","depth":4,"charIndex":3151},{"text":"liveReload","id":"livereload","depth":4,"charIndex":3694},{"text":"setupMiddlewares","id":"setupmiddlewares","depth":4,"charIndex":3962},{"text":"proxy","id":"proxy","depth":4,"charIndex":5429},{"text":"watch","id":"watch","depth":4,"charIndex":7620}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.devServer.\n\n * Type: Object\n * Default: {}\n\nThe config of DevServer can be modified through tools.devServer.\n\n\nOptions#\n\nafter#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware after all other middleware\ninternally within the server.\n\nexport default {\n  tools: {\n    devServer: {\n      after: [\n        async (req, res, next) => {\n          console.log('after dev middleware');\n          next();\n        },\n      ],\n    },\n  },\n};\n\n\nwebpack-dev-server uses Express as the server-side framework. Modern.js does not\nuse any framework, and the req and res in the above middleware are all native\nNode objects. Therefore, the Express middleware used in webpack-dev-server may\nnot be directly usable in Modern.js.\n\nIf you want to migrate the Express middleware used in webpack-dev-server, you\ncan use the following method to pass the Express app as middleware:\n\n\n\n\n// init Express app\nconst app = express();\napp.use(expressMiddleware);\n\nexport default {\n  tools: {\n    devServer: {\n      after: [app],\n    },\n  },\n};\n\n\nbefore#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware prior to all other middleware\ninternally within the server.\n\nexport default {\n  tools: {\n    devServer: {\n      before: [\n        async (req, res, next) => {\n          console.log('before dev middleware');\n          next();\n        },\n      ],\n    },\n  },\n};\n\n\nclient#\n\n * Type:\n\n{\n    /** Specify a protocol to use */\n    protocol?: string;\n    /** The path which the middleware is serving the event stream on */\n    path?: string;\n    /** Specify a port number to listen for requests on */\n    port?: string;\n    /** Specify a host to use */\n    host?: string;\n}\n\n\n * Default:\n\nconst defaultConfig = {\n  path: '/webpack-hmr',\n  // By default it is set to the port number of the dev server\n  port: '',\n  // By default it is set to \"location.hostname\"\n  host: '',\n  // By default it is set to \"location.protocol === 'https:' ? 'wss' : 'ws'\"\"\n  protocol: '',\n};\n\n\nThe config of HMR client, which are usually used to set the WebSocket URL of\nHMR.\n\ndevMiddleware#\n\n * Type:\n\n{\n  writeToDisk: boolean | ((filename: string) => boolean);\n}\n\n\n * Default:\n\n{\n  writeToDisk: (file: string) => !file.includes('.hot-update.'),\n}\n\n\n * Bundler: only support webpack\n\nThe config of devMiddleware. Current options is the subset of\nwebpack-dev-middleware.\n\nheaders#\n\n * Type: Record\n * Default: undefined\n\nAdds headers to all responses.\n\nexport default {\n  tools: {\n    devServer: {\n      headers: {\n        'X-Custom-Foo': 'bar',\n      },\n    },\n  },\n};\n\n\nhistoryApiFallback#\n\n * Type: boolean | ConnectHistoryApiFallbackOptions\n * Default: false\n\nThe index.html page will likely have to be served in place of any 404 responses.\nEnable devServer.historyApiFallback by setting it to true:\n\nexport default {\n  tools: {\n    devServer: {\n      historyApiFallback: true,\n    },\n  },\n};\n\n\nFor more options and information, see the connect-history-api-fallback\ndocumentation.\n\nhot#\n\n * Type: boolean\n * Default: true\n\nEnable Hot Module Replacement feature.\n\nhttps#\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nBy default, DevServer will be served over HTTP. It can optionally be served over\nHTTPS by setting devServer.https to true, and will disable the HTTP server.\n\nYou can also manually pass in the certificate and corresponding private key\nrequired by the HTTPS server:\n\nexport default {\n  tools: {\n    devServer: {\n      https: {\n        key: fs.readFileSync('certificates/private.pem'),\n        cert: fs.readFileSync('certificates/public.pem'),\n      },\n    },\n  },\n};\n\n\nliveReload#\n\n * Type: boolean\n * Default: true\n\nBy default, the DevServer will reload/refresh the page when file changes are\ndetected (devServer.hot option must be disabled in order for liveReload to take\neffect). Disable devServer.liveReload by setting it to false.\n\nsetupMiddlewares#\n\n * Type:\n\nArray<\n  (\n    middlewares: {\n      unshift: (...handlers: RequestHandler[]) => void;\n      push: (...handlers: RequestHandler[]) => void;\n    },\n    server: {\n      sockWrite: (\n        type: string,\n        data?: string | boolean | Record,\n      ) => void;\n    },\n  ) => void\n>;\n\n\n * Default: undefined\n\nProvides the ability to execute a custom function and apply custom middlewares.\n\nThe order among several different types of middleware is: devServer.before =>\nunshift => internal middlewares => push => devServer.after.\n\nexport default {\n  tools: {\n    devServer: {\n      setupMiddlewares: [\n        (middlewares, server) => {\n          middlewares.unshift((req, res, next) => {\n            next();\n          });\n\n          middlewares.push((req, res, next) => {\n            next();\n          });\n        },\n      ],\n    },\n  },\n};\n\n\nIt is possible to use some server api to meet special scenario requirements:\n\n * sockWrite. Allow send some message to hmr client, and then the hmr client\n   will take different actions depending on the message type. If you send a\n   \"content changed\" message, the page will reload.\n\nexport default {\n  tools: {\n    devServer: {\n      setupMiddlewares: [\n        (middlewares, server) => {\n          // add custom watch & trigger page reload when change\n          watcher.on('change', changed => {\n            server.sockWrite('content-changed');\n          });\n        },\n      ],\n    },\n  },\n};\n\n\nproxy#\n\n * Type: Record | Record\n * Default: undefined\n\nProxying some URLs.\n\nexport default {\n  tools: {\n    devServer: {\n      proxy: {\n        '/api': 'http://localhost:3000',\n      },\n    },\n  },\n};\n\n\nA request to /api/users will now proxy the request to\nhttp://localhost:3000/api/users.\n\nIf you don't want /api to be passed along, we need to rewrite the path:\n\nexport default {\n  tools: {\n    devServer: {\n      proxy: {\n        '/api': {\n          target: 'http://localhost:3000',\n          pathRewrite: { '^/api': '' },\n        },\n      },\n    },\n  },\n};\n\n\nThe DevServer Proxy makes use of the http-proxy-middleware package. Check out\nits documentation for more advanced usages.\n\nThe full type definition of DevServer Proxy is:\n\n\n\ntype ProxyDetail = HttpProxyOptions & {\n  bypass?: (\n    req: IncomingMessage,\n    res: ServerResponse,\n    proxyOptions: ProxyOptions,\n  ) => string | undefined | null | false;\n  context?: string | string[];\n};\n\ntype ProxyOptions =\n  | Record\n  | Record\n  | ProxyDetail[]\n  | ProxyDetail;\n\n\nIn addition to the http-proxy-middleware option, we also support the bypass and\ncontext configuration:\n\n * bypass: bypass the proxy based on the return value of a function.\n   * Return null or undefined to continue processing the request with proxy.\n   * Return false to produce a 404 error for the request.\n   * Return a path to serve from, instead of continuing to proxy the request.\n * context: If you want to proxy multiple, specific paths to the same target,\n   you can use an array of one or more objects with a context property.\n\n// custom bypass\nexport default {\n  tools: {\n    devServer: {\n      proxy: {\n        '/api': {\n          target: 'http://localhost:3000',\n          bypass: function (req, res, proxyOptions) {\n            if (req.headers.accept.indexOf('html') !== -1) {\n              console.log('Skipping proxy for browser request.');\n              return '/index.html';\n            }\n          },\n        },\n      },\n    },\n  },\n};\n\n\n// proxy multiple\nexport default {\n  tools: {\n    devServer: {\n      proxy: [\n        {\n          context: ['/auth', '/api'],\n          target: 'http://localhost:3000',\n        },\n      ],\n    },\n  },\n};\n\n\nwatch#\n\n * Type: boolean\n * Default: true\n\nWhether to watch files change in directories such as mock/, server/, api/.","frontmatter":{"sidebar_label":"devServer"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/dev-server.mdx","_relativePath":"en/configure/app/tools/dev-server.mdx"},{"id":172,"title":"tools.esbuild","routePath":"/en/configure/app/tools/esbuild","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":42},{"text":"Configuration","id":"configuration","depth":2,"charIndex":1041}],"domain":"","content":"#\n\n * Type: Object\n * Default: undefined\n\n\nIntroduction#\n\nesbuild is a front-end build tool based on Golang. It has the functions of\nbundling, compiling and minimizing JavaScript code. Compared with traditional\ntools, the performance is significantly improved. When minimizing code, compared\nto webpack's built-in terser minimizer, esbuild has dozens of times better\nperformance.\n\nModern.js Builder provides esbuild plugin that allow you to use esbuild instead\nof babel-loader, ts-loader and terser for transformation and minification\nprocess. When you enable esbuild in a large project, it can greatly reduce the\ntime required for code compilation and compression, while effectively avoiding\nOOM (heap out of memory) problems.\n\nRecommend using SWC\n\nWe recommend using SWC to transform and minify code rather than esbuild, because\nSWC supports more syntaxes, provides better code compression, and the compiled\ncode has better compatibility.\n\nTherefore, we recommend that you use SWC instead of esbuild, please refer to\ntools.swc for usage.\n\n\nConfiguration#\n\nYou can set the esbuild compilation behavior through the tools.esbuild config.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  tools: {\n    esbuild: {\n      loader: {\n        target: 'chrome61',\n      },\n      minimize: {\n        target: 'chrome61',\n      },\n    },\n  },\n});\n\n\nFor config details, please refer to Modern.js Builder - Esbuild Plugin\nConfiguration.","frontmatter":{"sidebar_label":"esbuild"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/esbuild.mdx","_relativePath":"en/configure/app/tools/esbuild.mdx"},{"id":173,"title":"tools.htmlPlugin","routePath":"/en/configure/app/tools/html-plugin","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":854},{"text":"Function Type","id":"function-type","depth":3,"charIndex":1072},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":1542}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.htmlPlugin.\n\n * Type: false | Object | Function\n * Default:\n\nconst defaultHtmlPluginOptions = {\n  inject, // corresponding to the html.inject config\n  favicon, // corresponding to html.favicon config\n  filename, // generated based on output.distPath and entryName\n  template, // defaults to the built-in HTML template path\n  templateParameters, // corresponding to the html.templateParameters config\n  chunks: [entryName],\n  minify: {\n    removeComments: false,\n    useShortDoctype: true,\n    keepClosingSlash: true,\n    collapseWhitespace: true,\n    removeRedundantAttributes: true,\n    removeScriptTypeAttributes: true,\n    removeStyleLinkTypeAttributes: true,\n  },\n};\n\n\nThe configs of html-webpack-plugin or @rspack/plugin-html can be modified\nthrough tools.htmlPlugin.\n\n\nObject Type#\n\nWhen tools.htmlPlugin is Object type, the value will be merged with the default\nconfig via Object.assign.\n\nexport default {\n  tools: {\n    htmlPlugin: {\n      scriptLoading: 'blocking',\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.htmlPlugin is a Function:\n\n * The first parameter is the default config, which can be modified directly.\n * The second parameter is also an object, containing the entry name and the\n   entry value.\n * The Function can return a new object as the final config.\n\nexport default {\n  tools: {\n    htmlPlugin(config, { entryName, entryValue }) {\n      if (entryName === 'main') {\n        config.scriptLoading = 'blocking';\n      }\n    },\n  },\n};\n\n\n\nBoolean Type#\n\nThe built-in html-webpack-plugin plugins can be disabled by set tools.htmlPlugin\nto false.\n\nexport default {\n  tools: {\n    htmlPlugin: false,\n  },\n};\n","frontmatter":{"sidebar_label":"htmlPlugin"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/html-plugin.mdx","_relativePath":"en/configure/app/tools/html-plugin.mdx"},{"id":174,"title":"tools.inspector","routePath":"/en/configure/app/tools/inspector","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":408},{"text":"Function Type","id":"function-type","depth":3,"charIndex":667}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.inspector.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nYou can enable or configure the webpack inspector through tools.inspector.\n\nWhen the configuration is not undefined, it means that webpack-inspector is\nenabled, and the type of tools.inspector can be Object or Function.\n\n\nObject Type#\n\nWhen tools.inspector is configured with type Object, it is merged with the\ndefault configuration via Object.assign. For example:\n\nexport default {\n  tools: {\n    inspector: {\n      // The default port is 3333\n      port: 3334,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.inspector is a Function, the default configuration is passed as the\nfirst parameter and can be directly modified or returned as the final result.\nFor example:\n\nexport default {\n  tools: {\n    inspector(config) {\n      config.port = 3334;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"inspector"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/inspector.mdx","_relativePath":"en/configure/app/tools/inspector.mdx"},{"id":175,"title":"tools.jest","routePath":"/en/configure/app/tools/jest","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: Object | Function\n * Default: {}\n\nCaution\n\nFirst you need to enable the \"Unit Test\" function using new command.\n\nCorresponding to the configuration of Jest, when of type Object, all underlying\nconfigurations supported by Jest can be configured.\n\nmodern.config.js\n\nexport default defineConfig({\n  tools: {\n    jest: {\n      testTimeout: 10000,\n    },\n  },\n});\n\n\nWhen the value is of type Function, the default configuration is passed in as\nthe first parameter and a new Jest configuration object needs to be returned.\n\nmodern.config.js\n\nexport default defineConfig({\n  tools: {\n    jest: options => {\n      return {\n        ...options,\n        testTimeout: 10000,\n      };\n    },\n  },\n});\n","frontmatter":{"sidebar_label":"jest"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/jest.mdx","_relativePath":"en/configure/app/tools/jest.mdx"},{"id":176,"title":"tools.less","routePath":"/en/configure/app/tools/less","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":352},{"text":"Function Type","id":"function-type","depth":3,"charIndex":704},{"text":"Util Function","id":"util-function","depth":3,"charIndex":1143},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1159}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.less.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  lessOptions: {\n    javascriptEnabled: true,\n  },\n  // CSS Source Map enabled by default in development environment\n  sourceMap: isDev,\n};\n\n\nYou can modify the config of less-loader via tools.less.\n\n\nObject Type#\n\nWhen tools.less is configured as Object type, it is merged with the default\nconfig through Object.assign in a shallow way. It should be noted that\nlessOptions is merged through deepMerge in a deep way. For example:\n\nexport default {\n  tools: {\n    less: {\n      lessOptions: {\n        javascriptEnabled: false,\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.less is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor example:\n\nexport default {\n  tools: {\n    less(config) {\n      // Modify the config of lessOptions\n      config.lessOptions = {\n        javascriptEnabled: false,\n      };\n    },\n  },\n};\n\n\n\nUtil Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files less-loader does not compile, You can pass in one or\nmore regular expressions to match the path of less files, for example:\n\nexport default {\n  tools: {\n    less(config, { addExcludes }) {\n      addExcludes(/node_modules/);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"less"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/less.mdx","_relativePath":"en/configure/app/tools/less.mdx"},{"id":177,"title":"tools.minifyCss","routePath":"/en/configure/app/tools/minify-css","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":504},{"text":"Function Type","id":"function-type","depth":3,"charIndex":824}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.minifyCss.\n\n * Type: Object | Function | undefined\n * Default:\n\nconst defaultOptions = {\n  minimizerOptions: {\n    preset: [\n      'default',\n      {\n        mergeLonghand: false,\n      },\n    ],\n  },\n};\n\n\n * Bundler: only support webpack\n\nWhen building for production, Builder will minimize the CSS code through\ncss-minimizer-webpack-plugin. The config of css-minimizer-webpack-plugin can be\nmodified via tools.minifyCss.\n\n\nObject Type#\n\nWhen tools.minifyCss is Object type, it will be merged with the default config\nvia Object.assign.\n\nFor example, modify the preset config of cssnano:\n\nexport default {\n  tools: {\n    minifyCss: {\n      minimizerOptions: {\n        preset: require.resolve('cssnano-preset-simple'),\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.minifyCss is Function type, the default config is passed in as the\nfirst parameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\nexport default {\n   tools: {\n    minifyCss: options => {\n      options.minimizerOptions = {\n        preset: require.resolve('cssnano-preset-simple'),\n      },\n    }\n  }\n};\n","frontmatter":{"sidebar_label":"minifyCss"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/minify-css.mdx","_relativePath":"en/configure/app/tools/minify-css.mdx"},{"id":178,"title":"tools.postcss","routePath":"/en/configure/app/tools/postcss","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":3,"charIndex":731},{"text":"Object Type","id":"object-type","depth":3,"charIndex":1929},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":2407},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":2424}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.postcss.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  postcssOptions: {\n    plugins: [\n      require('postcss-flexbugs-fixes'),\n      require('postcss-custom-properties'),\n      require('postcss-initial'),\n      require('postcss-page-break'),\n      require('postcss-font-variant'),\n      require('postcss-media-minmax'),\n      require('postcss-nesting'),\n      require('autoprefixer')({\n        flexbox: 'no-2009',\n      }),\n    ],\n    // CSS Source Map enabled by default in development environment\n    sourceMap: isDev,\n  },\n};\n\n\nBuilder integrates PostCSS by default, you can configure postcss-loader through\ntools.postcss.\n\n\nFunction Type#\n\nWhen the value is a Function, the internal default config is passed as the first\nparameter, and the config object can be modified directly without returning, or\nan object can be returned as the final result; the second parameter is a set of\ntool functions for modifying the postcss-loader config.\n\nFor example, you need to add a PostCSS plugin on the basis of the original\nplugin, and push a new plugin to the postcssOptions.plugins array:\n\nexport default {\n  tools: {\n    postcss: opts => {\n      opts.postcssOptions.plugins.push(require('postcss-px-to-viewport'));\n    },\n  },\n};\n\n\nWhen you need to pass parameters to the PostCSS plugin, you can pass them in by\nfunction parameters:\n\nexport default {\n  tools: {\n    postcss: opts => {\n      const viewportPlugin = require('postcss-px-to-viewport')({\n        viewportWidth: 375,\n      });\n      opts.postcssOptions.plugins.push(viewportPlugin);\n    },\n  },\n};\n\n\ntools.postcss can return a config object and completely replace the default\nconfig:\n\nexport default {\n  tools: {\n    postcss: () => {\n      return {\n        postcssOptions: {\n          plugins: [require('postcss-px-to-viewport')],\n        },\n      };\n    },\n  },\n};\n\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. Note that Object.assign is a shallow copy and will completely\noverwrite the built-in presets or plugins array, please use it with caution.\n\nexport default {\n  tools: {\n    postcss: {\n      // Because `Object.assign` is used, the default postcssOptions will be overwritten.\n      postcssOptions: {\n        plugins: [require('postcss-px-to-viewport')],\n      },\n    },\n  },\n};\n\n\n\nUtil Functions#\n\naddPlugins#\n\n * Type: (plugins: PostCSSPlugin | PostCSSPlugin[]) => void\n\nFor adding additional PostCSS plugins, You can pass in a single PostCSS plugin,\nor an array of PostCSS plugins.\n\nexport default {\n  tools: {\n    postcss: (config, { addPlugins }) => {\n      // Add a PostCSS Plugin\n      addPlugins(require('postcss-preset-env'));\n      // Add multiple PostCSS Plugins\n      addPlugins([require('postcss-preset-env'), require('postcss-import')]);\n    },\n  },\n};\n\n\nTIP\n\nBuilder uses the PostCSS v8 version. When you use third-party PostCSS plugins,\nplease pay attention to whether the PostCSS version is compatible. Some legacy\nplugins may not work in PostCSS v8.","frontmatter":{"sidebar_label":"postcss"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/postcss.mdx","_relativePath":"en/configure/app/tools/postcss.mdx"},{"id":179,"title":"tools.pug","routePath":"/en/configure/app/tools/pug","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":187},{"text":"Object Type","id":"object-type","depth":3,"charIndex":435},{"text":"Function Type","id":"function-type","depth":3,"charIndex":654}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.pug.\n\n * Type: true | Object | Function | undefined\n * Default: false\n\nConfigure the Pug template engine.\n\n\nBoolean Type#\n\nPug template engine is not enabled by default, you can enable it by setting\ntools.pug to true.\n\nexport default {\n  tools: {\n    pug: true,\n  },\n};\n\n\nWhen enabled, you can use index.pug as the template file in html.template\nconfig.\n\n\nObject Type#\n\nWhen tools.terser is Object type, you can passing the Pug options:\n\nexport default {\n  tools: {\n    pug: {\n      doctype: 'xml',\n    },\n  },\n};\n\n\nFor detailed options, please refer to Pug API Reference.\n\n\nFunction Type#\n\nWhen tools.pug is Function type, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or a value\ncan be returned as the final result.\n\nexport default {\n  tools: {\n    pug(config) {\n      config.doctype = 'xml';\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"pug"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/pug.mdx","_relativePath":"en/configure/app/tools/pug.mdx"},{"id":180,"title":"tools.rspack","routePath":"/en/configure/app/tools/rspack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":226},{"text":"Function Type","id":"function-type","depth":3,"charIndex":517},{"text":"Utils","id":"utils","depth":3,"charIndex":999},{"text":"env","id":"env","depth":4,"charIndex":1007},{"text":"isProd","id":"isprod","depth":4,"charIndex":1387},{"text":"target","id":"target","depth":4,"charIndex":1692},{"text":"isServer","id":"isserver","depth":4,"charIndex":1994},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":2259},{"text":"addRules","id":"addrules","depth":3,"charIndex":2546},{"text":"prependPlugins","id":"prependplugins","depth":3,"charIndex":3124},{"text":"appendPlugins","id":"appendplugins","depth":3,"charIndex":3572},{"text":"removePlugin","id":"removeplugin","depth":3,"charIndex":4012},{"text":"mergeConfig","id":"mergeconfig","depth":3,"charIndex":4342},{"text":"getCompiledPath","id":"getcompiledpath","depth":3,"charIndex":4633}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.rspack.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support Rspack\n\ntools.rspack is used to configure Rspack.\n\n\nObject Type#\n\nYou can configure it as an object, which will be merged with the original Rspack\nconfiguration through webpack-merge. For example:\n\nexport default {\n  tools: {\n    rspack: {\n      resolve: {\n        alias: {\n          '@util': 'src/util',\n        },\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nYou can also configure it as a function, which accepts one parameter, the\noriginal Rspack configuration, you can modify this configuration, and then\nreturn a new configuration. For example:\n\nexport default {\n  tools: {\n    rspack: config => {\n      config.resolve.alias['@util'] = 'src/util';\n      return config;\n    },\n  },\n};\n\n\nThe second parameter of this function is an object that contains some\ninformation about the tool collection. Details are as follows:\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    rspack: (config, { env }) => {\n      if (env === 'development') {\n        config.devtool = 'cheap-module-eval-source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    rspack: (config, { isProd }) => {\n      if (isProd) {\n        config.devtool = 'source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\nexport default {\n  tools: {\n    rspack: (config, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    rspack: (config, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    rspack: (config, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional Rspack rules.\n\nFor example:\n\nexport default {\n  tools: {\n    rspack: (config, { addRules }) => {\n      // add a single rule\n      addRules({\n        test: /\\.foo/,\n        loader: require.resolve('foo-loader'),\n      });\n\n      // Add multiple rules as an array\n      addRules([\n        {\n          test: /\\.foo/,\n          loader: require.resolve('foo-loader'),\n        },\n        {\n          test: /\\.bar/,\n          loader: require.resolve('bar-loader'),\n        },\n      ]);\n    },\n  },\n};\n\n\n\nprependPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal Rspack plugins array, and the\nplugin will be executed first.\n\nexport default {\n  tools: {\n    rspack: (config, { prependPlugins }) => {\n      // add a single plugin\n      prependPlugins(new PluginA());\n\n      // Add multiple plugins\n      prependPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\n\nappendPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal Rspack plugins array, the\nplugin will be executed last.\n\nexport default {\n  tools: {\n    rspack: (config, { appendPlugins }) => {\n      // add a single plugin\n      appendPlugins([new PluginA()]);\n\n      // Add multiple plugins\n      appendPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal Rspack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal webpack-bundle-analyzer:\n\nexport default {\n  tools: {\n    rspack: (config, { removePlugin }) => {\n      removePlugin('BundleAnalyzerPlugin');\n    },\n  },\n};\n\n\n\nmergeConfig#\n\n * Type: (...configs: RspackConfig[]) => RspackConfig\n\nUsed to merge multiple Rspack configs, same as webpack-merge.\n\nexport default {\n  tools: {\n    rspack: (config, { mergeConfig }) => {\n      return mergeConfig(config, {\n        devtool: 'eval',\n      });\n    },\n  },\n};\n\n\n\ngetCompiledPath#\n\n * Type: (name: string) => string\n\nGet the path to the builder built-in dependencies, such as:\n\n * sass\n * sass-loader\n * less\n * less-loader\n * babel-loader\n * url-loader\n * file-loader\n * ...\n\nThis method is usually used when you need to reuse the same dependency with the\nbuilder.\n\nTIP\n\nBuilder built-in dependencies are subject to change with version iterations,\ne.g. generate large version break changes. Please avoid using this API if it is\nnot necessary.\n\nexport default {\n  tools: {\n    rspack: (config, { getCompiledPath }) => {\n      const loaderPath = getCompiledPath('less-loader');\n      // ...\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"rspack"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/rspack.mdx","_relativePath":"en/configure/app/tools/rspack.mdx"},{"id":181,"title":"tools.sass","routePath":"/en/configure/app/tools/sass","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":301},{"text":"Function Type","id":"function-type","depth":3,"charIndex":582},{"text":"Utility Function","id":"utility-function","depth":3,"charIndex":1030},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1049}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.sass.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  // CSS Source Map enabled by default in development environment\n  sourceMap: isDev,\n};\n\n\nYou can modify the config of sass-loader via tools.sass.\n\n\nObject Type#\n\nWhen tools.sass is Object type, it is merged with the default config through\nObject.assign. It should be noted that sassOptions is merged through deepMerge\nin a deep way.\n\nFor example:\n\nexport default {\n  tools: {\n    sass: {\n      sourceMap: true,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.sass is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor Example:\n\nexport default {\n  tools: {\n    sass(config) {\n      // Modify sourceMap config\n      config.additionalData = async (content, loaderContext) => {\n        // ...\n      };\n    },\n  },\n};\n\n\n\nUtility Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files sass-loader does not compile, You can pass in one or\nmore regular expressions to match the path of sass files, for example:\n\nexport default {\n  tools: {\n    sass(config, { addExcludes }) {\n      addExcludes(/node_modules/);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"sass"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/sass.mdx","_relativePath":"en/configure/app/tools/sass.mdx"},{"id":182,"title":"tools.styleLoader","routePath":"/en/configure/app/tools/style-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":368},{"text":"Function Type","id":"function-type","depth":3,"charIndex":603}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.styleLoader.\n\n * Type: Object | Function\n * Default: {}\n * Bundler: only support webpack\n\nThe config of style-loader can be set through tools.styleLoader.\n\nIt is worth noting that Builder does not enable style-loader by default. You can\nuse output.disableCssExtract config to enable it.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. For example:\n\nexport default {\n  tools: {\n    styleLoader: {\n      loaderOptions: {\n        insert: 'head',\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\nexport default {\n  tools: {\n    styleLoader: config => {\n      config.loaderOptions.insert = 'head';\n      return config;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"styleLoader"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/style-loader.mdx","_relativePath":"en/configure/app/tools/style-loader.mdx"},{"id":183,"title":"tools.styledComponents","routePath":"/en/configure/app/tools/styled-components","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.styledComponents.\n\n * Type: Object | Function\n * Default\n\n{\n  displayName: true,\n  // `isSSR` is true in SSR build\n  ssr: isSSR,\n  // `pure` is enabled in production to reduce bundle size\n  pure: isProd,\n  transpileTemplateLiterals: true,\n}\n\n\n * Bundler: only support webpack\n\ntools.styledComponents config is corresponding to\nbabel-plugin-styled-components.\n\nWhen the value is an Object, use the Object.assign function to merge with the\ndefault config. For example:\n\nexport default {\n  tools: {\n    styledComponents: {\n      pure: false,\n    },\n  },\n};\n\n\nWhen the config is a Function, the first parameter is the default configuration,\nand the second parameter provides some utility functions that can be called\ndirectly:\n\nexport default {\n  tools: {\n    styledComponents(config) {\n      config.pure = false;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"styledComponents"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/styled-components.mdx","_relativePath":"en/configure/app/tools/styled-components.mdx"},{"id":184,"title":"tools.swc","routePath":"/en/configure/app/tools/swc","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":42},{"text":"Install","id":"install","depth":2,"charIndex":572},{"text":"Config","id":"config","depth":2,"charIndex":956}],"domain":"","content":"#\n\n * Type: Object\n * Default: undefined\n\n\nIntroduction#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js Builder has a out-of-box plugin for SWC, power your Web application\nwith Polyfill and minification, we also port some common used Babel plugins to\nSWC.\n\nTIP\n\nWhen using Rspack as the bundler, SWC will be used for transpiling and\ncompression by default, so you don't need to install or configure the SWC\nplugin.\n\n\nInstall#\n\nFirst, you need to execute pnpm run new to enable the SWC compile:\n\n? Action: Enable features\n? Enable features: Enable SWC Compile\n\n\nAfter the installation, please register the SWC plugin in the modern.config.ts\nfile, then the SWC compilation and compression will be enabled.\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  plugins: [appTools(), swcPlugin()],\n});\n\n\n\nConfig#\n\nYou can set the SWC compilation behavior through the tools.swc config.\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  tools: {\n    swc: {\n      jsMinify: {\n        compress: {},\n        mangle: true,\n      },\n    },\n  },\n});\n\n\nFor config details, please refer to Modern.js Builder - SWC Plugin\nConfiguration.","frontmatter":{"sidebar_label":"swc"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/swc.mdx","_relativePath":"en/configure/app/tools/swc.mdx"},{"id":185,"title":"tools.tailwindcss","routePath":"/en/configure/app/tools/tailwindcss","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":3,"charIndex":382},{"text":"Object Type","id":"object-type","depth":3,"charIndex":754},{"text":"Limitations","id":"limitations","depth":3,"charIndex":1120}],"domain":"","content":"#\n\n * Type: Object | Function\n * Default:\n\nconst tailwind = {\n  content: [\n    './config/html/**/*.html',\n    './config/html/**/*.ejs',\n    './config/html/**/*.hbs',\n    './src/**/*.js',\n    './src/**/*.jsx',\n    './src/**/*.ts',\n    './src/**/*.tsx',\n    './storybook/**/*',\n  ],\n  // Use source.design System config as Tailwind CSS theme config\n  theme: source.designSystem,\n};\n\n\n\nFunction Type#\n\nWhen tools.tailwindcss's type is Function, the default tailwindcss config will\nbe passed in as the first parameter, the config object can be modified directly,\nor a value can be returned as the final result.\n\nmodern.config.ts\n\nexport default {\n  tools: {\n    tailwindcss(config) {\n      config.content.push('./some-folder/**/*.{js,ts}');\n    },\n  },\n};\n\n\n\nObject Type#\n\nWhen tools.tailwindcss's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nmodern.config.ts\n\nexport default {\n  tools: {\n    tailwindcss: {\n      plugins: [\n        require('@tailwindcss/forms'),\n        require('@tailwindcss/aspect-ratio'),\n        require('@tailwindcss/typography'),\n      ],\n    },\n  },\n};\n\n\n\nLimitations#\n\nThe theme attribute is not allowed, otherwise the build will fail. Modern.js use\nsource.designSystem as the Tailwind CSS Theme configuration.\n\nOther uses are consistent with Tailwind CSS.","frontmatter":{"sidebar_label":"tailwindcss"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/tailwindcss.mdx","_relativePath":"en/configure/app/tools/tailwindcss.mdx"},{"id":186,"title":"tools.terser","routePath":"/en/configure/app/tools/terser","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":452},{"text":"Function Type","id":"function-type","depth":3,"charIndex":706}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.terser.\n\n * Type: Object | Function | undefined\n * Default:\n\nconst defaultTerserOptions = {\n  terserOptions: {\n    mangle: {\n      safari10: true,\n    },\n  },\n};\n\n\n * Bundler: only support webpack\n\nWhen building for production, Builder will minimize the JavaScript code through\nterser-webpack-plugin. The config of terser-webpack-plugin can be modified via\ntools.terser.\n\n\nObject Type#\n\nWhen tools.terser is Object type, it will be merged with the default config via\nObject.assign.\n\nFor example, to exclude some files from minification:\n\nexport default {\n  tools: {\n    terser: {\n      exclude: /\\/excludes/,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.terser is Function type, the default config is passed in as the first\nparameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\nexport default {\n  tools: {\n    terser: opts => {\n      opts.exclude = /\\/excludes/;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"terser"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/terser.mdx","_relativePath":"en/configure/app/tools/terser.mdx"},{"id":187,"title":"tools.tsChecker","routePath":"/en/configure/app/tools/ts-checker","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":873},{"text":"Function Type","id":"function-type","depth":3,"charIndex":975}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.tsChecker.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  typescript: {\n    // avoid OOM issue\n    memoryLimit: 8192,\n    // use tsconfig of user project\n    configFile: tsconfigPath,\n    // use typescript of user project\n    typescriptPath: require.resolve('typescript'),\n  },\n  issue: {\n    exclude: [\n      { file: '**/*.(spec|test).ts' },\n      { file: '**/node_modules/**/*' },\n    ],\n  },\n  logger: {\n    log() {\n      // do nothing\n      // we only want to display error messages\n    },\n    error(message: string) {\n      console.error(message.replace(/ERROR/g, 'Type Error'));\n    },\n  },\n},\n\n\n * Bundler: only support webpack\n\nBy default, the fork-ts-checker-webpack-plugin is enabled for type checking. You\ncan use output.disableTsChecker config to disable it.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign.\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config.","frontmatter":{"sidebar_label":"tsChecker"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/ts-checker.mdx","_relativePath":"en/configure/app/tools/ts-checker.mdx"},{"id":188,"title":"tools.tsLoader","routePath":"/en/configure/app/tools/ts-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":356},{"text":"Function Type","id":"function-type","depth":3,"charIndex":824},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":1248},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":1385},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1757}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.tsLoader.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nts-loader is not enabled by default in the project. When tools.tsLoader is not\nundefined, builder will use ts-loader instead of babel-loader to compile\nTypeScript code.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default configuration via\nObject.assign.\n\nThe default configuration is as follows:\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"ESNext\"\n  },\n  \"transpileOnly\": true,\n  \"allowTsInNodeModules\": true\n}\n\n\nYou can override the default configuration via the tools.tsLoader configuration\nitem:\n\nexport default {\n  tools: {\n    tsLoader: {\n      allowTsInNodeModules: false,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen this value is a Function, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or an object\ncan be returned as the final configuration.The second parameter is the util\nfunctions to modify the ts-loader configuration. For example:\n\nexport default {\n  tools: {\n    tsLoader: opts => {\n      opts.allowTsInNodeModules = false;\n    },\n  },\n};\n\n\n\nUtil Functions#\n\nWhen the value of tools.tsLoader is a Function, the utils functions available\nfor the second parameter are as follows:\n\naddIncludes#\n\n * Type: (includes: string | RegExp | Array) => void\n\nBy default, only the application code in the src directory will be compiled. Use\naddIncludes to specify ts-loader to compile some files under node_modules. For\nexample:\n\nexport default {\n  tools: {\n    tsLoader: (config, { addIncludes }) => {\n      addIncludes([/node_modules\\/react/]);\n    },\n  },\n};\n\n\naddExcludes#\n\n * Type: (excludes: string | RegExp | Array) => void\n\nContrary to addIncludes, specify ts-loader to exclude certain files when\ncompiling.\n\nFor example, without compiling files in the src/example directory:\n\nexport default {\n  tools: {\n    tsLoader: (config, { addExcludes }) => {\n      addExcludes([/src\\/example\\//]);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"tsLoader"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/ts-loader.mdx","_relativePath":"en/configure/app/tools/ts-loader.mdx"},{"id":189,"title":"tools.webpackChain","routePath":"/en/configure/app/tools/webpack-chain","lang":"en","toc":[{"text":"Utils","id":"utils","depth":3,"charIndex":790},{"text":"env","id":"env","depth":4,"charIndex":798},{"text":"isProd","id":"isprod","depth":4,"charIndex":1160},{"text":"target","id":"target","depth":4,"charIndex":1447},{"text":"isServer","id":"isserver","depth":4,"charIndex":1738},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":1987},{"text":"webpack","id":"webpack","depth":4,"charIndex":2257},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":4,"charIndex":2490},{"text":"getCompiledPath","id":"getcompiledpath","depth":4,"charIndex":2727},{"text":"CHAIN_ID","id":"chain_id","depth":4,"charIndex":3389},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":3,"charIndex":3881},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":3,"charIndex":4341},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":3,"charIndex":5257},{"text":"CHAIN_ID.MINIMIZER","id":"chain_idminimizer","depth":3,"charIndex":6952},{"text":"Examples","id":"examples","depth":3,"charIndex":7266},{"text":"Add/Modify/Delete loader","id":"add/modify/delete-loader","depth":4,"charIndex":7392},{"text":"Add/Modify/Delete plugin","id":"add/modify/delete-plugin","depth":4,"charIndex":7970}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.webpackChain.\n\n * Type: Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nYou can modify the webpack configuration by configuring tools.webpackChain which\nis type of Function. The function receives two parameters, the first is the\noriginal webpack chain object, and the second is an object containing some\nutils.\n\nCompared with tools.webpack, webpack-chain not only supports chained calls, but\nalso can locate built-in Rule or Plugin based on aliases, so as to achieve\nprecise config modification. We recommend using tools.webpackChain instead of\ntools.webpack.\n\n> tools.webpackChain is executed earlier than tools.webpack and thus will be\n> overridden by changes in tools.webpack.\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { env }) => {\n      if (env === 'development') {\n        chain.devtool('cheap-module-eval-source-map');\n      }\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { isProd }) => {\n      if (isProd) {\n        chain.devtool('source-map');\n      }\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current environment. For\nexample:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    webpackChain: (chain, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    webpackChain: (chain, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n    },\n  },\n};\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { webpack }) => {\n      chain.plugin('my-progress').use(webpack.ProgressPlugin);\n    },\n  },\n};\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { HtmlWebpackPlugin }) => {\n      console.log(HtmlWebpackPlugin);\n    },\n  },\n};\n\n\ngetCompiledPath#\n\n * Type: (name: string) => string\n\nGet the path to the builder built-in dependencies, such as:\n\n * sass\n * sass-loader\n * less\n * less-loader\n * css-loader\n * babel-loader\n * url-loader\n * file-loader\n * ...\n\nThis method is usually used when you need to reuse the same dependency with the\nbuilder.\n\nTIP\n\nBuilder built-in dependencies are subject to change with version iterations,\ne.g. generate large version break changes. Please avoid using this API if it is\nnot necessary.\n\nexport default {\n  tools: {\n    webpackChain: (chain, { getCompiledPath }) => {\n      const loaderPath = getCompiledPath('less-loader');\n      // ...\n    },\n  },\n};\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Builder, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nCHAIN_ID.RULE#\n\nID           DESCRIPTION\nRULE.MJS     Rule for mjs\nRULE.JS      Rule for js\nRULE.TS      Rule for ts\nRULE.CSS     Rule for css\nRULE.LESS    Rule for less\nRULE.SASS    Rule for sass\nRULE.PUG     Rule for pug\nRULE.TOML    Rule for toml\nRULE.YAML    Rule for yaml\nRULE.FONT    Rule for font\nRULE.IMAGE   Rule for image\nRULE.MEDIA   Rule for media\n\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.XXX can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG          Rules for SVG, automatic choice between data URI and\n                    separate file\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\n\nCHAIN_ID.USE#\n\nUSE.XXX can match a certain loader.\n\nID                     DESCRIPTION\nUSE.TS                 correspond to ts-loader\nUSE.CSS                correspond to css-loader\nUSE.LESS               correspond to less-loader\nUSE.SASS               correspond to sass-loader\nUSE.PUG                correspond to pug-loader\nUSE.TOML               correspond to toml-loader\nUSE.YAML               correspond to yaml-loader\nUSE.FILE               correspond to file-loader\nUSE.URL                correspond to url-loader\nUSE.SVGR               correspond to @svgr/webpack\nUSE.BABEL              correspond to babel-loader\nUSE.STYLE              correspond to style-loader\nUSE.POSTCSS            correspond to postcss-loader\nUSE.MARKDOWN           correspond to markdown-loader\nUSE.CSS_MODULES_TS     correspond to css-modules-typescript-loader\nUSE.MINI_CSS_EXTRACT   correspond to mini-css-extract-plugin.loader\n\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.XXX can match a certain webpack plugin.\n\nID                             DESCRIPTION\nPLUGIN.HMR                     correspond to HotModuleReplacementPlugin\nPLUGIN.COPY                    correspond to CopyWebpackPlugin\nPLUGIN.HTML                    correspond to HtmlWebpackPlugin, you need to splice the\n                               entry name when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.DEFINE                  correspond to DefinePlugin\nPLUGIN.IGNORE                  correspond to IgnorePlugin\nPLUGIN.BANNER                  correspond to BannerPlugin\nPLUGIN.PROGRESS                correspond to Webpackbar\nPLUGIN.APP_ICON                correspond to AppIconPlugin\nPLUGIN.LOADABLE                correspond to LoadableWebpackPlugin\nPLUGIN.MANIFEST                correspond to WebpackManifestPlugin\nPLUGIN.TS_CHECKER              correspond to ForkTsCheckerWebpackPlugin\nPLUGIN.INLINE_HTML             correspond to InlineChunkHtmlPlugin\nPLUGIN.BUNDLE_ANALYZER         correspond to WebpackBundleAnalyzer\nPLUGIN.BOTTOM_TEMPLATE         correspond to BottomTemplatePlugin\nPLUGIN.MINI_CSS_EXTRACT        correspond to MiniCssExtractPlugin\nPLUGIN.REACT_FAST_REFRESH      correspond to ReactFastRefreshPlugin\nPLUGIN.NODE_POLYFILL_PROVIDE   correspond to ProvidePlugin for node polyfills\nPLUGIN.INSPECTOR               correspond to @modern-js/inspector-webpack-plugin\nPLUGIN.SUBRESOURCE_INTEGRITY   correspond to webpack-subresource-integrity\nPLUGIN.ASSETS_RETRY            correspond to webpack static asset retry plugin in Builder\nPLUGIN.AUTO_SET_ROOT_SIZE      correspond to automatically set root font size plugin in\n                               Builder\n\n\nCHAIN_ID.MINIMIZER#\n\nMINIMIZER.XXX can match a certain minimizer.\n\nID                  DESCRIPTION\nMINIMIZER.JS        correspond to TerserWebpackPlugin\nMINIMIZER.CSS       correspond to CssMinimizerWebpackPlugin\nMINIMIZER.ESBUILD   correspond to ESBuildPlugin\nMINIMIZER.SWC       correspond to SwcWebpackPlugin\n\n\nExamples#\n\nThe following are some common configuration examples, see the full webpack-chain\nAPI webpack-chain documentation.\n\nAdd/Modify/Delete loader#\n\nexport default {\n  tools: {\n    webpackChain: (chain, { CHAIN_ID }) => {\n      // Add loader\n      chain.module\n        .rule('md')\n        .test(/\\.md$/)\n        .use('md-loader')\n        .loader('md-loader');\n\n      // Modify loader\n      chain.module\n        .rule(CHAIN_ID.RULE.JS)\n        .use(CHAIN_ID.USE.BABEL)\n        .tap(options => {\n          options.plugins.push('babel-plugin-xxx');\n          return options;\n        });\n\n      // Delete loader\n      chain.module.rule(CHAIN_ID.RULE.JS).uses.delete(CHAIN_ID.USE.BABEL);\n    },\n  },\n};\n\n\nAdd/Modify/Delete plugin#\n\nexport default {\n  tools: {\n    webpackChain: (chain, { webpack, CHAIN_ID }) => {\n      // Add plugin\n      chain.plugin('custom-define').use(webpack.DefinePlugin, [\n        {\n          'process.env': {\n            NODE_ENV: JSON.stringify(process.env.NODE_ENV),\n          },\n        },\n      ]);\n\n      // Modify plugin\n      chain.plugin(CHAIN_ID.PLUGIN.HMR).tap(options => {\n        options[0].fullBuildTimeout = 200;\n        return options;\n      });\n\n      // Delete plugin\n      chain.plugins.delete(CHAIN_ID.PLUGIN.HMR);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"webpackChain"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/webpack-chain.mdx","_relativePath":"en/configure/app/tools/webpack-chain.mdx"},{"id":190,"title":"tools.webpack","routePath":"/en/configure/app/tools/webpack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":390},{"text":"Function Type","id":"function-type","depth":3,"charIndex":683},{"text":"Utils","id":"utils","depth":3,"charIndex":1167},{"text":"env","id":"env","depth":4,"charIndex":1175},{"text":"isProd","id":"isprod","depth":4,"charIndex":1556},{"text":"target","id":"target","depth":4,"charIndex":1862},{"text":"isServer","id":"isserver","depth":4,"charIndex":2165},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":2431},{"text":"webpack","id":"webpack","depth":4,"charIndex":2718},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":3,"charIndex":2963},{"text":"addRules","id":"addrules","depth":3,"charIndex":3201},{"text":"prependPlugins","id":"prependplugins","depth":3,"charIndex":3781},{"text":"appendPlugins","id":"appendplugins","depth":3,"charIndex":4317},{"text":"removePlugin","id":"removeplugin","depth":3,"charIndex":4845},{"text":"mergeConfig","id":"mergeconfig","depth":3,"charIndex":5190},{"text":"getCompiledPath","id":"getcompiledpath","depth":3,"charIndex":5485}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.webpack.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\ntools.webpack is used to configure webpack.\n\n> tools.webpackChain is also used to modify the webpack configuration, and the\n> function is more powerful. It is recommended to use tools.webpackChain first.\n\n\nObject Type#\n\nYou can configure it as an object, which will be merged with the original\nwebpack configuration through webpack-merge. For example:\n\nexport default {\n  tools: {\n    webpack: {\n      resolve: {\n        alias: {\n          '@util': 'src/util',\n        },\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nYou can also configure it as a function, which accepts one parameter, the\noriginal webpack configuration, you can modify this configuration, and then\nreturn a new configuration. For example:\n\nexport default {\n  tools: {\n    webpack: config => {\n      config.resolve.alias['@util'] = 'src/util';\n      return config;\n    },\n  },\n};\n\n\nThe second parameter of this function is an object that contains some\ninformation about the tool collection. Details are as follows:\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { env }) => {\n      if (env === 'development') {\n        config.devtool = 'cheap-module-eval-source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { isProd }) => {\n      if (isProd) {\n        config.devtool = 'source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    webpack: (config, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    webpack: (config, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { webpack }) => {\n      config.plugins.push(new webpack.ProgressPlugin());\n      return config;\n    },\n  },\n};\n\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { HtmlWebpackPlugin }) => {\n      console.log(HtmlWebpackPlugin);\n    },\n  },\n};\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional webpack rules.\n\nFor example:\n\nexport default {\n  tools: {\n    webpack: (config, { addRules }) => {\n      // add a single rule\n      addRules({\n        test: /\\.foo/,\n        loader: require.resolve('foo-loader'),\n      });\n\n      // Add multiple rules as an array\n      addRules([\n        {\n          test: /\\.foo/,\n          loader: require.resolve('foo-loader'),\n        },\n        {\n          test: /\\.bar/,\n          loader: require.resolve('bar-loader'),\n        },\n      ]);\n    },\n  },\n};\n\n\n\nprependPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal webpack plugins array, and\nthe plugin will be executed first.\n\nexport default {\n  tools: {\n    webpack: (config, { prependPlugins, webpack }) => {\n      // add a single plugin\n      prependPlugins(\n        new webpack.BannerPlugin({\n          banner: 'hello world!',\n        }),\n      );\n\n      // Add multiple plugins\n      prependPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\n\nappendPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal webpack plugins array, the\nplugin will be executed last.\n\nexport default {\n  tools: {\n    webpack: (config, { appendPlugins, webpack }) => {\n      // add a single plugin\n      appendPlugins([\n        new webpack.BannerPlugin({\n          banner: 'hello world!',\n        }),\n      ]);\n\n      // Add multiple plugins\n      appendPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal webpack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal fork-ts-checker-webpack-plugin:\n\nexport default {\n  tools: {\n    webpack: (config, { removePlugin }) => {\n      removePlugin('ForkTsCheckerWebpackPlugin');\n    },\n  },\n};\n\n\n\nmergeConfig#\n\n * Type: (...configs: WebpackConfig[]) => WebpackConfig\n\nUsed to merge multiple webpack configs, same as webpack-merge.\n\nexport default {\n  tools: {\n    webpack: (config, { mergeConfig }) => {\n      return mergeConfig(config, {\n        devtool: 'eval',\n      });\n    },\n  },\n};\n\n\n\ngetCompiledPath#\n\n * Type: (name: string) => string\n\nGet the path to the builder built-in dependencies, same as\nwebpackChain#getCompiledPath.","frontmatter":{"sidebar_label":"webpack"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/tools/webpack.mdx","_relativePath":"en/configure/app/tools/webpack.mdx"},{"id":191,"title":"Configuring Modern.js","routePath":"/en/configure/app/usage","lang":"en","toc":[{"text":"Configure in the configuration file","id":"configure-in-the-configuration-file","depth":2,"charIndex":528},{"text":"modern.config.ts (recommended)","id":"modernconfigts-(recommended)","depth":3,"charIndex":745},{"text":"modern.config.js","id":"modernconfigjs","depth":3,"charIndex":1467},{"text":"Export Configuration Function","id":"export-configuration-function","depth":3,"charIndex":1878},{"text":"Export Async Function","id":"export-async-function","depth":3,"charIndex":2680},{"text":"Specify the Configuration File","id":"specify-the-configuration-file","depth":3,"charIndex":3039},{"text":"Configure in package.json (not recommended)","id":"configure-in-packagejson-(not-recommended)","depth":2,"charIndex":3504},{"text":"Note","id":"note","depth":3,"charIndex":4074},{"text":"Debug configuration locally","id":"debug-configuration-locally","depth":2,"charIndex":4398},{"text":"Example","id":"example","depth":3,"charIndex":4640},{"text":"Note","id":"note-1","depth":3,"charIndex":5354},{"text":"Merge Multiple Configurations","id":"merge-multiple-configurations","depth":2,"charIndex":5997},{"text":"Example","id":"example-1","depth":3,"charIndex":6463},{"text":"Configuration Type","id":"configuration-type","depth":2,"charIndex":6993}],"domain":"","content":"#\n\nThere are two configurations in the Modern.js, a compile configuration and a\nserver runtime configuration.\n\nThe compile configuration can be configured in two places:\n\n * modern.config.(ts|js|mjs) file in the root path\n * package.json file\n\nINFO\n\nConfigurations in both package.json and modern.config.ts file are not supported\nfor the same configuration. Configuration in modern.config.ts is recommended.\n\nServer runtime configuration can be configured in the\nmodern.server-runtime.config.(ts|js|mjs) file in the root path.\n\n\nConfigure in the configuration file#\n\nModern.js configuration files are defined in the root path of the project, and\nsupports .ts, .js and .mjs formats:\n\n * modern.config.ts\n * modern.config.js\n * modern.config.mjs\n\n\nmodern.config.ts (recommended)#\n\nWe recommend using configuration files in .ts format, which provides friendly\nTypeScript type hints to help you avoid configuration errors.\n\nImport the defineConfig tool function from @modern-js/app-tools, which will help\nyou with configuration type derivation and type completion:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n});\n\n\nWhen using Rspack as the bundler, due to some differences in configuration types\nbetween webpack and Rspack, you need to specify <'rspack'> generic type for\ndefineConfig:\n\nmodern.config.ts\n\n- export default defineConfig({\n+ export default defineConfig<'rspack'>({\n   //...\n});\n\n\n\nmodern.config.js#\n\nIf you are developing a non-TypeScript project, you can use the configuration\nfile in .js format:\n\nmodern.config.js\n\nexport default {\n  source: {\n    alias: opts => {\n      opts['@common'] = './src/common';\n    },\n  },\n};\n\n\nYou can also dynamically set it with process.env.NODE _ENV:\n\nmodern.config.js\n\nexport default {\n  server: {\n    ssr: process.env.NODE_ENV === 'development',\n  },\n};\n\n\n\nExport Configuration Function#\n\nModern.js supports exporting a function in the configuration file, and you can\ndynamically compute the configuration in the function and return it to\nModern.js.\n\nmodern.config.js\n\n\n\nexport default defineConfig(({ env, command }) => ({\n  source: {\n    alias: {\n      '@foo': env === 'development' ? './src/foo.dev.ts' : './src/foo.prod.ts',\n    },\n  },\n}));\n\n\nThis function takes the following parameters:\n\n * env: same as the value of process.env.NODE_ENV.\n   * When running modern dev or modern start, the value of env is development.\n   * When running modern build or modern serve, the value of env is production.\n   * When running modern test, the value of env is test.\n * command: corresponds to the currently running command, such as dev, start,\n   build, serve.\n\n\nExport Async Function#\n\nModern.js also supports exporting an asynchronous function in the configuration\nfile, you can perform some asynchronous operations in the function:\n\nmodern.config.js\n\n\n\nexport default defineConfig(async ({ env, command }) => {\n  const result = await someAsyncFunction();\n\n  return {\n    html: {\n      title: result,\n    },\n  };\n});\n\n\n\nSpecify the Configuration File#\n\nYou can specify the name of the configuration file using the --config option.\n\nFor example, if you need to use the modern.prod.config.js file when running\nbuild, you can add the following scripts to package.json:\n\npackage.json\n\n{\n  \"scripts\": {\n    \"dev\": \"modern dev\",\n    \"build\": \"modern build --config modern.prod.config.js\"\n  }\n}\n\n\nYou can also abbreviate the --config option to -c:\n\n$ modern build -c modern.prod.config.js\n\n\n\nConfigure in package.json (not recommended)#\n\nIn addition to configuration files, configuration options can also be set the\nmodernConfig field in the package.json, such as:\n\npackage.json\n\n{\n  \"modernConfig\": {\n    \"source\": {\n      \"alias\": {\n        \"@common\": \"./src/common\"\n      }\n    }\n  }\n}\n\n\nDue to the limitation of the JSON file format, only simple types such as\nnumbers, strings, boolean values, arrays, etc. can be defined in package.json.\nWhen we need to set the value of the function type, it is recommended to set it\nin the Modern.js configuration file.\n\n\nNote#\n\n * It is not recommended to use both package.json and modern.config.t[j]s for\n   configuration. If both are used and a configuration conflict occurs,\n   Modern.js will prompt error on the command line.\n * @modern-js/runtime exports the defineConfig API of the same name, please pay\n   attention to the distinction.\n\n\nDebug configuration locally#\n\nTo facilitate local debugging configuration locally, Modern.js supports creating\nmodern.config.local.(ts|js|mjs) files in the root directory of the project to\noverride modern.config.(ts|js|mjs) configurations.\n\n\nExample#\n\nFor example, the port number is configured as 3000 in modern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  server: {\n    port: 3000,\n  },\n});\n\n\nIf you need to change the port number to 3001 to debugging locally, but you\ndon't want to change the modern.config.ts file of the current project, you can\ncreate a modern.config.local.ts file and add the following configuration:\n\nmodern.config.local.ts\n\n\n\nexport default defineConfig({\n  server: {\n    port: 3001,\n  },\n});\n\n\nThe configuration in the modern.config.local.ts file will be deep merged with\nthe configuration in modern.config.ts and override the configurations in\nmodern.config.ts, so server.port will be is overridden by 3001.\n\n\nNote#\n\nWhen using modern.config.local.ts, please note the following:\n\n * The modern.config.local.ts file is only loaded when running modern dev or\n   modern start commands, and will not be loaded when running modern build.\n * The modern.config.local.ts file overrides not only over modern.config.ts, but\n   also the modernConfig field in package.json.\n * As modern.config.local.ts is only used for local debugging, it is not\n   recommended to commit it to the repository, please ensure that the project's\n   .gitignore file contains modern.config.local.ts.\n\n.gitingore\n\nmodern.config.local.ts\nmodern.config.local.js\nmodern.config.local.mjs\n\n\n\nMerge Multiple Configurations#\n\nIn some cases, you may need to merge multiple configurations into one\nconfiguration. You can use the mergeConfig util to merge multiple\nconfigurations.\n\nThe mergeConfig function accepts an array as a parameter, and each item in the\narray is a configuration object. mergeConfig will deeply merge each\nconfiguration object in the array, automatically merge multiple functions into\nan array, and returns a merged configuration object.\n\n\nExample#\n\nmodern.config.ts\n\n\n\nconst config1 = {\n   dev: {\n     port: 3000,\n   },\n   tools: {\n     postcss: () => console. log('config1');\n   },\n};\nconst config2 = {\n   dev: {\n     port: 3001,\n   },\n   tools: {\n     postcss: () => console. log('config2');\n   },\n};\n\nconst mergedConfig = mergeConfig([config1, config2]);\n\n\nIn the above example, the merged configuration object is:\n\nconst mergedConfig = {\n  dev: {\n    port: 3001,\n  },\n  tools: {\n    postcss: [() => console.log('config1'), () => console.log('config2')],\n  },\n};\n\n\n\nConfiguration Type#\n\nModern.js exports AppUserConfig type, which corresponds to the type of Modern.js\nconfiguration object:\n\nmodern.config.ts\n\n\n\nconst config: AppUserConfig = {\n  tools: {\n    webpack: {},\n  },\n};\n\n\nWhen using Rspack as the bundler, due to some differences in configuration types\nbetween webpack and Rspack, you need to specify <'rspack'> generic type for\ndefineConfig:\n\nmodern.config.ts\n\n\n\nconst config: AppUserConfig<'rspack'> = {\n  tools: {\n    rspack: {},\n  },\n};\n","frontmatter":{"sidebar_position":0},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/configure/app/usage.mdx","_relativePath":"en/configure/app/usage.mdx"},{"id":192,"title":"Use Proxy","routePath":"/en/guides/advanced-features/bff/bff-proxy","lang":"en","toc":[],"domain":"","content":"#\n\nBy configuring the BFF proxy, API requests can be forwarded without manual\ncoding\n\nCAUTION\n\nUsing a BFF proxy ensures that requests can enter the BFF handler. (eg the\nrequest path must contain a bff prefix)\n\nWriting the following BFF proxy configuration in the\nmodern.server-runtime.config.js file will proxy requests sent to\nhttp://localhost:8080/api/v1/topics to https://cnodejs.org/api/v1/topics.\n\nmodern.server-runtime.config.js\n\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api/v1/topics': 'https://cnodejs.org',\n    },\n  },\n};\n\n\nNOTE\n\nFor more detail, see bff.proxy. For more proxy info, see Proxy.","frontmatter":{"sidebar_position":5,"title":"Use Proxy"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/bff/bff-proxy.mdx","_relativePath":"en/guides/advanced-features/bff/bff-proxy.mdx"},{"id":193,"title":"Frameworks","routePath":"/en/guides/advanced-features/bff/frameworks","lang":"en","toc":[{"text":"Function Writing","id":"function-writing","depth":2,"charIndex":137},{"text":"Framework Writing","id":"framework-writing","depth":2,"charIndex":2137},{"text":"Express","id":"express","depth":3,"charIndex":2306},{"text":"Koa","id":"koa","depth":3,"charIndex":3006}],"domain":"","content":"#\n\nModern.js's BFF supports different runtime frameworks, currently Modern.js's BFF\nsupports two runtime frameworksExpress.js 和 Koa.js.\n\n\nFunction Writing#\n\nUnder the function writing, only the middleware writing method of various\nruntime frameworks is different, and other implementations are basically the\nsame. Take Express as an example to introduce how to write a middleware by hand\nin the api/_ app.ts and add permission verification:\n\n\n\n\nexport default hook(({ addMiddleware }) => {\n  addMiddleware(async (req: Request, res: Response, next: NextFunction) => {\n    if (req.url !== '/api/login') {\n      const sid = req?.cookies?.sid;\n      if (!sid) {\n        res.status(400);\n        res.json({ code: -1, message: 'need login' });\n      } else {\n        next();\n      }\n    } else {\n      next();\n    }\n  });\n});\n\n\nThen add a normal BFF function /api/hello.ts:\n\nexport default async () => {\n  return 'Hello Modern.js';\n};\n\n\nFinally, add the access code of the interface in the front-end src/App.tsx, and\ncall it directly in an integrated way:\n\n\n\n\nexport default () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    async function fetchMyApi() {\n      const { message } = await hello();\n      setText(message);\n    }\n\n    fetchMyApi();\n  }, []);\n\n  return \n\n{text};\n};\n\n\nThen exec pnpm run dev starts the project, and accessing http://localhost:8080/\nwill find that the request for'/api/hello 'is blocked:\n\n\n\nFinally, modify the front-end code src/App.tsx to call the login interface\nbefore accessing /api/hello:\n\n\n\n\n\nexport default () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    async function fetchAfterLogin() {\n      const { code } = await login();\n      if (code === 0) {\n        const { message } = await hello();\n        setText(message);\n      }\n    }\n    fetchAfterLogin();\n  }, []);\n\n  return \n\n{text};\n};\n\n\nRefresh the page and you can see that /api/hello was accessed successfully:\n\n\n\nThe above code simulates the way to add middleware to the /api/_app.ts to\nachieve an easy login function. Also, other functions can be implemented in this\nhook file to extend BFF Server.\n\n\nFramework Writing#\n\nUnder the framework writing, Modern.js does not collect middleware in the\napi/_app.ts, and the running process is controlled by the plugin itself.\n\n\nExpress#\n\nThe framework writing of Express supports defining the startup logic of API\nServer in api/app.[tj]s. performing the initialization work of the application,\nadding global middleware, declaring routes, and even extending the original\nframework.\n\nThe route defined by the BFF function will be registered after the route defined\nby the app.ts file, so here you can also intercept the route defined by the BFF\nfunction, preprocess or respond in advance.\n\napi/app.ts\n\n\n\nconst app = express();\n\napp.put('/user', function (req, res) {\n  res.send('Got a PUT request at /user');\n});\n\napp.use(async (req, res, next) => {\n  console.info(`access url: ${req.url}`);\n  next();\n});\n\nexport default app;\n\n\n\nKoa#\n\nThe Koa framework is written in a similar way to Express. It supports defining\nthe startup logic of API Server in app.[tj]s, performing the initialization work\nof the application, adding global middleware, declaring routes, extending the\noriginal framework, etc.\n\nThe route defined by the BFF function will be registered after the route defined\nby the app.ts file, so here you can also intercept the route defined by the BFF\nfunction, preprocess or respond in advance.\n\nCAUTION\n\nUse the framework writing, when there is no app.ts, Modern.js will add koa-body\nby default. When there is app.ts, if the developer wants to use the BFF function\nwith Body, he needs to ensure that the koa-body middleware has been added.\n\napi/app.ts\n\n\n\nconst app = new Koa();\n\napp.put('/user', function (req, res) {\n  res.send('Got a PUT request at /user');\n});\n\napp.use(async (ctx, next) => {\n  console.info(`access url: ${ctx.url}`);\n  await next();\n});\n\nexport default app;\n","frontmatter":{"sidebar_position":3,"title":"Frameworks"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/bff/frameworks.mdx","_relativePath":"en/guides/advanced-features/bff/frameworks.mdx"},{"id":194,"title":"Basic Usage","routePath":"/en/guides/advanced-features/bff/function","lang":"en","toc":[{"text":"Enable BFF","id":"enable-bff","depth":2,"charIndex":267},{"text":"BFF Function","id":"bff-function","depth":2,"charIndex":281},{"text":"API Routes","id":"api-routes","depth":2,"charIndex":1253},{"text":"Default Route","id":"default-route","depth":3,"charIndex":1790},{"text":"Multi-layer Route","id":"multi-layer-route","depth":3,"charIndex":1938},{"text":"Dynamic Route","id":"dynamic-route","depth":3,"charIndex":2174},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":2409},{"text":"RESTful API","id":"restful-api","depth":2,"charIndex":2797},{"text":"Function Named Export","id":"function-named-export","depth":3,"charIndex":3544},{"text":"Function Parameter Rule","id":"function-parameter-rule","depth":3,"charIndex":4744},{"text":"Dynamic Path","id":"dynamic-path","depth":4,"charIndex":5053},{"text":"RequestOption","id":"requestoption","depth":4,"charIndex":5708}],"domain":"","content":"#\n\nApplications developed with Modern.js can define API functions in the api/\ndirectory, which can be called by the front-end to send requests without writing\nfront and back-end glue layer code, At the same time, it ensures the type safety\nof the front and back end\n\n\nEnable BFF#\n\n\nBFF Function#\n\nThe functions that are allowed to be called through integration are called BFF\nfunctions. Here is the simplest BFF function to write, creating an api/hello.ts\nfile:\n\napi/hello.ts\n\nexport const get = async () => 'Hello Modern.js';\n\n\nThen directly import the function in src/App.tsx and call:\n\nsrc/App.tsx\n\n\n\n\nexport default () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    hello().then(setText);\n  }, []);\n  return \n{text};\n};\n\n\nINFO\n\nModern.js generator has already configured the @api alias in tsconfig.json, so\nyou can import functions directly by aliases.\n\nThe functions import in src/App.tsx will be automatically converted into\ninterface calls, so there is no need to call the interface through fetch.\n\nExecute pnpm run dev, then open http://localhost:8080/ to see that the page has\ndisplayed the content returned by the BFF function. In Network, you can see that\nthe page sent a request to http://localhost:8080/api/hello.\n\n\n\n\nAPI Routes#\n\nIn Modern.js, the BFF function routing system is implemented based on the file\nsystem, and it is also a conventional routing system.\n\nIn Function Writing, All files under api/ will map to an interface. In Framework\nWriting, All files under api/lambda will map to an interface\n\nNOTE\n\nFunction Writing & Framework Writing will introduce soon.\n\nAll routes generated by BFF functions have a prefix, and the default value is\n/api. The prefix can be set through bff.prefix.\n\nSeveral routing conventions are described as follow.\n\n\nDefault Route#\n\nFiles named index.[jt]s are mapped to the previous directory.\n\n * api/index.ts -> {prefix}/\n * api/user/index.ts -> {prefix}/user\n\n\nMulti-layer Route#\n\nSupports parsing nested files, if you create a nested folder structure, the\nfiles will still automatically parse routes in the same way.\n\n * api/hello.ts -> {prefix}/hello\n * api/user/list.ts -> {prefix}/user/list\n\n\nDynamic Route#\n\nCreate folders or files named with [xxx] to support dynamic named routing\nparameters.\n\n * api/user/[username]/info.ts -> {prefix}/user/:username/info\n * api/user/username/[action].ts -> {prefix}/user/username/:action\n\n\nAllow List#\n\nBy default, all files in the'api/'directory will be parsed as BFF function\nfiles, but the following files will not be parsed:\n\n * file name start with _, for example _utils.ts.\n * files in directory which name start with _, for example\n   _utils/index.ts、_utils/cp.ts.\n * test files, for example foo.test.ts.\n * type files, for example hello.d.ts.\n * files in node_module.\n\n\nRESTful API#\n\nModern.js BFF functions need to be defined according to the RESTful API\nstandard, follow the HTTP Method specification, and do not allow free parameter\ndefinition.\n\nINFO\n\nAssuming that the function allows free definition of parameters, the resulting\nroute must be called by the private protocol (the reason is that the request\nparameters cannot be distinguished from the request body), and cannot implement\nany RESTful API.\n\nIf the service is only used for the application itself, there is no problem. but\nits non-standard interface definition cannot be integrated into the larger\nsystem. In the case of multiple systems working together (such as BFF low-code\nconstruction), other systems also need to follow the private protocol.\n\n\nFunction Named Export#\n\nModern.js the export name of the BFF function determines the Method of the\ncorresponding interface of the function, such as get, post and so on.\n\nFor example, following the example, a GET interface can be exported.\n\nexport const get = async () => {\n  return {\n    name: 'Modern.js',\n    desc: 'Web engineering system',\n  };\n};\n\n\nFollowing the example below, a POST interface can be exported.\n\nexport const post = async () => {\n  return {\n    name: 'Modern.js',\n    desc: 'Web engineering system',\n  };\n};\n\n\n * Modern.js supports 9 definitions for HTTP Method:\n   GET、POST、PUT、DELETE、CONNECT、TRACE、PATCH、OPTION、HEAD, can be exported using\n   these methods as functions.\n\n * The name is size insensitive, if GET, can write get、Get、GEt、GET, can be\n   accurately identified. But default export as export default xxx will be map\n   to Get.\n\n * Multiple functions of different Methods can be defined in one file, but if\n   multiple functions of the same Method are defined, only the first will take\n   effect.\n\nINFO\n\nIt should be noted that the defined functions should all be asynchronous, which\nis related to the type when the function is called, which will be mentioned\nlater.\n\n\nFunction Parameter Rule#\n\nAs mentioned above, in order to meet the design criteria of RESTful APIs, the\nBFF function in Modern.js needs to follow certain imported parameter rules.\n\nThe function parameters are divided into two parts, the dynamic part in the\nrequest path and the request option RequestOption.\n\nDynamic Path#\n\nDynamic routing will be used as imported parameters in the first part of the\nfunction, and each imported parameter corresponds to a dynamic route. For\nexample, in the following example, uid will be passed into the function as the\nfirst two parameters:\n\napi/[level]/[id].ts\n\nexport default async (level: number, id: number) => {\n  const userData = await queryUser(level, uid);\n  return userData;\n};\n\n\nPass dynamic parameters directly when calling:\n\nApp.tsx\n\n\n\n\nexport default () => {\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    getUser(6, 001).then(userData => setName(userData.name));\n  }, []);\n\n  return \n{name};\n};\n\n\nRequestOption#\n\nThe parameter after Dynamic Path is the object RequestOption containing\nquerystring and request body, which is used to define the types of data and\nquery.\n\nIn normal functions without dynamic routing, the incoming data and query can be\nobtained from the first imported parameter, for example:\n\napi/hello.ts\n\n\n\nexport async function post({\n  query,\n  data,\n}: RequestOption, Record>) {\n  // do somethings\n}\n\n\nWhen a function file uses dynamic routing rules, dynamic routing before the\nRequestOption parameter.\n\napi/[sku]/[id]/item.ts\n\nexport async function post(\n  sku: string,\n  id: string,\n  {\n    data,\n    query,\n  }: RequestOption, Record>,\n) {\n  // do somethings\n}\n\n\nAlso pass in the parameters according to the function definition:\n\nApp.tsx\n\n\n\nexport default () => {\n  const addSku = () => {\n    post('0001' /* sku */, '1234' /* id */, {\n      query: {\n        /* ... */\n      },\n      data: {\n        /* ... */\n      },\n    });\n  };\n\n  return \n添加 SKU;\n};\n\n\nAs mentioned earlier, the defined functions should be asynchronous because they\nare automatically converted to HTTP interface calls when called by the front\nend.\n\nso in order to keep the type definition consistent with the actual calling, it\nis necessary to set the BFF function to asynchronous when defining it.","frontmatter":{"sidebar_position":1,"title":"Basic Usage"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/bff/function.mdx","_relativePath":"en/guides/advanced-features/bff/function.mdx"},{"id":195,"title":"BFF","routePath":"/en/guides/advanced-features/bff/","lang":"en","toc":[],"domain":"","content":"#\n\nIn the development of the concept of front back separation, the front-end part\ncan do more and more things, and the front-end needs some UI-oriented data\ninterfaces, so the industry introduced the concept of BFF (Backends for\nFrontends).\n\nThe main problems it to solve include:\n\n * Aggregation, mapping, clipping, and proxying of lower-level APIs according to\n   their own business needs.\n * Cache data for some specific scenarios to improve performance and thus\n   improve user experience.\n * Quickly development of new products based on existing interfaces.\n * Interface with third-party systems, such as login authentication.\n\nModern.js officially supported the BFF and provided the Integrated BFF to\nfurther strengthen the BFF's capabilities, mainly including the following\ncapabilities:\n\n * Quick development and debugging go live, running, building, and deploying BFF\n   code in the same project.\n * Minimal pure function call, directly import BFF function on the front end,\n   and can be automatically converted into HTTP request when called.\n * No private protocol, follow RESTful API specification, all BFF interfaces are\n   standardized.\n * Full TypeScript support.\n * Meet user preferences and support multi-frame extension writing.","frontmatter":{"title":"BFF"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/bff/index.mdx","_relativePath":"en/guides/advanced-features/bff/index.mdx"},{"id":196,"title":"Writing Type","routePath":"/en/guides/advanced-features/bff/type","lang":"en","toc":[{"text":"Function Writing","id":"function-writing","depth":2,"charIndex":614},{"text":"Framework Writing","id":"framework-writing","depth":2,"charIndex":1122}],"domain":"","content":"#\n\nRuntime framework support is also an important part of BFF. Modern.js supports\nextending BFF's runtime framework through plugins, and provides a series of\nbuilt-in plugins, developers can directly use the conventions and ecology of the\nframework.\n\nThe plugin is compatible with most of the specifications of these frameworks,\nand each framework needs to provide two types of ways to extend the writing of\nBFF functions, namely Function Writing and Framework Writing.\n\nNOTE\n\nWhether the current api/ directory structure is written as a framework is\ndetermined by the corresponding plugin, Modern.js don't care.\n\n\nFunction Writing#\n\nWhen the plugin considers that it is currently written as a function, it must\nsupport writing middleware in the api/_ app.ts to extend the BFF function.\n\nModern.js collects the middleware in the api/_app.ts and passes it to the\nplugin, which injects the middleware into the runtime, for example:\n\n\n\nexport default hook(({ addMiddleware }) => {\n  addMiddleware(myMiddleware);\n});\n\n\nNOTE\n\nThe writing of middleware for different plugins is not the same, see Runtime\nFramework for details.\n\n\nFramework Writing#\n\nFramework writing is a way of using frame structure to extend BFF functions.\nCompared with function writing, although frame writing can use more frame\nstructure and make the entire BFF Server clearer in complex scenarios, it is\nalso more complex and requires more attention to the content at the framework\nlevel.\n\nIn the framework writing method, all BFF functions need to be written in the\napi/lambda/ directory, and the hook file _app.[tj]s cannot be used.\n\nIn most cases, the function writing method can cover the customization\nrequirements of most BFF functions. Only when your project server level logic is\nmore complex, the code needs to be layered, or you need to use more elements of\nthe framework, you need to use the framework writing method.\n\nNOTE\n\nThe directory structure of different plugin frameworks is not the same, see\nRuntime Frameworks for details.","frontmatter":{"sidebar_position":2,"title":"Writing Type"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/bff/type.mdx","_relativePath":"en/guides/advanced-features/bff/type.mdx"},{"id":197,"title":"Code Split","routePath":"/en/guides/advanced-features/code-split","lang":"en","toc":[{"text":"import","id":"import","depth":2,"charIndex":362},{"text":"React.lazy","id":"reactlazy","depth":2,"charIndex":676},{"text":"loadable","id":"loadable","depth":2,"charIndex":1173}],"domain":"","content":"#\n\nCode Split is a common way to optimizing front-end resource loading. This doc\nwill introduce three methods supported by Modern.js:\n\nINFO\n\nWhen you use Modern.js Conventional routing, by default it will do code\nsplitting based on routing components, wrapping Suspense components, no need to\ndo code splitting by yourself.\n\n * import\n * React.lazy\n * loadable\n\n\nimport#\n\nuse dynamic import(), import The JS modules pass to this API will be packaged\ninto a separate JS file as a new packaging entry, for example:\n\nimport('./math').then(math => {\n  console.log(math.add(16, 26));\n});\n\n\nThe JS modules corresponding to the './math' path will be packaged in a separate\nJS file.\n\n\nReact.lazy#\n\nThe officially way provides by React to split component code.\n\nCAUTION\n\nSSR is not supported in React 17 and below, and it is recommended that SSR\napplications for React 17 use loadable.\n\n\n\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nfunction MyComponent() {\n  return (\n    \n\n      Loading...}>\n        \n\n          \n          \n        \n      \n    \n\n); }\n\nFor detail, see React lazy.\n\n\nloadable#\n\nuse loadable API, for example:\n\n\n\nconst OtherComponent = loadable(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return ;\n}\n\n\nFor detail, see loadable API.\n\nINFO\n\nSSR is supported out of the box by loadable.","frontmatter":{"title":"Code Split","sidebar_position":6},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/code-split.mdx","_relativePath":"en/guides/advanced-features/code-split.mdx"},{"id":198,"title":"Compatibility","routePath":"/en/guides/advanced-features/compatibility","lang":"en","toc":[{"text":"Browserslist","id":"browserslist","depth":2,"charIndex":3},{"text":"Polyfill","id":"polyfill","depth":2,"charIndex":749},{"text":"Polyfill At Compile","id":"polyfill-at-compile","depth":3,"charIndex":761},{"text":"Polyfill At Runtime","id":"polyfill-at-runtime","depth":3,"charIndex":1417}],"domain":"","content":"#\n\n\nBrowserslist#\n\nModern.js supports the browserslist field in the package.json file, or a\n.browserslistrc file to specify the target browser range covered by the project.\n\nThis value is used by ['@babel/preset-env']\n(https://babeljs.io/docs/en/babel-preset-env) and ['autoprefixer']\n(https://github.com/postcss/autoprefixer) to determine the JavaScript syntax\nfeatures to be converted and the CSS browser prefix to be added.\n\nThe default value in Modern.js as follow:\n\n['> 0.01%', 'not dead', 'not op_mini all'];\n\n\nYou can learn how to customize the browserslist here.\n\nSee Modern.js Builder docs to learn more Browserslist info.\n\nNOTE\n\nModern.js also supports configuring output.override Browserslist to override the\ndefault browserslist value.\n\n\nPolyfill#\n\n\nPolyfill At Compile#\n\nModern.js inject the Polyfill code via [core-js]\n(https://github.com/zloirock/core-js) at compile time by default.\n\nBy default, the required Polyfill code will be introduced according to the\nsettings of the Browserslist, so there is no need to worry about the Polyfill\nproblem of the project source code and third-party dependencies, but because it\ncontains some Polyfill code that is not used, the final bundle size may be\nincreased.\n\nINFO\n\nFor case where Polyfill is not required for third-party dependencies, you can\nset 'output.polyfill' to usage, so that Babel compiles only Polyfill code based\non the syntax used in the code.\n\n\nPolyfill At Runtime#\n\nModern.js also provides a runtime Polyfill solution based on browser UA\ninformation, which has the following advantages over Babel:\n\n * It will not be inserted into the code, reducing the code .\n * The same browser will share a Polyfill code. Therefore, with more and more\n   projects, the UA-based Polyfill code will be delivered faster and faster.\n\nexec pnpm run new to enable this features:\n\n? Action Enable features\n? Enable features Enable UA-based Polyfill Feature\n\n\nAfter executing the command, register the Polyfill plugin in modern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [..., polyfillPlugin()],\n});\n\n\nAfter configuring output.polyfill as ua and executing pnpm run build & & pnpm\nrun serve to start the server, visiting the page can see that the HTML product\ncontains the following script:\n\n\n\n\nVisit the page http://localhost:8080/__polyfill__ on Chrome 51 to see:\n\n\n\nCAUTION\n\nThis feature only works when using Modern.js built-in Web Server.\n\nIf you need to customize the HTML template, please refer to HTML Template.\nManually modifying the template through html.template / tools.html will cause\nthis feature not work.","frontmatter":{"title":"Compatibility","sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/compatibility.mdx","_relativePath":"en/guides/advanced-features/compatibility.mdx"},{"id":199,"title":"ESLint","routePath":"/en/guides/advanced-features/eslint","lang":"en","toc":[{"text":"Q: How To Deal With Lint","id":"q:-how-to-deal-with-lint","depth":2,"charIndex":227},{"text":"Automatic Fix","id":"automatic-fix","depth":3,"charIndex":255},{"text":"Batch Automatic Fix","id":"batch-automatic-fix","depth":3,"charIndex":639},{"text":"Manual Fix","id":"manual-fix","depth":3,"charIndex":821},{"text":"Claim Exceptions","id":"claim-exceptions","depth":3,"charIndex":1037},{"text":"Q: How to customize ESLint rules","id":"q:-how-to-customize-eslint-rules","depth":2,"charIndex":2114},{"text":"The eslintConfig field in package.json in the root directory","id":"the-eslintconfig-field-in-packagejson-in-the-root-directory","depth":3,"charIndex":2150},{"text":"src/.eslintrc.js","id":"src/eslintrcjs","depth":3,"charIndex":2737},{"text":"eslintIgnore field in package.json","id":"eslintignore-field-in-packagejson","depth":3,"charIndex":3886},{"text":"Q: How to upgrade the version of the ESLint plugin","id":"q:-how-to-upgrade-the-version-of-the-eslint-plugin","depth":2,"charIndex":4183},{"text":"Q: WebStorm sometimes reports ESLint errors","id":"q:-webstorm-sometimes-reports-eslint-errors","depth":2,"charIndex":5197}],"domain":"","content":"#\n\nModern.js ESLint Rules is the full set of ESLint rules, includes @modern-js\n(Lint rules for Node.js projects) and @modern-js-app (Lint rules for web\nprojects).\n\nMore ESLint usage is described below with specific questions.\n\n\nQ: How To Deal With Lint#\n\n\nAutomatic Fix#\n\nMost problems will be solved by the automatic fix of ESLint rules or the code\nformatting of Prettier (which has been integrated into ESLint), and the\ndeveloper does not need to care about the details of the problem and how to\nsolve it.\n\nINFO\n\nThis kind of automatic fix is mainly performed when the IDE saves the file, and\na few will be automatically fix on submit.\n\n\nBatch Automatic Fix#\n\nIn rare cases, such as when an old project is migrated, the following commands\ncan be executed to repair and inspect all files in bulk:\n\npnpm run lint:error\n\n\n\nManual Fix#\n\nFor problems that cannot be automatically fixed, you can click the rule link in\nthe problem prompt box in the IDE to open the document of this rule to view the\nexplanation and solution of the problem.\n\n\nClaim Exceptions#\n\nAt this stage, some rules are not smart enough, and in most cases there will be\ngreat benefits, and in a few cases it may not apply. But if the entire rule is\nturned off or changed for these few cases, the gain is not worth the loss.\n\nIn this case, you can use the eslint-disable comment to mark the code blocks\nthat meet the rare case, stating that this is an exception and should be\nignored. For example:\n\n/* eslint-disable filenames/match-exported */\n...\n/* eslint-enable filenames/match-exported */\n\n\nINFO\n\nEnter eslint in the VS Code editor, a prompt box about eslint-disable will\nautomatically appear, select the prompt option to generate the corresponding\ncomment pair.\n\n[Modern.js ESLint Rule Set] requires that eslint-disable must be used in pairs,\nthe scope to be affected must be clearly expressed, and what rules to disable\nwithin this scope must be clearly expressed, the purpose is to make exceptions\nClear, minimized scope to avoid abuse of eslint-disable, resulting in code that\ndoes not belong to the exception being disabled by the rule.\n\n\nQ: How to customize ESLint rules#\n\n\nThe eslintConfig field in package.json in the root directory#\n\nThis place is the default ESLint configuration for the entire repository and is\ndesigned for pure Node.js code (which can only run in Node.js).\n\nIf the project does have special requirements or inevitable compatibility issues\nwith some rules (not exceptions), you can add rule configuration here. This\nconfiguration will take precedence over the default [Modern.js ESLint ruleset],\nsuch as:\n\n \"eslintConfig\": {\n    \"extends\": [\n      \"@modern-js\"\n    ],\n    \"rules\": {\n      \"filenames/match-exported\": \"off\"\n    }\n  },\n\n\n\n\nsrc/.eslintrc.js#\n\nThe application project and module project of Modern.js will have this\nconfiguration file by default in the source code directory, which is designed\nfor Universal JS code.\n\nINFO\n\nUniversal JS code is code that can run on both the browser side and the server\nside.\n\nIf the project does have special requirements or inevitable compatibility issues\nwith some rules (not exceptions), you can add a rule configuration here, which\nwill take precedence over the default [Modern.js ESLint ruleset], such as:\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = {\n  root: true,\n  extends: ['@modern-js-app'],\n  parserOptions: {\n    tsconfigRootDir: __dirname,\n    project: ['../tsconfig.json'],\n  },\n  rules: {\n    'filenames/match-exported': 'off',\n  },\n};\n\n\nIf necessary, you can continue to add the .eslintrc.js file in different\nsubdirectories, and make special configuration for the code in this\nsubdirectory:\n\nmodule.exports = {\n  rules: {\n    'filenames/match-exported': 'off',\n  },\n};\n\n\nTIP\n\nNote: It is not necessary to use the extends field, it will automatically\ninherit the configuration of the parent directory.\n\n\neslintIgnore field in package.json#\n\nAdding directories that contain .js, .jsx, .ts, .tsx files, but do not require\ncode inspection and automatic repair, to eslintIgnore can optimize the speed of\nESLint inspection, such as:\n\n \"eslintIgnore\": [\n    \"node_modules\",\n    \"dist\",\n    \"output\"\n  ],\n\n\n\nQ: How to upgrade the version of the ESLint plugin#\n\nAs long as it is not a change in the Major version (the \"^\" symbol that does not\ncomply with the Semver rule), you can specify this dependency directly in the\npackage.json of the business project, delete the Lock file (or try to manually\ndelete the Lock file). the contents of this package name in the file), execute\npnpm install to reinstall the dependency and generate a new Lock file.\n\nAfter doing this, the plugin should only exist in the ./node_modules directory\nof the business project and be upgraded to the version you specified.\n\nTIP\n * Major version is the major version number. For more information, please read\n   [Semantic Versioning ].\n * All upstream projects encapsulated by Modern.js (such as ESLint, ESLint\n   plugin, React Router, etc.) can also be upgraded in this way.\n * Modern.js will also try to upgrade these upstream dependencies as timely as\n   possible in each release.\n * Major version upgrades need to be published by Modern.js.\n\n\nQ: WebStorm sometimes reports ESLint errors#\n\nSince WebStorm believes that the ESLint execution directory is determined based\non the .eslintrc' file. Therefore, the placement of the src/.eslintrc file\nlocation will cause the location specified by the tsconfig.json file (in the\nproject root directory) to not be found in the'src/'directory.\n\nyou need to configure it manually:\n\n--parser-options=project:../tsconfig.json\n\n\n","frontmatter":{"title":"ESLint","sidebar_position":8},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/eslint.mdx","_relativePath":"en/guides/advanced-features/eslint.mdx"},{"id":200,"title":"Low-Level Tools","routePath":"/en/guides/advanced-features/low-level","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":3},{"text":"Low-level Configuration Details","id":"low-level-configuration-details","depth":2,"charIndex":915}],"domain":"","content":"#\n\n\nUsage#\n\nModern.js internally integrates tools such as Babel, TypeScript, Webpack,\nPostCSS, Tailwind CSS by default.\n\nUsually, the default configuration can meet most development needs. When there\nare special needs, it can be achieved through the underlying configuration.\n\nTake configuring Webpack as an example, just add tools.webpack to the\nmodern.config.ts:\n\nmodern.config.ts\n\nexport default defineConfig({\n  tools: {\n    webpack: config => {},\n  },\n});\n\n\nConfigurations in the tools can be set to Object or Function.\n\nWhen the value is Object, it will be merged with the default configuration. For\nthe specific merging strategy, refer to the configuration options document (see\ntable below).\n\nWhen the value is Function, the first parameter is the default configuration\nvalue. You can directly modify this object without returning it, or you can\nreturn a new object or a merged object as the final result.\n\n\nLow-level Configuration Details#\n\nCurrently provided is as follows:\n\nTOOLS               CONFIG\nDevServer           tools.devServer\nBabel               tools.babel\nstyled-components   tools.styledComponents\nPostCSS             tools.postcss\nLess                tools.less\nSass                tools.sass\nwebpack             tools.webpack\nMinify CSS          tools.minifyCss\nterser              tools.terser\nTailwind CSS        tools.tailwind\nAutoprefixer        tools.autoprefixer","frontmatter":{"title":"Low-Level Tools","sidebar_position":11},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/low-level.mdx","_relativePath":"en/guides/advanced-features/low-level.mdx"},{"id":201,"title":"Using Rspack","routePath":"/en/guides/advanced-features/rspack-start","lang":"en","toc":[{"text":"Initializing an Rspack project","id":"initializing-an-rspack-project","depth":2,"charIndex":711},{"text":"Migrating from webpack to Rspack","id":"migrating-from-webpack-to-rspack","depth":2,"charIndex":1335}],"domain":"","content":"#\n\nWhat is Rspack\n\nRspack is a high performance Rust-based JavaScript bundler that offers strong\ninteroperability with the webpack ecosystem, enabling faster development cycles\nand efficient collaboration between the two tools.\n\nRspack's build performance is significantly better than Webpack, not only due to\nthe language benefits of Rust, but also due to its parallel architecture and\nincremental compilation features. Benchmarking has shown that Rspack can deliver\na 5-10x improvement in compilation performance.\n\nModern.js provides out-of-the-box Rspack support, so you can switch between the\nstable Webpack and the faster Rspack.\n\nThis document will show you how to enable Rspack build mode in Modern.js.\n\n\nInitializing an Rspack project#\n\nThe Modern.js generator provides an interactive question-and-answer interface to\ninitialize a project. To create an Rspack project, simply select the Rspack\nbuild tool by running:\n\nAfter the project is created, you can experience the project by running pnpm run\ndev. For more project information, please refer to Quick Start.\n\nTIP\n\nWhen using Rspack as the bundler, the following Features are temporarily\nunavailable as some of the capabilities are still under development and we will\nprovide support in the future.\n\n * Storybook Devtool\n * The usage of useLoader in Client Side Rendering\n\n\nMigrating from webpack to Rspack#\n\nYou can enable Rspack build by running pnpm run new:\n\n$ pnpm run new\n? Action: Enable features\n? Enable features: Enable Rspack Build\n\n\nAfter executing the command, enable the Rspack build in modern.config.ts:\n\nmodern.config.ts\n\n\n\n+ export default defineConfig<'rspack'>({\n  plugins: [\n    appTools({\n+     bundler: 'experimental-rspack',\n    }),\n  ],\n});\n\n\nTIP\n\nWhen migrating from webpack to Rspack, there may have some differences in build\nand configuration capabilities. For more details, please refer to Configuration\nDifferences.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/rspack-start.mdx","_relativePath":"en/guides/advanced-features/rspack-start.mdx"},{"id":202,"title":"Static Site Generation","routePath":"/en/guides/advanced-features/ssg","lang":"en","toc":[{"text":"Conventional Routing","id":"conventional-routing","depth":3,"charIndex":505},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":3,"charIndex":2289}],"domain":"","content":"#\n\nStatic Site Generation is a solution for rendering complete static web pages at\nbuild time based on data and templates.\n\nFirst need to execute pnpm run new to enable the SSG features:\n\n? Action Enable features\n? Enable features Enable SSG\n\n\nAfter execute script, register SSG plugin in modern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  output: {\n    ssg: true,\n  },\n  plugins: [..., ssgPlugin()],\n});\n\n\nSSG in Conventional Routing and Self-controlled Routing has different usage.\n\n\nConventional Routing#\n\nModern.js generate routes based on the file structure under the entry, so the\nframework can collect complete routing information.\n\nFor example, the following is a project directory structure using conventional\nrouting:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       ├── page.tsx\n│       └── user\n│           ├── layout.tsx\n│           ├── page.tsx\n│           └── profile\n│               └── page.tsx\n\n\nThe above file directory will generate the following three routes:\n\n * /\n * /user\n * /user/profile\n\nNOTE\n\nIf you don't know the rules for routing, you can first check routes.\n\nadd component to src/routes/page.tsx:\n\nsrc/routes/page.tsx\n\nexport default () => {\n  return \nIndex Page;\n};\n\n\nSSG is also render in Node.js. So we can enable SSR in developmenet env, expose\ncode problems in advance and verify SSG rendering effect:\n\nmodern.config.ts\n\nexport default defineConfig({\n  server: {\n    ssr: process.env.NODE_ENV === 'development',\n  }\n}\n\n\nExecute the pnpm run dev command in the project to view the dist/ directory, and\nonly generate an HTML file main/index.html.\n\nExecute the pnpm run build command in the root path of the project. After the\nconstruction is completed, view the dist/ directory, and generate\nmain/index.html, main/user/index.html and main/user/profile/index.html three\nHTML files, the content corresponds to the above three routes.\n\nUsing Conventional Routing, each route will generate a HTML file. Looking at the\nmain/index.html, we can find the text content containing the Index Page, which\nis exactly the effect of SSG.\n\nAfter executing pnpm run serve to start the project, visit the page in the\nNetwork, view the document returned by the request. The document contains the\ncomplete page content rendered by the component.\n\n\nSelf-controlled Routing#\n\nSelf-controlled routing is a routing through component code, which requires the\napplication to run to obtain accurate routing information. Therefore, the SSG\nfunction cannot be used out of the box. At this time, the user needs to inform\nthe Modern.js framework in advance which routes need to enable the SSG.\n\nFor example, there is the following code, which contains multiple routes. When\nsetting output.ssg to true, only the entry route '/' will be rendered by\ndefault:\n\nIf we want to enable the SSG of /about at the same time, we can configure the\noutput.ssg to tell Modern.js to enable the SSG of the specified route.\n\nmodern.config.ts\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      routes: ['/', '/about'],\n    },\n  },\n});\n\n\nrun pnpm run build and pnpm run serve, access http://localhost:8080/about. In\nthe Preview view, you can see that the page has been rendered.\n\nLooking at the bundle file, a new main/about/index.html file has been added in\nthe dist/ directory.\n\nINFO\n\nThe above only introduces the single entry, more related content can be viewed\nSSG API.","frontmatter":{"title":"Static Site Generation","sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/ssg.mdx","_relativePath":"en/guides/advanced-features/ssg.mdx"},{"id":203,"title":"Server-side rendering","routePath":"/en/guides/advanced-features/ssr","lang":"en","toc":[{"text":"SSR Data Fetch","id":"ssr-data-fetch","depth":2,"charIndex":449},{"text":"Keep Rendering Consistent","id":"keep-rendering-consistent","depth":2,"charIndex":1726},{"text":"Concerned Memory Leaks","id":"concerned-memory-leaks","depth":2,"charIndex":3501},{"text":"Crop SSR Data","id":"crop-ssr-data","depth":2,"charIndex":4779},{"text":"Serverless Pre-render","id":"serverless-pre-render","depth":2,"charIndex":5626},{"text":"Treeshaking","id":"treeshaking","depth":2,"charIndex":7742},{"text":"Use Environment Variables","id":"use-environment-variables","depth":3,"charIndex":8425},{"text":"Use File Suffix","id":"use-file-suffix","depth":3,"charIndex":9126},{"text":"Independent File","id":"independent-file","depth":3,"charIndex":10157},{"text":"Remote Request","id":"remote-request","depth":2,"charIndex":10808},{"text":"Streaming SSR","id":"streaming-ssr","depth":2,"charIndex":11531},{"text":"Return async data","id":"return-async-data","depth":3,"charIndex":12144},{"text":"Render async data","id":"render-async-data","depth":3,"charIndex":13445},{"text":"Error handling","id":"error-handling","depth":3,"charIndex":14996}],"domain":"","content":"#\n\nIn Modern.js, SSR also works out of the box. Developers do not need to write\ncomplex server level logic for SSR, nor do they need to care about the operation\nand maintenance of SSR, or create services. Modern.js have a comprehensive SSR\ndegradation strategy to ensure that pages can run safely.\n\nEnabling SSR is very easy, just set 'server.ssr' to true:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  \"server\": {\n    \"ssr\": true,\n  },\n})\n\n\n\nSSR Data Fetch#\n\nModern.js provides Data Loader, which is convenient for developers to fetch data\nunder SSR and CSR. Each routing module, such as layout.tsx and page.tsx, can\ndefine its own Data Loader:\n\nsrc/routes/page.loader.ts\n\nexport default () => {\n  return {\n    message: 'Hello World',\n  };\n};\n\n\nin the component, the data returned by the loader function can be get data\nthrough the Hooks API:\n\nexport default () => {\n  const data = useLoaderData();\n  return \n{data.message};\n};\n\n\nModern.js break the traditional SSR development model and provide users with a\nuser-friendly SSR development experience.\n\nAnd it provides elegant degradation processing. Once the SSR request fails, it\nwill automatically downgrade and restart the request on the browser side.\n\nHowever, developers still need to pay attention to the fallback of data, such as\nnull values or data returns that do not as expect. Avoid React rendering errors\nor messy rendering results when SSR.\n\nINFO\n\n 1. When you request the page on client-side page transitions, Modern.js sends\n    an API request to the server, which runs Data Loader function.\n\n 2. When using Data Loader, data fetching happens before rendering, Modern.js\n    still supports fetching data when the component is rendered. See Data Fetch.\n\n\nKeep Rendering Consistent#\n\nIn some businesses, it is usually necessary to display different UI displays\naccording to the current operating container environment characteristics, such\nas UA information.\n\nIf the processing is not careful enough, the rendering results may do not meet\nthe expectations at this time.\n\nHere is an example to show the problem when SSR and CSR rendering are\ninconsistent, add the following code to the component:\n\n{\n  typeof window !== 'undefined' ? \nbrowser content : null;\n}\n\n\nAfter starting the app, visit the page and will find that the browser console\nthrows a warning message:\n\nWarning: Expected server HTML to contain a matching \n in \n.\n\n\nThis is caused by the inconsistency between the rendering result and the SSR\nrendering result when React executes the hydrate logic on the client side.\nAlthough the page performs normally, in complex applications, it is likely to\ncause problems such as DOM hierarchy confusion and style confusion.\n\nINFO\n\nFor hydrate logic, please refer to here.\n\nApplications need to maintain the consistency of SSR and CSR rendering results.\nIf there are inconsistencies, it means that this part of the content does not\nneed to be rendered in SSR.\n\nModern.js provide for such content that does not need to be rendered in SSR:\n\n\n\n\nOutside of elements that do not require SSR, wrap with a NoSSR component:\n\n\n  \nclient content\n\n\n\nAfter modifying the code, refresh page found that the previous Waring\ndisappeared. Open the Network window of the browser developer tool to see that\nthe returned HTML document does not contain the content of the NoSSR component\npackage.\n\nINFO\n\n'useRuntimeContext' can get complete request information, which can be used to\nensure that the rendering results of SSR and CSR are consistent.\n\n\nConcerned Memory Leaks#\n\nWARNING\n\nIn the SSR, developers need to pay special attention to the problem of memory\nleaks. Even small memory leaks can affect services..\n\nIn SSR, every request triggers the component rendering. So, you need to avoid\ndefining any potentially growing global data, or subscribing to events globally,\nor creating streams that will not be destroyed.\n\nFor example, the following code, when using redux-observable, developers used to\ncode like this:\n\n\n\nconst epicMiddleware = createEpicMiddleware();\nconst rootEpic = combineEpics();\n\nexport default function Test() {\n  epicMiddleware.run(rootEpic);\n  return \nHello Modern.js;\n}\n\n\nCreate a Middleware instance epicMiddleware outside the component and call\nepicMiddleware.run inside the component.\n\nOn the browser side, this code does not cause any problems. But in SSR, the\nMiddleware instance will never be destroyed. Every time the component is\nrendered and rootEpic is called, new event bindings are added internally,\ncausing the entire object to continue to grow larger, which ultimately affects\napplication performance.\n\nSuch problems in CSR are not easy to detect, so when switching from CSR to SSR,\nif you are not sure whether the application has such hidden dangers, you can\npress the application.\n\n\nCrop SSR Data#\n\nIn order to keep the data requested in the SSR phase, it can be used directly on\nthe browser side, Modern.js inject the data and state that collected during the\nrendering process into the HTML.\n\nAs a result, CSR applications often have a large amount of interface data and\nthe state of the components is not crop. If SSR is used directly, the rendered\nHTML size may be too large.\n\nAt this time, SSR not only cannot bring an improvement in the user experience,\nbut may have the opposite effect.\n\nTherefore, when using SSR, developers need to do reasonable weight loss for the\napplication:\n\n 1. Pay attention to the first screen, you can only request the data needed for\n    the first screen in SSR, and render the rest on the browser side.\n 2. Removes the data independent with render from the data returned by the\n    interface.\n\n\nServerless Pre-render#\n\nModern.js provide Serverless Pre-rendering(SPR) to improve SSR performance.\n\nSPR uses pre-rendering and caching to provide the responsive performance of\nstatic Web for SSR pages. It allows SSR applications to have the responsiveness\nand stability of static Web pages, while keeping data dynamically updated.\n\nUsing SPR in the Modern.js is very simple, just add the component, and the page\nwhere the component is located will automatically open SPR.\n\nThis mock a component that uses the useLoaderData API, and the request in the\nData Loader takes 2s.\n\n\n\nexport const loader = async () => {\n  await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(null);\n    }, 2000);\n  });\n\n  return {\n    message: 'Hello Modern.js',\n  };\n};\n\nexport default () => {\n  const data = useLoaderData();\n  return \n{data?.message};\n};\n\n\nAfter executing the dev command and opening the page, it is obvious that the\npage needs to wait 2s before returning.\n\nThe next is to use the component, which can be exported directly from\n@modern-js/runtime/ssr :\n\n\n\n\nUse the PreRender component in the routing component and set the parameter\ninterval to indicate that the expiration time of the rendering result is 5s:\n\n\n\n\nAfter modification, execute pnpm run build && pnpm run serve to start the\napplication and open the page.\n\nWhen open page for the first time, it is no different from the previous\nrendering, and there is also a 2s delay.\n\nRefresh page, and the page opens instantly, but at this time, the page data has\nnot changed due to the refresh, because the cache has not expired.\n\nWait 5s, refresh the page again, the data of the page is still unchanged.\nRefresh the page again The data changes, but the page still responds almost\ninstantaneously.\n\nThis is because in the previous request, the SPR has asynchronously obtained the\nnew rendering result in the background, and the page requested this time is the\nversion that has been cached in the server.\n\nIt is conceivable that when interval is set to 1, users can have the responsive\nexperience of a static page.\n\nINFO\n\nFor more detail, see .\n\n\nTreeshaking#\n\nWhen SSR is enabled, Modern.js will use the same entry to build both the SSR\nBundle and the CSR Bundle. Therefore, the Web API in the SSR Bundle, or the Node\nAPI in the CSR Bundle, can lead to runtime errors.\n\nWeb API into a component is usually to do some global listening, or to get\nbrowser-related data, such as:\n\ndocument.addEventListener('load', () => {\n  console.log('document load');\n});\nconst App = () => {\n  return \nHello World;\n};\nexport default App;\n\n\nThe Node API is introduced in the component file, usually because of the use of\nData Loader, for example:\n\n\nexport default () => {\n  const file = fse.readFileSync('./myfile');\n  return {\n    ...\n  };\n};\n\n\n\nUse Environment Variables#\n\nFor the first case, we can directly use Modern.js built-in environment variables\nMODERN_TARGET to remove useless code at build time:\n\nif (process.env.MODERN_TARGET === 'browser') {\n  document.addEventListener('load', () => {\n    console.log('document load');\n  });\n}\n\n\nAfter packaging in the development environment, SSR and CSR artifacts will be\ncompiled into the following content. Therefore, there will be no more errors due\nto Web API in the SSR environment:\n\n// SSR production\nif (false) {\n}\n\n// CSR production\nif (true) {\n  document.addEventListener('load', () => {\n    console.log('document load');\n  });\n}\n\n\nNOTE\n\nFor more information, see environment variables.\n\n\nUse File Suffix#\n\nHowever, in the second case, for example, when fs-extra is imported into the\ncode, it internally uses the Node API with side effects. If it is directly\nreferenced in the component, it will cause CSR loading errors.\n\nEnv vars is not effective in this situation. Modern.js also supports\ndistinguishing SSR Bundle and CSR Bundle packaging files through files with the\n.node. suffix.\n\nFor example, the import of fs-extra in the code, when it is directly referenced\nto the component, will cause the CSR to load an error. You can create .ts and\n.node.ts files of the same name as a layer of proxy:\n\ncompat.ts\n\nexport const readFileSync: any = () => {};\n\n\ncompat.node.ts\n\nexport { readFileSync } from 'fs-extra';\n\n\nuse ./compat directly into the file. At this time, files with the .node.ts\nsuffix will be used first in the SSR environment, and files with the .ts suffix\nwill be used in the CSR environment.\n\nApp.tsx\n\n\n\nexport const loader = () => {\n  const file = readFileSync('./myfile');\n  return {\n    ...\n  };\n};\n\n\n\nIndependent File#\n\nBoth of the above methods can bring some mental burden to developers. In real\nbusiness scenarios, we found that most of the mixed Node/Web code occurs in data\nrequests.\n\nTherefore, Modern.js developed a Data Fetch to separate CSR and SSR code based\non Nested Routing.\n\nWe can separate data request and component code by using independent files.\nWrite component logic in routes/page.tsx and data request logic in\nroutes/page.loader.ts.\n\nroutes/page.tsx\n\nexport default Page = () => {\n  return \nHello World\n\n}\n\n\nroutes/page.loader.tsx\n\n\nexport default () => {\n  const file = fse.readFileSync('./myfile');\n  return {\n    ...\n  };\n}\n\n\n\nRemote Request#\n\nWhen initiating remote requests in SSR, developers sometimes use request tools.\nSome interfaces need to pass user cookies, which developers can get through the\n'useRuntimeContext' API to achieve.\n\nIt should be noted, the request header of the HTML request is obtained, which\nmay not be applicable to remote requests, so must not pass through all request\nheaders.\n\nIn addition, some backend interfaces, or general gateways, will verify according\nto the information in the request header, and full pass-through is prone to\nvarious problems that are difficult to debug. It is recommended that\npass-through on demand.\n\nBe sure to filter the host field if you really need to pass through all request\nheaders.\n\n\nStreaming SSR#\n\nModern.js supports streaming rendering in React 18. Opt in it with the following\nconfiguration:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  \"server\": {\n    \"ssr\": {\n      \"mode\": \"stream\",\n    },\n  },\n})\n\n\nThe streaming SSR of Modern.js is implemented based on React Router, and the\nmain APIs involved are:\n\n * defer: This utility allows you to defer values returned from loaders by\n   passing promises instead of resolved values.\n\n * Await: Used to render deferred values with automatic error handling.\n\n * useAsyncValue: Returns the resolved data from the nearest ancestor component.\n\n\nReturn async data#\n\npage.loader.ts\n\n\n\ninterface User {\n  name: string;\n  age: number;\n}\n\nexport interface Data {\n  data: User;\n}\n\nexport default ({ params }: LoaderFunctionArgs) => {\n  const userId = params.id;\n\n  const user = new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        name: `user-${userId}`,\n        age: 18,\n      });\n    }, 200);\n  });\n\n  return defer({ data: user });\n};\n\n\n\nuser is of Promise type, which means the data will be obtained asynchronously.\nNote that defer must accept an object type parameter, therefore, the parameter\npassed to defer is {data: user}.\n\ndefer can also receive asynchronous data and synchronous data at the same time.\nFor example:\n\npage.loader.ts\n\n\n// skip some codes\n\nexport default ({ params }: LoaderFunctionArgs) => {\n  const userId = params.id;\n\n  const user = new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        name: `user-${userId}`,\n        age: 18,\n      });\n    }, 200);\n  });\n\n  const otherData = new Promise(resolve => {\n    setTimeout(() => {\n      resolve('some sync data');\n    }, 200);\n  });\n\n  return defer({\n    data: user,\n    other: await otherData\n  });\n};\n\n\n\nawait is added before otherData, so the data is obtained synchronously. It can\nbe passed to defer with the data user at the same time.\n\n\nRender async data#\n\nUse the Await component to render the data returned asynchronously from the Data\nLoader. For example:\n\npage.tsx\n\n\n\n\n\nconst Page = () => {\n  const data = useLoaderData() as Data;\n\n  return (\n    \n\n      User info:\n      loading user data ...}>\n        \n          {(user) => {\n            return (\n              \n\n                name: {user.name}, age: {user.age}\n              \n            );\n          }}\n        \n      \n    \n\n); }; export default Page;\n\nAwait needs to be wrapped inside the Suspense component. The resolve of Await\npasses in the data acquired asynchronously by the Data Loader. When the data\nacquisition is completed, the obtained data is rendered through the Render Props\nmode. When the data acquisition is in pending status, the content set by the\nfallback property of the Suspense component will display.\n\nWarning\n\nWhen importing a type from a Data Loader file, you need to use the import type\nsyntax to ensure that only type information is imported, which can prevent the\nData Loader code from being packaged into the client bundle.\n\nSo, here we `;\n\nYou can also get the asynchronous data returned by Data Loader through\nuseAsyncValue. For example:\n\npage.tsx\n\n\n\n// skip some codes\n\nconst UserInfo = () => {\n  const user = useAsyncValue();\n\n  return (\n     \n\n      name: {user.name}, age: {user.age}\n    \n  )\n}\n\nconst Page = () => {\n  const data = useLoaderData() as Data;\n\n  return (\n    \n\n      User info:\n      loading user data ...}>\n        \n          \n        \n      \n    \n\n); }; export default Page;\n\n\nError handling#\n\nThe errorElement property of the Await component can be used to handle errors\nthrown when the Data Loader executes or when a child component renders. For\nexample, we intentionally throw an error in the Data Loader function:\n\npage.loader.ts\n\n\n\nexport default () => {\n  const data = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error('error occurs'));\n    }, 200);\n  });\n\n  return defer({ data });\n};\n\n\nThen use useAsyncError to get the error, and assign the component used to render\nthe error to the errorElement property of the Await component:\n\npage.ts\n\n\n\n\nexport default function Page() {\n  const data = useLoaderData();\n\n  return (\n    \n\n      Error page\n      loading ...}>\n        }>\n          {(data: any) => {\n            return \nnever displayed;\n          }}\n        \n      \n    \n\n); } function ErrorElement() { const error = useAsyncError() as Error; return\n\nSomething went wrong! {error.message}\n\n; }\nMore\n 1. Deferred Data\n 2. New Suspense SSR Architecture in React 18","frontmatter":{"title":"Server-side rendering","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/ssr.mdx","_relativePath":"en/guides/advanced-features/ssr.mdx"},{"id":204,"title":"Testing","routePath":"/en/guides/advanced-features/testing","lang":"en","toc":[{"text":"Test file","id":"test-file","depth":2,"charIndex":480},{"text":"Usage","id":"usage","depth":2,"charIndex":685},{"text":"transform","id":"transform","depth":2,"charIndex":850}],"domain":"","content":"#\n\nModern.js integrates the testing capabilities of Jest by default.\n\nFirst need to execute pnpm run new enable [unit test/integration test] features:\n\n? Action: Enable features\n? Enable features: Enable Unit Test / Integration Test\n\n\nAfter executing the above command, the \"test\": \"modern test\" command will be\nautomatically generated in package.json.\n\nregister plugin in modern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [..., testPlugin()],\n});\n\n\n\nTest file#\n\nModern.js default recognized test file paths are: /src/**/*.test.[jt]s?(x) and\n/tests/**/*.test.[jt]s?(x).\n\nIf you need to customize the test directory, you can configure it with\ntools.jest.\n\n\nUsage#\n\nModern.js test support testing-library. API can be imported from\n@modern-js/runtime/testing.\n\n\n\n\nOther Modern.js supported testing APIs can be found here.\n\n\ntransform#\n\nModern.js tests use babel-jest for source code compilation by default. If you\nneed to use ts-jest, you can configure it through testing.transform.","frontmatter":{"sidebar_position":10,"title":"Testing"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/testing.mdx","_relativePath":"en/guides/advanced-features/testing.mdx"},{"id":205,"title":"Custom Web Server","routePath":"/en/guides/advanced-features/web-server","lang":"en","toc":[{"text":"Extending Web Server with API","id":"extending-web-server-with-api","depth":2,"charIndex":1146},{"text":"Hook","id":"hook","depth":3,"charIndex":2397},{"text":"Middleware","id":"middleware","depth":3,"charIndex":3096},{"text":"Managed Page Requests with BFF","id":"managed-page-requests-with-bff","depth":2,"charIndex":4292},{"text":"Fully Customized Web Server","id":"fully-customized-web-server","depth":2,"charIndex":5197}],"domain":"","content":"#\n\nAs a client side-centric development framework, Modern.js has weak customization\ncapabilities on the server side. In some development scenarios, special server\nlevel logic needs to be customized, such as user authentication, request\npreprocessing, and adding page rendering skeletons.\n\nSome developers may be wondering, Modern.js already provides BFF, why do you\nneed Custom Web Server.\n\nBecause by default, page routing does not go through BFF, it has no way to\nprovide server-side custom logic for page access. The reason for this design is\nthat we do not want the service that controls the page to be bound to the BFF\nservice, so as to avoid the BFF framework restricting how the page is deployed.\n\nFor example, hosting pages separately from BFF, deploying page services to\nnon-Node environments, or customizing for deployment platforms, etc.\n\nFor the above reasons, Modern.js provides three ways that projects can customize\nserver level capabilities progressively according to their needs.\n\nWARNING\n\nThe three extension methods cannot work at the same time, and developers need to\nchoose the appropriate method according to the scenario.\n\n\nExtending Web Server with API#\n\nThe first way is to customize the server level at a specific life cycle through\nthe server level runtime API provided by Modern.js. The purpose of providing\nthis way is that in some cases, developers do not need to control the full Web\nServer, but only need to add server level logic.\n\nBecause the full web server cannot be controlled this way, and the extension\nlogic only takes effect when the page is requested. Therefore, it is relatively\nsimple to apply to server level logic, and you do not want to create additional\nBFFs or BFFs and pages without common server level logic scenarios.\n\nYou can execute the'pnpm run new 'command in the project root directory to\nenable the \"Custom Web Serve\" function:\n\n? Action Create project element\n? New \"Custom Web Server\" source code directory\n\n\nAfter executing the command, register the @modern-js/plugin-server plugin in\nmodern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [..., serverPlugin()],\n});\n\n\nAfter the function is turned on, the server/index.ts file will be automatically\ncreated in the project directory, and custom logic can be written in this file.\nModern.js provides two types of APIs, Hook and Middleware, to extend Web Server.\n\n\nHook#\n\nThe Hook provided by Modern.js is used to control the built-in logic in the Web\nServer, and all page requests go through the Hook.\n\nThere are currently two Hooks provided, namely AfterMatch and AfterRender, which\ncan be used to modify the rendering results. It can be written in\nserver/index.ts like this:\n\n\n\nexport const afterMatch: AfterMatchHook = (ctx, next) => {\n  next();\n}\n\nexport const afterRender: AfterRenderHook = (ctx, next) => {\n  next();\n}\n\n\nProjects should have the following best practices when using Hook:\n\n 1. Permission verification in afterMatch.\n 2. Do Rewrite and Redirect in afterMatch.\n 3. Do HTML content injection in afterRender.\n\nNOTE\n\nFor more detail, see Hook.\n\n\nMiddleware#\n\nFor some projects, there may be more requirements at the server level, Modern.js\nprovides Middleware to add pre-middleware for Web Server. It can only run in a\nNode environment, so if the project is deployed to another environment, such as\na Worker environment, Middleware cannot be used.\n\nModern.js provides a set of APIs by default for projects to use:\n\n\n\nexport const middleware: Middlewre = (context, next) => {\n  const { source: { req, res } } = context;\n  console.log(req.url);\n  next();\n};\n\n\nNOTE\n\nFor more detail, see [Middleware] (/apis/app/runtime/web-server/middleware).\n\nProjects should have the following best practices when using Middleware:\n\n 1. In Middleware, you can directly operate origin request and response objects,\n    do event tracking, and inject Node services (databases, Redis, etc.) that\n    may be used for SSR rendering.\n 2. Marking and crawler optimization can be done in Middleware.\n 3. In Middleware, you can ignore the default rendering and customize the\n    rendering process.\n\nIn general, in CSR projects, using Hook can basically meet all the needs of\nsimple scenarios. In SSR projects, Middleware can be used for more complex Node\nextensions.\n\n\nManaged Page Requests with BFF#\n\nThe second way is to use BFF to Managed page rendering. In this way, all\nrequests will first hit the BFF service.\n\nThis method can uniformly control the server level logic of all requests through\nBFF. Therefore, it is suitable for scenarios where the server level logic is\ncomplex, and BFF and pages need common server level logic. But it still relies\non the Web Server of Modern.js as a whole, and cannot run the logic on existing\nservices.\n\nTo use this method, we need to first enable the \"BFF\" function through pnpm new.\nThen add bff.enableHandleWeb configuration in the configuration file:\n\nexport default defineConfig({\n  bff: {\n    enableHandleWeb: true,\n  },\n});\n\n\nWhen this value is set to true, page request traffic also goes through the BFF,\nand the logic built into Modern.js for page rendering defaults to running as the\nlast middleware for the BFF service.\n\n\nFully Customized Web Server#\n\nNOTE\n\nComming soon..","frontmatter":{"title":"Custom Web Server","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/advanced-features/web-server.mdx","_relativePath":"en/guides/advanced-features/web-server.mdx"},{"id":206,"title":"Alias","routePath":"/en/guides/basic-features/alias","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js allow aliases in JS and CSS, and the following aliases are built in:\n\n{\n  '@': '/src',\n  '@shared': '/shared',\n}\n\n\nINFO\n\nWhen the optional features is enable, the generator will also add built-in\naliases dynamically. For example, when BFF is enabled, the @api alias will be\nadded by default.\n\nFor example, import the modules from the src/common/ directory in the\nsrc/App.tsx file:\n\n.\n├── common\n│   ├── styles\n│   │   └── base.css\n│   └── utils\n│       └── index.ts\n├── App.tsx\n\n\nthe code in src/App.tsx:\n\n\nimport '@/src/common/styles/base.css';\n\n\nModern.js also provides a way to config aliases. Adding the @common alias as an\nexample. For TypeScript projects, you only need to configure\ncompilerOptions.paths under the project root directory tsconfig.json as follows:\n\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@/common/*\": [\"./src/common/*\"]\n    }\n  }\n}\n\n\nJavaScript project can config by source.alias in modern.config.js:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n});\n\n\nFor detailed usage, please refer to source.alias documentation.","frontmatter":{"title":"Alias","sidebar_position":8},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/alias.mdx","_relativePath":"en/guides/basic-features/alias.mdx"},{"id":207,"title":"CSS Solutions","routePath":"/en/guides/basic-features/css","lang":"en","toc":[{"text":"Using Less, Sass and Stylus","id":"using-less,-sass-and-stylus","depth":2,"charIndex":146},{"text":"Using PostCSS","id":"using-postcss","depth":2,"charIndex":563},{"text":"Using CSS Modules","id":"using-css-modules","depth":2,"charIndex":710},{"text":"Using CSS-in-JS","id":"using-css-in-js","depth":2,"charIndex":811},{"text":"Using Tailwind CSS","id":"using-tailwind-css","depth":2,"charIndex":2151},{"text":"Tailwind CSS version","id":"tailwind-css-version","depth":3,"charIndex":3192},{"text":"Browser Compatibility","id":"browser-compatibility","depth":3,"charIndex":3704},{"text":"Theme config","id":"theme-config","depth":3,"charIndex":3997}],"domain":"","content":"#\n\nModern.js has built-in multiple CSS solutions, including Less / Sass / Stylus\npreprocessor, PostCSS, CSS Modules, CSS-in-JS and Tailwind CSS.\n\n\nUsing Less, Sass and Stylus#\n\nModern.js has built-in community popular CSS preprocessors such as Less, Sass.\n\nBy default, you don't need to configure anything for Less and Sass. If you need\nto customize loader config, you can configure tools.less, tools.sass to set it\nup.\n\nYou can also use Stylus in Modern.js, just install the Stylus plugin provided by\nModern.js Builder, please refer to Stylus Plugin for usage.\n\n\nUsing PostCSS#\n\nModern.js has built-in PostCSS to transform the CSS code.\n\nPlease refer to Modern.js Builder - Using PostCSS for detailed usage.\n\n\nUsing CSS Modules#\n\nPlease read the Using CSS Modules chapter for a complete usage of CSS Modules.\n\n\nUsing CSS-in-JS#\n\nCSS-in-JS is a technology that can write CSS styles in JS files.\n\nModern.js integrates the CSS-in-JS library styled-components commonly used in\nthe community, which uses the new feature of JavaScript Tagged template to write\nCSS styles for components. You can use the styled-components API directly from\n@modern-js/runtime/styled.\n\nWhen you need to write a div component with an internal font in red, you can do\nthe following implementation:\n\n\n\nconst RedDiv = styled.div`\n  color: red;\n`;\n\n\nWhen you need to dynamically set the component style according to the props of\nthe component, for example, when the attribute primary of props is true, the\ncolor of the button is white, and otherwise it is red. The implementation code\nis as follows:\n\n\n\nconst Button = styled.button`\n  color: ${props => (props.primary ? 'white' : 'red')};\n  font-size: 1em;\n`;\n\n\nFor more usage of styled-components, please refer to [styled-components official\nwebsite ].\n\nModern.js uses the Babel plugin babel-plugin-styled-components internally, and\nthe plugin can be configured through tools.styledComponents.\n\nTIP\n\nIf you need to use styled-jsx, Emotion and other CSS-in-JS libraries, you need\nto install the dependency of the corresponding library first. For specific\nusage, please refer to the official website of the corresponding library.\n\n\nUsing Tailwind CSS#\n\nTailwind CSS is a CSS framework and design system based on Utility Class, which\ncan quickly add common styles to components, and support flexible extension of\ntheme styles. To use Tailwind CSS in the Modern.js, just execute pnpm run new in\nthe project root directory and turn it on.\n\nChoose as follows:\n\n? Action: Enable features\n? Enable features: Enable Tailwind CSS\n\n\nWhen using, add the following code to the root component of the entry (such as\nsrc/App.jsx):\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\n\n\nYou can then use the Utility Class provided by Tailwind CSS in each component:\n\nconst App = () => (\n  \n\n    \n\nhello world\n  \n);\n\n\nAdditional\n\nAccording to different needs, you can optionally import the CSS files provided\nby Tailwind CSS. Since the use of @taiwind is equivalent to directly importing\nCSS files, you can refer to the content in the annotate in the @tailwind usage\ndocument for the purpose of the CSS files provided by Tailwind CSS.\n\n\nTailwind CSS version#\n\nModern.js supports both Tailwind CSS v2 and v3. The framework will recognize the\nversion of tailwindcss in the project package.json and apply the corresponding\nconfiguration. By default, we install Tailwind CSS v3 for you.\n\nIf your project is still using Tailwind CSS v2, we recommend that you upgrade to\nv3 to support JIT and other capabilities. For the differences between Tailwind\nCSS v2 and v3 versions, please refer to the following articles:\n\n * Tailwind CSS v3.0\n * Upgrade Guide\n\n\nBrowser Compatibility#\n\nBoth Tailwind CSS v2 and v3 do not support IE 11 browsers. For background,\nplease refer to:\n\n * Tailwind CSS v3 - Browser Support.\n * Tailwind CSS v2 - Browser Support\n\nIf you use Tailwind CSS on IE 11 browser, some styles may not be available,\nplease pay attention.\n\n\nTheme config#\n\nWhen you need to customize the theme configuration of Tailwind CSS, you can\nmodify it in the configuration source.designSystem, for example, add a color\ntheme primary:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    designSystem: {\n      extend: {\n        colors: {\n          primary: '#5c6ac4',\n        },\n      },\n    },\n  },\n});\n\n\nWhen you need special configuration for Tailwind CSS other than theme, you can\nconfigure it in tools.tailwindcss, for example setting variants:\n\nmodern.config.ts\n\nexport default defineConfig({\n  tools: {\n    tailwindcss: {\n      variants: {\n        extend: {\n          backgroundColor: ['active'],\n        },\n      },\n    },\n  },\n});\n\n\n> When configuring Tailwind CSS for a project, the combination of the two\n> configurations source.designSystem and tools.tailwindcss is equivalent to a\n> separate configuration tailwindcss.config.js file. Where source.designSystem\n> is equivalent to the theme configuration of Tailwind CSS.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/css.mdx","_relativePath":"en/guides/basic-features/css.mdx"},{"id":208,"title":"Fetch Data","routePath":"/en/guides/basic-features/data-fetch","lang":"en","toc":[{"text":"Data loader(recommend)","id":"data-loader(recommend)","depth":2,"charIndex":307},{"text":"Basic example","id":"basic-example","depth":3,"charIndex":801},{"text":"loader function","id":"loader-function","depth":3,"charIndex":2796},{"text":"request","id":"request","depth":4,"charIndex":3322},{"text":"Return value","id":"return-value","depth":4,"charIndex":3649},{"text":"Request API","id":"request-api","depth":3,"charIndex":4252},{"text":"Error handling","id":"error-handling","depth":3,"charIndex":4605},{"text":"Get data from upper level components","id":"get-data-from-upper-level-components","depth":3,"charIndex":5300},{"text":"(WIP)Loading UI","id":"(wip)loading-ui","depth":3,"charIndex":6660},{"text":"Wrong usage","id":"wrong-usage","depth":3,"charIndex":7703},{"text":"FAQ","id":"faq","depth":3,"charIndex":9394},{"text":"useLoader(Old)","id":"useloader(old)","depth":2,"charIndex":9787},{"text":"Route Loader","id":"route-loader","depth":2,"charIndex":11894}],"domain":"","content":"#\n\nModern.js provides out of the box fetching data capabilities, developers can use\nthese APIs to develop in CSR and SSR environments isomorphic.\n\nIt should be noted that these APIs do not help applications to initiate\nrequests, but help developers better manage the relationship between data and\nrouting.\n\n\nData loader(recommend)#\n\nModern.js recommends the use of conventional routing for route management. With\nModern.js' conventional (nested) routing, each routing component (layout.ts or\npage.ts) can have a loader file with the same name that can be executed before\nthe component renders, providing data to the routing component.\n\nINFO\n\nModern.js v1 supports getting data by useLoader, which is no longer the\nrecommended usage and it is not recommended to mix both except for migration\nprocess.\n\n\nBasic example#\n\nA routing component such as layout.ts or page.ts can define a loader file with\nthe same name. The loader file exports a function that provides the data\nrequired by the component, which is then get data by the useLoaderData function\nin the routing component, as in the following example:\n\n.\n└── routes\n    ├── layout.tsx\n    └── user\n        ├── layout.tsx\n        ├── layout.loader.ts\n        ├── page.tsx\n        └── page.loader.ts\n\n\nDefine the following code in the file:\n\nroutes/user/page.tsx\n\n\n\n\nexport default function UserPage() {\n  const profileData = useLoaderData() as ProfileData;\n  return \n{profileData};\n}\n\n\nroutes/user/page.loader.ts\n\nexport type ProfileData = {\n  /*  some types */\n};\n\nexport default async (): Promise => {\n  const res = await fetch('https://api/user/profile');\n  return await res.json();\n};\n\n\nCAUTION\n\nHere the routing component and the loader file share a type, should use the\nimport type syntax.\n\nIn a CSR environment, the loader function is executed on the client side, and\nthe browser API can be used within the loader function (but it is usually not\nneeded and not recommended).\n\nIn an SSR environment, the loader function will only be executed on the server\nside, regardless of the first screen or the navigation on the client side, where\nany Node.js API can be called, and any dependencies and code used here will not\nbe included in the client bundle.\n\nINFO\n\nIn later versions, Modern.js may support loader functions running on the server\nside as well in CSR environments to improve performance and security, so here it\nis recommended to keep the loader as pure as possible and only do data fetching\nscenarios.\n\nWhen navigating on the client side, all loader functions under /user and\n/user/profile are executed (requested) in parallel based on Modern.js's\nconventional routing, i.e. when accessing /user/profile, the loader functions\nunder /user and /user/profile are executed (requested) in parallel to improve\nclient-side performance.\n\n\nloader function#\n\nThe loader function has two input parameters:\n\nParams#\n\nWhen a routing file is passed through [], it is passed as a dynamic route and\nthe dynamic route fragment is passed as an argument to the loader function:\n\n// routes/user/[id]/page.loader.tsx\n\n\nexport default async ({ params }: LoaderFunctionArgs) => {\n  const { id } = params;\n  const res = await fetch(`https://api/user/${id}`);\n  return res.json();\n};\n\n\nWhen accessing /user/123, the parameters of the loader function are { params: {\nid: '123' } }.\n\nrequest#\n\nrequest is a Fetch Request instance.\n\nA common usage scenario is to obtain query parameters via request:\n\n// routes/user/[id]/page.loader.ts\n\n\nexport default async ({ request }: LoaderFunctionArgs) => {\n  const url = new URL(request.url);\n  const userId = url.searchParams.get('id');\n  return queryUser(userId);\n};\n\n\nReturn value#\n\nThe return value of the loader function can be anything serializable, or it can\nbe a Fetch Response instance:\n\nconst loader = async (): Promise => {\n  return {\n    message: 'hello world',\n  };\n};\nexport default loader;\n\n\nBy default, the response Content-type returned by loader is application/json and\nstatus is 200, which you can set by customizing Response:\n\nconst loader = async (): Promise => {\n  const data = { message: 'hello world' };\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json; utf-8',\n    },\n  });\n};\n\n\n\nRequest API#\n\nModern.js does a polyfill of the fetch API to initiate requests, which is\nconsistent with the browser's fetch API, but can also be used on the server side\nto initiate requests, meaning that both CSRs and SSRs can use the unified fetch\nAPI for data fetching:\n\nfunction loader() {\n  const res = await fetch('https://api/user/profile');\n}\n\n\n\nError handling#\n\nIn the loader function, errors can be handled by throw error or throw response.\nWhen an error is thrown in the loader function, Modern.js will stop executing\nthe code in the current loader and switch the front-end UI to the defined\nErrorBoundary component.\n\n// routes/user/profile/page.loader.tsx\nexport default async function loader() {\n  const res = await fetch('https://api/user/profile');\n  if (!res.ok) {\n    throw res;\n  }\n  return res.json();\n}\n\n// routes/user/profile/error.tsx\n\nconst ErrorBoundary = () => {\n  const error = useRouteError() as Response;\n  return (\n    \n\n      \n\n\n{error.status}\n      \n\n\n{error.statusText}\n    \n  );\n};\n\nexport default ErrorBoundary;\n\n\n\nGet data from upper level components#\n\nIn many cases, the child component needs to access the data in the ancestor's\nloader, and you can easily access the ancestor's data with useRouteLoaderData:\nuseRouteLoaderData:\n\n// routes/user/profile/page.tsx\n\n\nexport default function UserLayout() {\n  // Get the data returned by the loader in routes/user/layout.loader.ts\n  const data = useRouteLoaderData('user/layout');\n  return (\n    \n\n      \n\n\n{data.name}\n      \n\n\n{data.age}\n    \n  );\n}\n\n\nuserRouteLoaderData takes one parameter routeId,When using conventional routing,\nModern.js will automatically generate routeId for you. The value of routeId is\nthe path of the corresponding component relative to src/routes, as in the\nexample above, the child component wants to get the data returned by the loader\nin routes/user/layout.tsx, the value of routeId is user/layout.\n\nIn a multi-entry (MPA) scenario, the value of routeId needs to be added to the\nname of the corresponding entry, and the entry name is usually the entry\ndirectory name if not specified, such as the following directory structure:\n\n.\n└── src\n    ├── entry1\n    │     └── routes\n    │           └── layout.tsx\n    └── entry2\n          └── routes\n                └── layout.tsx\n\n\nIf you want to get the data returned by the loader in entry1/routes/layout.tsx,\nthe value of routeId is entry1_layout.\n\n\n(WIP)Loading UI#\n\nINFO\n\nThis feature is currently experimental and the API may be adjusted in the\nfuture.\n\nCurrently, only CSR is supported, so stay tuned for Streaming SSR.\n\nAdd the following code to user/layout.loader.ts:\n\nroutes/user/layout.loader.ts\n\n\n\nconst loader = () =>\ndefer({\n  userInfo: new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          age: 1,\n          name: 'user layout'\n        })\n      }, 1000)\n    })\n  })\n\nexport default loader;\n\n\nAdd the following code to user/layout.tsx:\n\nroutes/user/layout.tsx\n\nimport {\n  Await,\n  defer,\n  useLoaderData,\n  Outlet\n} from '@modern-js/runtime/router';\n\nexport default function UserLayout() {\n  const { userInfo } = useLoaderData() as {userInfo: Promise};\n  return (\n    \n\n      Loading...\n\n}\n      >\n         (\n          \n\n\n            {userInfo.name}\n            {userInfo.age}\n            \n          \n        )}>\n        \n      \n    \n  );\n}\n\n\nINFO\n\nFor specific usage of the Await component, see Await\n\nFor specific usage of the defer function, seedefer\n\n\nWrong usage#\n\n 1. Only serializable data can be returned in loader. In SSR environments, the\n    return value of the loader function is serialized to a JSON string, which is\n    then deserialized to an object on the client side. Therefore, no\n    non-serializable data (such as functions) can be returned in the loader\n    function.\n\nWARNING\n\nThis restriction is not currently in place under CSR, but we strongly recommend\nthat you follow it, and we may add it under CSR in the future.\n\n// This won't work!\nexport default () => {\n  return {\n    user: {},\n    method: () => {},\n  };\n};\n\n\n 2. Modern.js will call the loader function for you, you shouldn't call it\n    yourself in the component.\n\n// This won't work!\nexport default async () => {\n  const res = fetch('https://api/user/profile');\n  return res.json();\n};\n\n\nexport default function RouteComp() {\n  const data = loader();\n}\n\n\n 3. You cannot import a loader file from a routing component, nor can you import\n    variables in a routing component from a loader file:\n\n// Not allowed\n// routes/layout.tsx\n\n // should use \"import type\" instead\n\nexport const fetch = wrapFetch(fetch);\n\nexport default function UserPage() {\n  const profileData = useLoaderData() as ProfileData;\n  return \n{profileData};\n}\n\n// routes/layout.loader.ts\n // should not be imported from the routing component\nexport type ProfileData = {\n  /*  some types */\n};\n\nexport default async (): Promise => {\n  const res = await fetch('https://api/user/profile');\n  return await res.json();\n};\n\n\n 4. When run on the server side, the loader functions are packaged into a single\n    bundle, so we do not recommend using __filename and __dirname for\n    server-side code.\n\n\nFAQ#\n\n 1. Relationship between loader and bff functions\n\nIn a CSR project, the loader is executed on the client side and the bff function\ncan be called directly from the loader to make a request.\n\nIn an SSR project, each loader is also a server-side API, and we recommend using\nloader instead of the BFF function which http method is get to avoid one more\nlayer of forwarding and execution.\n\n\nuseLoader(Old)#\n\nuseLoader is an API in Modern.js old version. The API is a React Hook specially\nprovided for SSR applications, allowing developers to fetch data in components.\n\nTIP\n\nCSR don't need to use useLoader to fetch data.\n\nHere is the simplest example:\n\n\n\nexport default () => {\n  const { data } = useLoader(async () => {\n    console.log('fetch in useLoader');\n\n    // No real request is sent here, just a hard coding data is returned.\n    // In a real project, the data obtained from the remote end should be returned.\n    return {\n      name: 'Modern.js',\n    };\n  });\n\n  return \nHello, {data?.name};\n};\n\n\nAfter the above code starts, visit the page. You can see that the log is printed\nat terminal, but not at console in browser.\n\nThis is because Modern.js server-side rendering, the data returned by the\nuseLoader is collected and injected into the HTML of the response. If SSR\nrendering succeeds, the following code snippet can be seen in the HTML:\n\n\n\n\nIn this global variable, every piece of data is recorded, and this data will be\nused first in the process of rendering on the browser side. If the data does not\nexist, the useLoader function will be re-executed.\n\nNOTE\n\nDuring the build phase, Modern.js will automatically generate a Loader ID for\neach useLoader and inject it into the JS bundle of SSR and CSR, which is used to\nassociate Loader and data.\n\nCompared with getServerSideProps in the Next.js, get data in advance before\nrendering. Using useLoader, you can get the data required by the local UI in the\ncomponent without passing the data layer by layer. Similarly, it will not add\nredundant logic to the outermost data acquisition function because different\nroutes require different data requests. Of course, useLoader also has some\nproblems, such as the difficulty of Treeshaking server-level code, and the need\nfor one more pre-render at the server level.\n\nModern.js in the new version, a new Loader solution is designed. The new\nsolution solves these problems and can cooperate with nested routing to optimize\npage performance.\n\nNOTE\n\nDetailed APIs can be found at useLoader.\n\n\nRoute Loader#\n\nNOTE\n\nStay tuned.","frontmatter":{"title":"Fetch Data","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/data-fetch.mdx","_relativePath":"en/guides/basic-features/data-fetch.mdx"},{"id":209,"title":"Environment Variable","routePath":"/en/guides/basic-features/env-vars","lang":"en","toc":[{"text":"Built-in Environment Variables","id":"built-in-environment-variables","depth":2,"charIndex":133},{"text":"ASSET_PREFIX","id":"asset_prefix","depth":3,"charIndex":167},{"text":"NODE_ENV","id":"node_env","depth":3,"charIndex":269},{"text":"MODERN_ENV","id":"modern_env","depth":3,"charIndex":641},{"text":"MODERN_TARGET","id":"modern_target","depth":3,"charIndex":870},{"text":"Custom Environment Variables","id":"custom-environment-variables","depth":2,"charIndex":2206},{"text":"Specify via shell","id":"specify-via-shell","depth":3,"charIndex":2315},{"text":"Specify via .env file","id":"specify-via-env-file","depth":3,"charIndex":2431},{"text":"Using Environment Variables","id":"using-environment-variables","depth":2,"charIndex":3189},{"text":"Convention Names","id":"convention-names","depth":3,"charIndex":3220},{"text":"Any Other Names","id":"any-other-names","depth":3,"charIndex":3697},{"text":"Use Global Replacement","id":"use-global-replacement","depth":2,"charIndex":4250}],"domain":"","content":"#\n\nModern.js provides support for environment variables, including built-in\nenvironment variables and custom environment variables.\n\n\nBuilt-in Environment Variables#\n\n\nASSET_PREFIX#\n\nThe current path prefix of resource file, which is a read-only environment\nvariable.\n\n\nNODE_ENV#\n\nThe current execution environment and is a read-only environment variable whose\nhave different values under different execution commands:\n\n * production: the default value when exec modern build or modern serve.\n * test: the default value when exec modern test.\n * development: the default value when exec modern dev, alse the default value\n   of other case.\n\n\nMODERN_ENV#\n\nSet the current execution environment manually. In addition to the values in the\nNODE_ENV, custom environment names are supported here, such as staging, boe,\netc.\n\nTIP\n\nMODERN_ENV priority is higher than NODE_ENV.\n\n\nMODERN_TARGET#\n\nWhen using @modern-js/runtime, Modern.js will automatically inject MODERN_TARGET\nto distinguish between SSR and CSR environments.\n\nYou can use process.env.MODERN_TARGET to judge the environment and execute the\nappropriate code.\n\nApp.tsx\n\nfunction App() {\n  if (process.env.MODERN_TARGET === 'browser') {\n    console.log(window.innerHeight);\n  }\n}\n\n\nAfter the development build, you can see that the SSR and CSR bundles as\nfollows:\n\ndist/bundles/main.js\n\n// SSR bundles\nfunction App() {\n  if (false) {\n  }\n}\n\n\ndist/static/main.js\n\n// CSR bundles\nfunction App() {\n  if (true) {\n    console.log(window.innerHeight);\n  }\n}\n\n\nThis can provide different outputs for different environments to ensure that the\nbundle size is minimized. It can also be convenient to deal with some side\neffects for different environments.\n\nDead Code Elimination\n\nIn the production environment, minimizers such as Terser and SWC will analyze\nthe code and remove dead code to reduce the bundle size. This process is called\n\"Dead Code Elimination\" (DCE).\n\nFor example, the code inside the if (false) statement will be removed, while the\ncode inside the if (true) will be preserved.\n\nIf you do not use process.env.MODERN_TARGET as described above, the code\nminimizer may not be able to analyze the dead code, resulting in an increased\nbundle size.\n\n\nCustom Environment Variables#\n\nCustom environment variables can be specified in both shell and .env files.\n\n\nSpecify via shell#\n\nAdd custom environment variables before the command:\n\nREACT_APP_FOO=123 BAR=456 pnpm run dev\n\n\n\nSpecify via .env file#\n\nCreate a .env file in the project root and add custom environment variables,\nwhich are added to the Node.js process by default, for example:\n\nREACT_APP_FOO=123\nBAR=456\n\n\nThe .env file follows the following loading rules:\n\n * .env: default.\n * .env.{ MODERN_ENV | NODE_ENV }: Setting environment variables for a specific\n   environment overrides the same in .env.\n\nWhen you need to use different config according to the environment, you can\ndefine environment variables in the .env file corresponding to the environment\nname, and manually set the execution environment when starting the project.\n\nFor example, when starting a project with the following command, the .env and\n.env.staging will load:\n\nMODERN_ENV=staging pnpm run dev\n\n\n\nUsing Environment Variables#\n\n\nConvention Names#\n\nNODE_ENV can be used directly in front-end code. In addition, custom environment\nvariables starting with MODERN_ can also be used directly in code.\n\nFor Example:\n\nif (process.env.NODE_ENV === 'development') {\n  // do something\n}\n\n\nAfter executing the pnpm run dev, you can see the following bundle:\n\nif (true) {\n  // do something\n}\n\n\nIn custom HTML templates, you can also use such environment variables directly.\nFor example, in config/html/head.html:\n\n\n\n\n\nAny Other Names#\n\nIf you need to use environment variables with any other names in your code, you\ncan config source.globalVars, for example:\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    globalVars: {\n      'process.env.VERSION': process.env.VERSION,\n    }.\n  },\n});\n\n\nAt this point, the process.env.VERSION in the code will be replaced with the\nvalue of VERSION in the environment variables.\n\nNOTE\n\nsource.globalVars also supports replacing other expressions or strings with\nspecified values, not limited to environment variables.\n\n\nUse Global Replacement#\n\nIn addition to environment variables, Modern.js also supports replacing\nvariables in code with other values or expressions, which can be used like\ndistinguish development environment and production environment in code.\n\nFor example, converts the expression TWO to 1 + 1:\n\nexport default {\n  source: {\n    define: {\n      TWO: '1 + 1',\n    },\n  },\n};\n\n\nconst foo = TWO;\n\n// ⬇️ Turn into being...\nconst foo = 1 + 1;\n\n\nIn most cases, source.globalVars is already sufficient to replace variables. But\nthe values passed in by source.globalVars will be serialized by JSON by default.\nSo it cannot be replaced like 1 + 1 in the example above, at this time, we need\nuse source.define.","frontmatter":{"title":"Environment Variable","sidebar_position":7},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/env-vars.mdx","_relativePath":"en/guides/basic-features/env-vars.mdx"},{"id":210,"title":"HTML Template","routePath":"/en/guides/basic-features/html","lang":"en","toc":[{"text":"JSX syntax","id":"jsx-syntax","depth":2,"charIndex":-1},{"text":"HTML Component","id":"html-component","depth":3,"charIndex":-1},{"text":"Template Params","id":"template-params","depth":3,"charIndex":-1},{"text":"Examples","id":"examples","depth":3,"charIndex":-1},{"text":"Html Synxtax","id":"html-synxtax","depth":2,"charIndex":-1},{"text":"Custom HTML Fragments","id":"custom-html-fragments","depth":3,"charIndex":-1},{"text":"Fully Custom HTML Templates","id":"fully-custom-html-templates","depth":3,"charIndex":-1},{"text":"Template Params","id":"template-params-1","depth":3,"charIndex":-1},{"text":"Config By Entry","id":"config-by-entry","depth":3,"charIndex":-1}],"domain":"","content":"Some Params:\n\n\nentryName：{entryName}\n\n\ntitle：{htmlConfig.title}\n\n\nrootId: {templateParams.mountId}\n\n\nbottom\n\n\nSome Params:\n\n\nentryName：sub\n\n\ntitle：\n\n\nrootId: root\n\n\nbottom\n\nWe're sorry but react app doesn't work properly without JavaScript enabled.\nPlease enable it to continue.\n\n<%= bodyTemplate %> {/* webpack inject js */} {/* */}","frontmatter":{"title":"HTML Template","sidebar_position":9},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/html.mdx","_relativePath":"en/guides/basic-features/html.mdx"},{"id":211,"title":"Mock","routePath":"/en/guides/basic-features/mock","lang":"en","toc":[{"text":"Mock File","id":"mock-file","depth":2,"charIndex":163},{"text":"Writing Mock Files","id":"writing-mock-files","depth":2,"charIndex":400},{"text":"Return Random Data","id":"return-random-data","depth":2,"charIndex":1215},{"text":"Delayed Return","id":"delayed-return","depth":2,"charIndex":1566},{"text":"Use Mock On Demand","id":"use-mock-on-demand","depth":2,"charIndex":1852}],"domain":"","content":"#\n\nModern.js provides the ability to quickly generate Mock data, allowing the\nfront-end to develop independently without being blocked by the back-end\ninterface.\n\n\nMock File#\n\nBy convention, when there is index.[jt]s in the config/mock/ directory, the Mock\nData will be automatically enabled, as follows:\n\n.\n├── config\n│   └── mock\n│       └── index.ts\n├── src\n│   └── App.tsx\n└── modern.config.ts\n\n\n\nWriting Mock Files#\n\nthe config/mock/index.ts file only needs to export an object containing all Mock\nAPIs. The properties of the object are composed of the request configuration\nmethod and url, and the corresponding property values can be Object, Array,\nFunction:\n\nexport default {\n  /* The attribute is the concrete method and request url, and the value is object or array as the result of the request */\n  'GET /api/getInfo': { data: [1, 2, 3, 4] },\n\n  /* the default method is GET */\n  '/api/getExample': { id: 1 },\n\n  /* You can use custom functions to dynamically return data */\n  'POST /api/addInfo': (req, res, next) => {\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.end('200');\n  },\n};\n\n\nwhen access http://localhost:8080/api/getInfo, the api will return json {\n\"data\": [1, 2, 3, 4] }.\n\n\nReturn Random Data#\n\nLibraries such as Mock.js can be used in config/mock/index.js to generate random\ndata, for example:\n\nconst Mock = require('mockjs');\n\nmodule.exports = {\n  '/api/getInfo': Mock.mock({\n    'data|1-10': [{ name: '@cname' }],\n  }) /* => {data: [{name: \"董霞\"}, {name: \"魏敏\"},  {name: \"石磊\"}} */,\n};\n\n\nOther Mock Lib\n * Chancejs\n * Mock\n\n\nDelayed Return#\n\n * It can be achieved using the function of the browser \"weak connection\n   simulation\".\n * Delays can be set via setTimeout, for example:\n\nexport default {\n  'api/getInfo': (req, res) => {\n    setTimeout(() => {\n      res.end('delay 2000ms');\n    }, 2000);\n  },\n};\n\n\n\nUse Mock On Demand#\n\nUnder the config/mock/index.ts, you can also export the config to control the\nMock service.\n\ntype MockConfig = {\n  enable: ((req: IncomingMessage, res: ServerResponse) => boolean) | boolean;\n};\n\nexport const config = {\n  enable: false\n}\n\n\nCurrently only the enable configuration is supported, through which developers\ncan control whether to execute Mock.\n\nNOTE\n\nAfter modifying config, there is no need to restart the service, which will take\neffect immediately.","frontmatter":{"title":"Mock","sidebar_position":6},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/mock.mdx","_relativePath":"en/guides/basic-features/mock.mdx"},{"id":212,"title":"Proxy","routePath":"/en/guides/basic-features/proxy","lang":"en","toc":[{"text":"Local Proxy","id":"local-proxy","depth":2,"charIndex":3},{"text":"Global Proxy","id":"global-proxy","depth":2,"charIndex":547},{"text":"BFF Proxy","id":"bff-proxy","depth":2,"charIndex":563}],"domain":"","content":"#\n\n\nLocal Proxy#\n\nModern.js provides a way to configure the development proxy in tools.devServer.\nFor example, to proxy the local interface to an online address:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  tools: {\n    devServer: {\n      proxy: {\n        '/go/api': {\n          target: 'http://www.example.com/',\n          changeOrigin: true,\n        },\n      },\n    },\n  },\n});\n\n\nwhen access http://localhost:8080/go/api, the response content is returned from\nhttp://www.example.com/.\n\nINFO\n\nFor more detail, see http-proxy-middleware.\n\n\nGlobal Proxy#\n\n\nBFF Proxy#\n\nBy configuring bff.proxy, you can proxy BFF API requests to specified services.\nUnlike other proxy above, it can also be used in the production environment:\n\nmodern.config.ts\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api/v1': 'https://cnodejs.org',\n    },\n  },\n});\n\n\nFor example, when a BFF call is used in the code, the final request\nhttp://localhost:8080/api/v1/topics will auto proxy to\nhttps://cnodejs.org/api/v1/topics:\n\n\n\ngetTopics();\n","frontmatter":{"title":"Proxy","sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/proxy.mdx","_relativePath":"en/guides/basic-features/proxy.mdx"},{"id":213,"title":"Routes","routePath":"/en/guides/basic-features/routes","lang":"en","toc":[{"text":"Conventional routing","id":"conventional-routing","depth":2,"charIndex":333},{"text":"Routing file convention","id":"routing-file-convention","depth":3,"charIndex":1178},{"text":"Layout","id":"layout","depth":4,"charIndex":2017},{"text":"Page","id":"page","depth":4,"charIndex":3323},{"text":"Dynamic routing","id":"dynamic-routing","depth":3,"charIndex":3463},{"text":"Catch all routing","id":"catch-all-routing","depth":3,"charIndex":3939},{"text":"Layout with No Path","id":"layout-with-no-path","depth":3,"charIndex":4671},{"text":"No Layout","id":"no-layout","depth":3,"charIndex":5369},{"text":"(WIP)Loading","id":"(wip)loading","depth":3,"charIndex":5986},{"text":"Redirect","id":"redirect","depth":3,"charIndex":6798},{"text":"ErrorBoundary","id":"errorboundary","depth":3,"charIndex":7184},{"text":"Hooks before rendering","id":"hooks-before-rendering","depth":3,"charIndex":8190},{"text":"Runtime Configuration","id":"runtime-configuration","depth":3,"charIndex":9718},{"text":"Prefetch","id":"prefetch","depth":3,"charIndex":10002},{"text":"FAQ","id":"faq","depth":4,"charIndex":11548},{"text":"Self-controlled routing","id":"self-controlled-routing","depth":2,"charIndex":12038}],"domain":"","content":"#\n\nModern.js build-in provides partial support for React Router 6 and provides\nvarious types of routing modes. According to different entry types, routing is\ndivided into three modes, namely Conventional routing, Self-controlled routing\nand Other.\n\nNOTE\n\nThe routes mentioned in this section are client routes, that is, SPA routes.\n\n\nConventional routing#\n\nWith routes/ as the agreed entry, Modern.js will automatically generate the\ncorresponding routing structure based on the file system.\n\nModern.js supports the popular convention routing mode in the industry: nested\nrouting. When using nested routing, the routing of the page corresponds the UI\nstructure, and we will introduce this routing mode in detail.\n\n/user/johnny/profile                  /user/johnny/posts\n+------------------+                  +-----------------+\n| User             |                  | User            |\n| +--------------+ |                  | +-------------+ |\n| | Profile      | |  +------------>  | | Posts       | |\n| |              | |                  | |             | |\n| +--------------+ |                  | +-------------+ |\n+------------------+                  +-----------------+\n\n\n\nRouting file convention#\n\nThere are two file conventions in the routes/ directory layout.[jt]sx and\npage.[jt]sx(abbreviated as .tsx later). These two files determine the layout\nhierarchy of the application, where layout.tsx is used as the layout component,\nand page.tsx is used as the content component, which is the leaf node of the\nentire routing table.\n\nFor example, here routes/layout.tsx will be used as the layout component of all\ncomponents under the / route:\n\n.\n└── routes\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\nWhen the route is /, there will be the following UI layout:\n\n\n  \n\n\n\nSimilarly, routes/user/layout.tsx will be used as a layout component for all\ncomponents under the /user route. When the route is /user, the following UI\nlayout will be available:\n\n\n  \n    \n  \n\n\n\nLayout#\n\ncomponent refers to all layout.tsx files in the routes/ directory, which\nrepresent the layout of the corresponding route segment, and use to represent\nsub-components.\n\nNOTE\n\nis a new API in React Router 6, see Outlet for details.\n\nIn order to facilitate the introduction of the relationship between and , the\nfollowing file directory example:\n\n.\n└── routes\n    ├── blog\n    │   └── page.tsx\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\n 1. When the route is /, in routes/layout.tsx represents the component exported\n    in routes/page.tsx, generating the following UI structure:\n\n\n  \n\n\n\n 2. When the route is /blog, in routes/layout.tsx represents the component\n    exported in routes/blog/page.tsx, generating the following UI structure:\n\n\n  \n\n\n\n 3. When the route is /user, in routes/layout.tsx represents the component\n    exported in routes/user/layout.tsx. in routes/user/layout.tsx represents the\n    component exported in routes/user/page.tsx. Generate the following UI\n    structure:\n\n\n  \n    \n  \n\n\n\nIn summary, if there is a layout.tsx in the file directory of the subroute, the\nin the previous layout.tsx is the layout.tsx under the file directory of the\nsubroute, otherwise it is the page.tsx under the file directory of the subroute.\n\nPage#\n\nAll routes should end with the component. In the page.tsx file, if the developer\nintroduces the component, it will have no effect.\n\n\nDynamic routing#\n\nWith a file directory named [], the generated route will be used as a dynamic\nroute. For example the following file directory:\n\n└── routes\n    ├── [id]\n    │   └── page.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/[id]/page.tsx file is converted to the /:id route. Except for the\n/blog route that exactly matches, all other /xxx will match this route.\n\nIn component, you can get the corresponding named parameters through useParams.\n\n\nCatch all routing#\n\nIf a $.tsx file is created in the routes directory, this file will act as a\nwildcard route component that will be rendered when there is no matching route.\n\nNOTE\n\n$.tsx can be thought of as a special page routing component that renders $.tsx\nas a child of layout when there is a layout component in the current directory.\n\nFor example, the following directory structure:\n\n└── routes\n    ├── $.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/$.tsx component is rendered when accessing any path that does not\nmatch, and again, the remainder of the url can be captured in $.tsx using\nuseParams.\n\n$.tsx\n\n\n// When the path is `/aaa/bbb`\nconst params = useParams();\nparams['*']; // => 'aaa/bbb'\n\n\n\nLayout with No Path#\n\nWhen a directory name begins with __, the corresponding directory name is not\nconverted to the actual routing path, such as the following file directory:\n\n.\n└── routes\n    ├── __auth\n    │   ├── layout.tsx\n    │   ├── login\n    │   │   └── page.tsx\n    │   └── signup\n    │       └── page.tsx\n    ├── layout.tsx\n    └── page.tsx\n\n\nModern.js will generate two routes, /login and /sign, __auth/layout.tsx\ncomponent will be used as the layout component of login/page.tsx and\nsignup/page.tsx, but __auth will not be used as the route path fragment.\n\nThis feature is useful when you need to do separate layouts for certain types of\nroutes, or when you want to categorize routes.\n\n\nNo Layout#\n\nIn some cases, the project needs more sophisticated routes, but these routes do\nnot have independent UI layouts. If you create a route like a normal file\ndirectory, the directory level will be deeper.\n\nTherefore Modern.js supports splitting routing fragments by . instead of file\ndirectory. For example, when you need /user/profile/2022/edit, you can directly\ncreate the following file:\n\n└── routes\n    ├── user.profile.[id].edit\n    │      └── page.tsx\n    ├── layout.tsx\n    └── page.tsx\n\n\nWhen accessing a route, you will get the following UI layout:\n\n\n   // routes/user.profile.[id].edit/page.tsx\n\n\n\n\n(WIP)Loading#\n\nIn each layer directory under routes/, developers can create loading.tsx files\nand export a component by default.\n\nWhen the component exists in the routing directory, all routing switches under\nthis level of subrouting will use the component as the Fallback UI when JS Chunk\nis loaded. When the layout.tsx file is not defined in this directory, the\ncomponent will not take effect. For example, the following file directory:\n\n.\n└── routes\n    ├── blog\n    │   ├── [id]\n    │   │   └── page.tsx\n    │   └── page.tsx\n    ├── layout.tsx\n    ├── loading.tsx\n    └── page.tsx\n\n\nWhen a route jumps from / to /blog, if the JS Chunk of the component is not\nloaded, the component UI exported in loading.tsx will be displayed first. But\nwhen jumping from /blog to /blog/20220101, it will not be displayed.\n\n\nRedirect#\n\nYou can redirect routes by creating a data loader file, Suppose you have the\nfile routes/user/page.tsx and you want to redirect the route corresponding to\nthis file, you can create the file routes/user/page.loader.ts:\n\nroutes/user/page.loader.ts\n\n\n\nexport default () => {\n  const user = await getUser();\n  if (!user) {\n    return redirect('/login');\n  }\n  return null;\n};\n\n\n\nErrorBoundary#\n\nIn each layer directory under routes/, the developer can also define a error.tsx\nfile, and export a component by default.\n\nWhen the component exists in a routing directory, the component render error is\ncaught by the ErrorBoundary component. The component does not take effect when\nthe directory does not have a layout.tsx file defined.\n\ncan return the UI view when the error occurred. When the component is not\ndeclared at the current level, the error will bubble up to the higher component\nuntil it is caught or throws an error. At the same time, when a component fails,\nit will only affect the routed component and sub-component that caught the\nerror. The state and view of other components are not affected and can continue\nto interact.\n\nWithin the component, you can use useRouteError to get the specific information\nof the error:\n\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return (\n    \n\n      \n\n\n{error.status}\n      \n\n\n{error.message}\n    \n  );\n};\n\n\n\nHooks before rendering#\n\nIn some scenarios where you need to do some operations before the application\nrenders, you can define init hooks in routes/layout.tsx. init will be executed\non both the client and server side, the basic usage example is as follows:\n\nsrc/routes/layout.tsx\n\n\n\nexport const init = (context: RuntimeContext) => {\n  // do something\n};\n\n\nThe init hook allows you to mount some global data and access the runtimeContext\nvariable from elsewhere in the application:\n\nNOTE\n\nThis feature is useful when the application requires pre-page data, custom data\ninjection or framework migration (e.g. Next.js)\n\nsrc/routes/layout.tsx\n\n\n\nexport const init = (context: RuntimeContext) => {\n  return {\n    message: 'Hello World',\n  };\n};\n\n\nsrc/routes/page.tsx\n\n\n\nexport default () => {\n  const { context } = useRuntimeContext();\n  const { message } = context.getInitData();\n\n  return \n{message};\n};\n\n\nWhen working with SSR, the browser side can get the data returned by init during\nSSR, and the developer can decide whether to retrieve the data on the browser\nside to overwrite the SSR data, for example:\n\nsrc/routes/layout.tsx\n\n\n\nexport const init = (context: RuntimeContext) => {\n  if (process.env.MODERN_TARGET === 'node') {\n    return {\n      message: 'Hello World By Server',\n    };\n  } else {\n    const { context } = runtimeContext;\n    const data = context.getInitData();\n    // If do not get the expected data\n    if (!data.message) {\n      return {\n        message: 'Hello World By Client',\n      };\n    }\n  }\n};\n\n\n\nRuntime Configuration#\n\nIn each root Layout component (routes/layout.ts), the application runtime\nconfiguration can be dynamically defined:\n\nsrc/routes/layout.tsx\n\n\n\nexport const config = (): AppConfig => {\n  return {\n    router: {\n      supportHtml5History: false,\n    },\n  };\n};\n\n\n\nPrefetch#\n\nWhen using convention-based routing, Modern.js will automatically split chunks\naccording to the route, and when the user accesses a specific route, the\ncorresponding resources will be loaded automatically, which can effectively\nreduce the first screen loading time. However, this also brings a problem, when\nthe user accesses a route, if the asset corresponding to that route is not yet\nloaded, a white screen will appear.\n\nIn this case you can show a custom loading component by defining a loading\ncomponent before the static resource is loaded.\n\nTo further improve the user experience and reduce time of loading, Modern.js\nsupports defining the prefetch property on the Link component to load static\nresources and data in advance, with three optional values for the prefetch\nproperty:\n\n\n\n\nINFO\n * This feature is currently only supported in Webpack projects, not in Rspack\n   projects.\n * Prefetching of data will only prefetch the data returned from the data loader\n   of the SSR project.\n\n * none, the default value, will not do prefetch, no additional behavior.\n * intent, the value we recommend for most scenarios, will automatically start\n   loading the corresponding resources and the data defined in the data loader\n   when you mouse over the Link, and will automatically unload it when the mouse\n   is moved away. In our tests, even a direct click can reduce the loading time\n   by about 200ms.\n * render, when the Link component renders, it will load the corresponding\n   resources and the data defined in the data loader.\n\nFAQ#\n\n 1. What is the difference between using render and not split chunks based on\n    routes?\n\n * With render you can specify which routes are loaded on the first screen, and\n   you can control the rendering so that Link components are rendered only when\n   they are in the visible area.\n\n * With render, static resources are loaded only when they are idle and do not\n   hog the network with first-screen static resources.\n\n * When using server side rendering, data is also prefetched.\n\n\nSelf-controlled routing#\n\nWith src/App.tsx as the agreed entry, Modern.js will not do additional\noperations with multiple routes, developers can use the React Router 6 API for\ndevelopment by themselves, for example:\n\nsrc/App.tsx\n\n\n\nexport default () => {\n  return (\n    \n      \n        index\n\n} /> about\n} /> ); };\nNOTE\n\nModern.js has a series of resource loading and rendering optimizations to the\ndefault convention-based routing, and provides out-of-the-box SSR capabilities,\nwhen using self-directed routing, need to be packaged by the developer, and it\nis recommended that developers use convention-based routing.\n\nuse self-controller routing, if the developer turns off the runtime.router\nconfiguration and uses react-router-dom directly, then you need to wrap the\nProvider according to the React Router documentation.\n\nsrc/App.tsx\n\n\n## Other\n\nBy default, Modern.js turn on the built-in routing scheme, React Router.\n\n```js\nexport default defineConfig({\n  runtime: {\n    router: true,\n  },\n});\n\n\nModern.js exposes the React Router API from the @modern-js/runtime/router\nnamespace for developers to use, ensuring that developers and Modern.js use the\nsame code. In addition, in this case, the React Router code will be packaged\ninto JS products. If the project already has its own routing scheme, or does not\nneed to use client routing, this feature can be turned off.\n\nexport default defineConfig({\n  runtime: {\n    router: false,\n  },\n});\n","frontmatter":{"title":"Routes","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/basic-features/routes.mdx","_relativePath":"en/guides/basic-features/routes.mdx"},{"id":214,"title":"Builder","routePath":"/en/guides/concept/builder","lang":"en","toc":[{"text":"Build Architecture","id":"build-architecture","depth":2,"charIndex":314},{"text":"Builder Documentation","id":"builder-documentation","depth":2,"charIndex":558},{"text":"Builder Config","id":"builder-config","depth":2,"charIndex":1019},{"text":"Building Features","id":"building-features","depth":2,"charIndex":1540}],"domain":"","content":"#\n\nModern.js uses Modern.js Builder to build your Web App.\n\nModern.js Builder is one of the core components of Modern.js. It is A build\nengine for web development. and can be used independently of Modern.js.\nModern.js Builder supports multiple bundlers such as webpack and Rspack, and it\nuses webpack by default.\n\n\nBuild Architecture#\n\nFrom the perspective of building, Modern.js is divided into three layers, from\ntop to bottom:\n\n * Upper-layer framework: Modern.js.\n * Universal build engine: Modern.js Builder.\n * Low-level bundlers: webpack and rspack.\n\n\nBuilder Documentation#\n\nSince Modern.js Builder is a module that can be used independently, we provide a\nseparate document for it, the site address is: modernjs.dev/builder.\n\nIn this document, you can learn about the detailed introduction of Modern.js\nBuilder, and you can also find a complete usage guide for each building\nfeatures. When you encounter building issues, it is recommended that you first\nread the Modern.js Builder documentation to solve them.\n\n\nBuilder Config#\n\nThe config of Modern.js is inherited from Modern.js Builder, so you can use all\nbuild configs provided by Modern.js Builder in Modern.js.\n\nTake the html.title config of Modern.js Builder as an example, you can directly\nuse this config in the modern.config.ts file, and it will be automatically\npassed to Modern.js Builder.\n\nmodern.config.js\n\nexport default defineConfig({\n  html: {\n    title: 'example',\n  },\n});\n\n\nFor details of building configs, please refer to 「Modern.js Builder - Builder\nConfig」.\n\n\nBuilding Features#\n\nModern.js Builder provides a wealth of building features, including dozens of\nfeatures such as JavaScript compilation, CSS compilation, static resource\nprocessing, hot module replacement, code compression, and TS type checking.\n\nWe recommend you to read 「Modern.js Builder - All Features」 to learn all the\nbuilding features provided by Modern.js Builder.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/concept/builder.mdx","_relativePath":"en/guides/concept/builder.mdx"},{"id":215,"title":"Entries","routePath":"/en/guides/concept/entries","lang":"en","toc":[{"text":"What is an Entry","id":"what-is-an-entry","depth":2,"charIndex":112},{"text":"Single Entry and Multiple Entries","id":"single-entry-and-multiple-entries","depth":2,"charIndex":651},{"text":"Entry Type","id":"entry-type","depth":2,"charIndex":2120},{"text":"Framework Mode Entry","id":"framework-mode-entry","depth":3,"charIndex":3303},{"text":"Conventional Routing","id":"conventional-routing","depth":4,"charIndex":3711},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":4,"charIndex":4048},{"text":"Custom Bootstrap","id":"custom-bootstrap","depth":4,"charIndex":4335},{"text":"Build Mode Entry","id":"build-mode-entry","depth":3,"charIndex":5477},{"text":"Specify Entry Using Configuration","id":"specify-entry-using-configuration","depth":2,"charIndex":6329},{"text":"Disable Default Entries","id":"disable-default-entries","depth":3,"charIndex":6966}],"domain":"","content":"#\n\nThrough this chapter, you can learn about the entry convention in Modern.js and\nhow to customize the entry.\n\n\nWhat is an Entry#\n\nEntry is the starting module of a page.\n\nIn the Modern.js project, each entry corresponds to an independent page, and\nalso corresponds to a server route. By default, Modern.js will automatically\ndetermine the entry of the page based on the directory convention, and also\nsupports customizing the entry through configuration items.\n\nMany configuration items provided by Modern.js are divided by entry, such as\npage title, HTML template, page Meta information, whether to enable SSR/SSG,\nserver-side routing rules, etc.\n\n\nSingle Entry and Multiple Entries#\n\nThe project initialized by Modern.js is single-entry (SPA), and the project\nstructure is as follows:\n\n.\n├── src\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n├── package.json\n├── modern.config.ts\n└── tsconfig.json\n\n\nModern.js can easily switch from single entry to multiple entry. You can execute\npnpm run new under the project to create entry through generator:\n\n? Action: Create project element\n? Create project element: New \"entry\"\n? Entry name: new-entry\n\n\nAfter execution, Modern.js will automatically generate a new entry directory,\nand you can see that the src/ directory has the following structure:\n\n.\n├── myapp     # Original entry\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n└── new-entry  # New entry\n    └── routes\n        ├── index.css\n        ├── layout.tsx\n        └── page.tsx\n\n\nThe original code was moved to the directory with the same name as the name in\nthe package.json, and a new directory was created.\n\nAfter executing pnpm run dev, you can see that a /new-entry route has been\nadded, and the migrated code route has not changed.\n\nTIP\n\nModern.js will use the entry with the same name as the name field in the\npackage.json file as the main entry, the route of the main entry is /, and the\nroute of other entries is /{entryName}.\n\nFor example, when name in package.json is myapp, src/myapp will be used as the\nmain entry of the project.\n\n\nEntry Type#\n\nDifferent entry types have different compile and run-time behaviors. When\ncreating a project in Modern.js, developers can manually choose to create a\nproject in framework mode or build mode. After the creation is complete, you can\nsee that the project template files for different modes are different.\n\nBy default, Modern.js will scan the files under src/ before starting the\nproject, identify the entry, and generate the corresponding server-side route.\n\nTIP\n\nYou can change the entry directory to another directory through\nsource.entriesDir.\n\nNot all first-level directories under src/ will become project entries, and the\ndirectory where the entry is located must meet one of the following four\nconditions:\n\n 1. Have a routes/ directory\n 2. Has App.[jt]sx? file\n 3. Has index.[jt]sx? file\n 4. Has a pages/ directory (Modern.js 1.0 compatible)\n\nWhen the src/ directory meets the entry characteristics, Modern.js will consider\nthe current project as a single-entry application.\n\nTIP\n\nIn single-entry applications, the default entry is named main.\n\nWhen the project is not a single-entry application, Modern.js will further check\nthe first-level directory under src/.\n\n\nFramework Mode Entry#\n\nFramework mode refers to the need to use the capabilities of the Modern.js\nframework, such as Router, SSR, integrated calls, etc. Under this kind of entry\nagreement, the entry defined by the developer is not the real Webpack\ncompilation entry. Modern.js will generate an encapsulated entry when it starts,\nand the real entry can be found in node_modules/.modern/{entryName}/index.js.\n\nConventional Routing#\n\nIf there is a routes/ directory in the entry, Modern.js will scan the files\nunder routes/ at startup, and automatically generate client-side routes\n(react-router) based on file conventions. For example:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       └── page.tsx\n\n\nFor details, please refer to routing.\n\nSelf-controlled Routing#\n\nIf there is an App.[jt]sx? file in the entry, the developer can freely set the\nclient route in this file, or not set the client route.\n\n\n\nexport default () => {\n  return (\n    \n      \n        index\n\n} /> about\n} /> ); };\n\nFor details, please refer to routing.\n\nCustom Bootstrap#\n\nIf there is an index.[jt]sx file in the entry, and when the file defaults to\nexporting functions, Modern.js will pass the default bootstrap function as an\nimported parameter, and replace the default bootstrap with the exported\nfunction, so that developers can customize Mounting components to DOM nodes, or\nadding custom behavior before mounting. E.g:\n\nexport default (App: React.ComponentType, bootstrap: () => void) => {\n  // do something before bootstrap...\n  initSomething().then(() => {\n    bootstrap();\n  })\n};\n\n\nWARNING\n\nSince the bootstrap function needs to be compatible with React17 and React18,\nyou need to manually pass in ReactDOM parameters when calling the bootstrap\nfunction.\n\nThe content of the file generated by Modern.js is as follows:\n\n\n\n\n\n\n\nconst IS_BROWSER = typeof window !== 'undefined' && window.name !== 'nodejs';\nconst MOUNT_ID = 'root';\n\nlet AppWrapper = null;\n\nfunction render() {\n  AppWrapper = createApp({\n    // plugin parameters for runtime...\n  })(App);\n  if (IS_BROWSER) {\n    customBootstrap(AppWrapper);\n  }\n  return AppWrapper;\n}\n\nAppWrapper = render();\n\nexport default AppWrapper;\n\n\n\nBuild Mode Entry#\n\nBuild mode refers to the ability not to use any Modern.js runtime, and the\ndeveloper defines the entry of the project Webpack completely by himself.\n\nIf index.[jt]sx exists in the entry and there is no default export function,\nthen this file is the real Webpack entry file. This is similar to Create React\nApp, you need to mount components to DOM nodes, add hot update code, etc. For\nexample:\n\nsrc/index.jsx\n\n\n\n\n\nReactDOM.render(, document.getElementById('root'));\n\n\nModern.js not recommended new project to use this method, this method loses some\ncapabilities of the framework, such as the runtime configuration in the\nmodern.config.js file will no longer take effect. But this method will be very\nuseful when the project is migrated from other frameworks to Modern.js, such as\nCRA, or webpack that is manually built by yourself.\n\n\nSpecify Entry Using Configuration#\n\nMost existing projects are not built according to the directory convention of\nModern.js. If you want to change to the directory structure agreed by Modern.js,\nthere will be a certain migration cost.\n\nIn this case, instead of generating the entry using file conventions, you can\nmanually configure the entry in modern.config.[jt]s.\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    entries: {\n      // Specify a new entry named entry_customize\n      entry_customize: './src/home/test/index.ts',\n    },\n    // Disable default ingress scanning\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nDisable Default Entries#\n\nWhen using a custom entry, part of the project structure may happen to hit the\ndirectory convention of Modern.js, but in fact this part of the directory is not\nthe real entry.\n\nModern.js provides disableDefaultEntries config to disable default entry\nscanning rules. When you need to customize the entry, you generally need to use\ndisableDefaultEntries with entries. In this way, some existing projects can be\nquickly migrated without modifying the directory structure.\n\nmodern.config.ts\n\nexport default defineConfig({\n  source: {\n    disableDefaultEntries: true,\n  },\n});\n\n\nTIP\n\nFor detailed usage, please refer to source.entries and\nsource.disableDefaultEntries.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/concept/entries.mdx","_relativePath":"en/guides/concept/entries.mdx"},{"id":216,"title":"Glossary","routePath":"/en/guides/get-started/glossary","lang":"en","toc":[{"text":"BFF","id":"bff","depth":2,"charIndex":3},{"text":"Bundler","id":"bundler","depth":2,"charIndex":497},{"text":"Builder","id":"builder","depth":2,"charIndex":853},{"text":"CSR","id":"csr","depth":2,"charIndex":1318},{"text":"Garfish","id":"garfish","depth":2,"charIndex":1728},{"text":"Rspack","id":"rspack","depth":2,"charIndex":2175},{"text":"SSR","id":"ssr","depth":2,"charIndex":2683},{"text":"SSG","id":"ssg","depth":2,"charIndex":3465},{"text":"SWC","id":"swc","depth":2,"charIndex":4234}],"domain":"","content":"#\n\n\nBFF#\n\nBFF stands for \"Backend For Frontend\". It is an architectural pattern where a\ndedicated backend service is created for frontend applications.\n\nThe BFF service acts as an intermediary between the frontend application and the\nbackend APIs, providing a tailored API for the frontend to consume. This allows\nthe frontend developers to have more control over the data and functionality\nthat they need, without having to rely on a monolithic backend API to provide\ncoresponding capabilities.\n\n\nBundler#\n\nRefers to module bundlers such as webpack, Rspack.\n\nThe main goal of bundlers is to bundle JavaScript, CSS and other files together,\nand the bundled files can be used in the browser, Node.js or other environments.\nWhen bundler processes the Web application, it builds a dependency graph and\nthen combines every module into one or more bundles.\n\n\nBuilder#\n\nRefers to the build engine. The goal of Builder is to \"reuse the best practices\nof build tools\".\n\nBundlers are low-level, when we build a project based on webpack, we need to\nfully understand the webpack config and many webpack plugins and loaders, then\nspend a lot of time to combine them.\n\nBuilder is out-of-box. By using Builder, you can quickly gain the ability to\nbuild a web application.\n\nThe layers within the Modern.js Builder are as follows:\n\n\n\n\nCSR#\n\nCSR stands for \"Client-Side Rendering\". It means that pages are rendered\ndirectly in the browser using JavaScript. All the logic, data fetching,\ntemplating and routing is done on the client rather than the server.\n\nIn CSR, the server sends an empty HTML shell to the client along with some\nJavaScript bundles, which then fetches data from the server's APIs and populates\nthe page with dynamic content.\n\n\nGarfish#\n\nGarfish is a set of micro front-end solutions mainly used to solve problems such\nas cross-team collaboration and technical system diversification of web\napplications.\n\nStarting from the architectural level, it integrates several independently\ndelivered front-end applications. These front-end applications can be developed,\ntested and deployed independently, but from the user's point of view they are\nstill a cohesive single product.\n\n\nRspack#\n\nRspack is a high performance Rust-based JavaScript bundler that offers strong\ninteroperability with the webpack ecosystem, enabling faster development cycles\nand efficient collaboration between the two tools.\n\nRspack's build performance is significantly better than Webpack, not only due to\nthe language benefits of Rust, but also due to its parallel architecture and\nincremental compilation features. Benchmarking has shown that Rspack can deliver\na 5-10x improvement in compilation performance.\n\n\nSSR#\n\nSSR stands for \"Server-Side Rendering\". It is a technique where the server\ngenerates the HTML of a web page and sends it to the client, instead of sending\njust an empty HTML shell and relying on JavaScript to populate the page.\n\nIn traditional client-side rendering, the server sends an empty HTML shell to\nthe client along with some JavaScript bundles, which then fetches data from the\nserver's APIs and populates the page with dynamic content. This can result in a\nslower initial load time, which can be detrimental to user experience and SEO.\n\nWith SSR, the server generates the HTML with the dynamic content already\npopulated, and sends it to the client. This can result in a faster initial load\ntime and better SEO, as search engines can crawl the fully rendered page.\n\n\nSSG#\n\nSSG stands for \"Static Site Generation\". It is a technique where a web page is\npre-rendered into static HTML, and then served directly to the client without\nthe need for a server to generate the HTML on the fly.\n\nIn traditional SSR, the server generates the HTML on the fly each time a user\nrequests a page. With SSG, the HTML is generated ahead of time during the build\nprocess and can be served directly from a CDN or other static hosting service.\n\nSSG can provide faster load times and less server overhead to traditional SSR,\nas there is no need to maintain a server to generate the HTML on the fly.\nHowever, it is not suitable for websites that require dynamic content, as the\nHTML is generated during the build process and cannot be updated in real-time.\n\n\nSWC#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js Builder has a out-of-box plugin for SWC, power your Web application\nwith Polyfill and minification, we also port some common used Babel plugins to\nSWC.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/get-started/glossary.mdx","_relativePath":"en/guides/get-started/glossary.mdx"},{"id":217,"title":"Introduction","routePath":"/en/guides/get-started/introduction","lang":"en","toc":[{"text":"About Documentation","id":"about-documentation","depth":2,"charIndex":557},{"text":"Modern.js Framework","id":"modernjs-framework","depth":2,"charIndex":1169},{"text":"Next","id":"next","depth":2,"charIndex":3003}],"domain":"","content":"#\n\nModern.js is an open source web engineering system from ByteDance, which\nprovides multiple solutions to help developers solve problems in different\ndevelopment scenarios.\n\nCurrently, Modern.js includes three solutions, each targeting at different\ndevelopment scenarios: web application development, npm package development, and\ndocument site development:\n\nAs a part of the Modern.js engineering system, each of these solutions can be\nused separately and has its own independent documentation site. Developers can\nchoose one or more solutions as needed.\n\n\nAbout Documentation#\n\nThis documentation site corresponds to the Modern.js framework, which is used to\ndeveloping web applications.\n\n * If you are developing an npm package, please refer to the Modern.js Module\n   documentation.\n * If you are developing a document site, please refer to the Modern.js Doc\n   documentation.\n * If you want to use the Modern.js's builder engine to implement a web\n   framework, please refer to the Modern.js Builder documentation.\n\nTIP\n\nAs the Modern.js framework is the most widely used, in this documentation site,\nwe will omit the \"framework\" and simply call it as Modern.js.\n\n\nModern.js Framework#\n\nThe Modern.js framework is a progressive web framework based on React. At\nByteDance, we use Modern.js to build upper-level frameworks that have supported\nthe development of thousands of web applications.\n\nModern.js can provide developers with the ultimate development experience,\nmaking the application get better user experience.\n\nIn the process of developing React applications, developers often need to design\nimplementations for certain functions, or use other libraries and frameworks to\nsolve these problems.\n\nModern.js supports all the configuration and tools required by React\napplications, and has additional features and optimisations built in. Developers\ncan use React to build the UI of the application, and then gradually adopt\nModern.js functions to solve common application requirements, such as routing,\ndata fetching, state management, etc.\n\nIt mainly contains the following features:\n\n * 🚀 Rust Bundler: Easily switch to Rspack bundler with faster build speed.\n * 🪜 Progressive: Create projects with the most streamlined templates,\n   gradually turn on plugin capabilities through generators, and customize\n   solutions.\n * 🏠 Integration: The development is unique to the production environment Web\n   Server, CSR and SSR are isomorphic development, and the function as the API\n   service call.\n * 📦 Out Of The Box: Default TS support, built-in build core, ESLint, debugging\n   tools, full functionality can be tested.\n * 🌏 Ecology: Self-developed state management, micro frontend, module\n   packaging, Monorepo solution and other peripheral requirements.\n * 🕸 Routing Modes: Contains controlled routing, routing based on file\n   conventions (nested routing), configurable routing, etc.\n * 🚀 Independently Build Core: Support a variety of packaging tools, deep\n   optimization bundle.\n\n\nNext#\n\nIf you want to know how to use Modern.js, you can try Create your first app, or\nread Quick Start.","frontmatter":{"title":"Introduction","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/get-started/introduction.mdx","_relativePath":"en/guides/get-started/introduction.mdx"},{"id":218,"title":"Quick Start","routePath":"/en/guides/get-started/quick-start","lang":"en","toc":[{"text":"Environment","id":"environment","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":18},{"text":"Initialize","id":"initialize","depth":2,"charIndex":332},{"text":"Development","id":"development","depth":2,"charIndex":346},{"text":"Configuration","id":"configuration","depth":2,"charIndex":690},{"text":"Build","id":"build","depth":2,"charIndex":1215},{"text":"Verify","id":"verify","depth":2,"charIndex":2490},{"text":"Deploy","id":"deploy","depth":2,"charIndex":2863}],"domain":"","content":"#\n\n\nEnvironment#\n\n\nInstallation#\n\nModern.js provides the @modern-js/create tool for creating new projects. You can\nuse npx to run it.\n\nYou can create the project in an existing empty directory:\n\nmkdir myapp && cd myapp\nnpx @modern-js/create\n\n\nYou can also directly create the project as a new folder:\n\nnpx @modern-js/create myapp\n\n\n\nInitialize#\n\n\nDevelopment#\n\nExecute pnpm run dev in the project to start the project:\n\n$ pnpm run dev\n\n> modern dev\n\ninfo    Starting dev server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n Client ✔ done in 76.10ms\n\n\nOpen http://localhost:8000/ in your browser and you will see the following:\n\n\n\n\nConfiguration#\n\nThe modern.config.ts files exist in Modern.js projects created by the generator.\n\nFeatures can be enabled through the configuration file, or the default behavior\nof the coverage Modern.js. For example, add the following configuration to\nenable SSR:\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n  },\n});\n\n\nRe-execute pnpm run dev, in the browser Network menu, you can find that the\nproject has completed page rendering at the server level.\n\n\nBuild#\n\nExecute pnpm run build in the project to build the project production\nenvironment product:\n\n$ pnpm run build\n\n> modern build\n\ninfo    Create a production build...\n\ninfo    File sizes after production build:\n\n  File                                      Size         Gzipped\n  dist/static/js/lib-corejs.ffeb7fb8.js     214.96 kB    67.23 kB\n  dist/static/js/lib-react.09721b5c.js      152.61 kB    49.02 kB\n  dist/static/js/218.102e2f39.js            85.45 kB     28.5 kB\n  dist/static/js/lib-babel.a7bba875.js      11.93 kB     3.95 kB\n  dist/html/main/index.html                 5.84 kB      2.57 kB\n  dist/static/js/main.3568a38e.js           3.57 kB      1.44 kB\n  dist/static/css/async/304.c3c481a5.css    2.62 kB      874 B\n  dist/asset-manifest.json                  1.48 kB      349 B\n  dist/static/js/async/304.c45706bc.js      1.4 kB       575 B\n  dist/static/js/async/509.fcb06e14.js      283 B        230 B\n\n Client ✔ done in 3.57s\n\n\nThe bundle is generated to dist/ by default, and the directory structure is as\nfollows:\n\n.\n├── asset-manifest.json\n├── html\n│   └── main\n├── loader-routes\n│   └── main\n├── modern.config.json\n├── route.json\n└── static\n    ├── css\n    └── js\n\n\n> If you want to customize the output directory, please refer to Output Files.\n\n\nVerify#\n\nExecute pnpm run serve in the project to verify locally that the bundle is\nrunning correctly:\n\n$ pnpm run serve\n\n> modern serve\n\nStarting the modern server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n\nOpen http://localhost:8000/ in the browser and the content should be the same as\nwhen pnpm run dev.\n\n\nDeploy#\n\nOnce the local verification is complete, the outputs under dist folder can be\norganized into the structure required by the server for deployment.","frontmatter":{"title":"Quick Start","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/get-started/quick-start.mdx","_relativePath":"en/guides/get-started/quick-start.mdx"},{"id":219,"title":"Upgrade","routePath":"/en/guides/get-started/upgrade","lang":"en","toc":[{"text":"Upgrade with command","id":"upgrade-with-command","depth":2,"charIndex":3},{"text":"Specify version upgrade","id":"specify-version-upgrade","depth":2,"charIndex":422},{"text":"Lock nested dependency","id":"lock-nested-dependency","depth":2,"charIndex":765},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":987},{"text":"Yarn","id":"yarn","depth":3,"charIndex":1224},{"text":"Npm","id":"npm","depth":3,"charIndex":1441}],"domain":"","content":"#\n\n\nUpgrade with command#\n\nModern.js provides the upgrade command to support projects to upgrade to the\nlatest version.\n\nExecute pnpm run upgrade in the project:\n\n$ pnpm run upgrade\n\n> modern upgrade\n\n[INFO] [Project Type]: Application\n[INFO] [Modern.js Latest Version]: 2.0.0\n[INFO] Upgrade Modern.js package version success!\n\n\nYou can see that the dependency in the project package.json has been changed to\nthe latest.\n\n\nSpecify version upgrade#\n\nAll packages of Modern.js are published using the unified version number.\n\nAccording to the website release note, developers can also manually upgrade the\nproject to the desired version.\n\nTIP\n\nWhen upgrading, you need to upgrade to all packages provided by the Modern.js,\nrather than upgrading a single dependency.\n\n\nLock nested dependency#\n\nWhen there is a problem with one of the nested dependencies of the project, and\nthe Modern.js cannot be updated immediately, you can use the package manager to\nlock the child dependency version.\n\n\npnpm#\n\nFor projects using pnpm, add the following configuration to the package.json in\nthe project root directory and re-execute pnpm install:\n\npackage.json\n\n{\n  \"pnpm\": {\n    \"overrides\": {\n      \"package-name\": \"^1.0.0\"\n    }\n  }\n}\n\n\n\nYarn#\n\nFor projects using Yarn, add the following configuration to the package.json in\nthe project root directory and re-execute yarn install:\n\npackage.json\n\n{\n  \"resolutions\": {\n    \"package-name\": \"^1.0.0\"\n  }\n}\n\n\n\nNpm#\n\nFor projects using Npm, add the following configuration to the package.json in\nthe project root directory and re-execute npm install:\n\npackage.json\n\n{\n  \"overrides\": {\n    \"package-name\": \"^1.0.0\"\n  }\n}\n\n\nINFO\n\nFor Monorepo repositories, the dependency version can only be locked in the\npackage.json in the project root directory, and all packages in Monorepo are\naffected.","frontmatter":{"title":"Upgrade","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/get-started/upgrade.mdx","_relativePath":"en/guides/get-started/upgrade.mdx"},{"id":220,"title":"Extending","routePath":"/en/guides/topic-detail/framework-plugin/extend","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":94},{"text":"Creating Hooks","id":"creating-hooks","depth":3,"charIndex":330},{"text":"Using Hooks","id":"using-hooks","depth":3,"charIndex":736}],"domain":"","content":"#\n\nThis section describes how to extend plugin Hooks by dynamically registering\nHook models.\n\n\nExample#\n\nHere is a simple example to demonstrate how to extend plugin Hooks by adding\nHooks that manage console output.\n\nFirst, we initialize an empty project file and add basic dependencies:\n\n$ npx @modern-js/create modern-js-demo\n\n\n\nCreating Hooks#\n\nFirst, let's create a Hook model:\n\nconfig/plugin/myPlugin.ts\n\n\n\nconst message = createWaterfall();\n\n\nthen register:\n\nconfig/plugin/myPlugin.ts\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  registerHook: {\n    message,\n  },\n});\n\n\nadd Hook types:\n\nconfig/plugin/myPlugin.ts\n\ndeclare module '@modern-js/core' {\n  export interface Hooks {\n    message: typeof message;\n  }\n}\n\n\n\nUsing Hooks#\n\nCreate a plugin and add command handling logic through the commands Hook\nfunction:\n\nconfig/plugin/myPlugin.ts\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    return {\n      commands({ program }) {\n        program.command('message').action(async () => {\n          const hookRunners = api.useHookRunners();\n          const messages = hookRunners.message([]);\n          console.log(messages.join('\\n'));\n        });\n      },\n    };\n  },\n});\n\n\nnow config/plugin/myPlugin.ts is:\n\nconfig/plugin/myPlugin.ts\n\n\n\n\nconst message = createWaterfall();\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  registerHook: {\n    message,\n  },\n\n  setup(api) {\n    return {\n      commands({ program }) {\n        program.command('message').action(async () => {\n          const hookRunners = api.useHookRunners();\n          const messages = hookRunners.message([]);\n          console.log(messages.join('\\n'));\n        });\n      },\n    };\n  },\n});\n\ndeclare module '@modern-js/core' {\n  export interface Hooks {\n    message: typeof message;\n  }\n}\n\n\nThen add this plugin in modern.config.ts:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\nNow, run npx modern message, and the related logic will be executed, but no\ninformation is collected, so the console output is empty.\n\nadd:\n\nconfig/plugin/otherPlugin.ts\n\n\n\nexport default (): CliPlugin => ({\n  name: 'other-plugin',\n\n  setup(api) {\n    return {\n      message(list) {\n        return [...list, '[foo] line 0', '[foo] line 1'];\n      },\n    };\n  },\n});\n\n\nadd to config:\n\nmodern.config.ts\n\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin(), otherPlugin()],\n});\n\n\nrun npx modern message, then we can get follow in console:\n\n$ modern message\n[foo] line 0\n[foo] line 1\n\n\nBy using the above approach, you can extend plugin Hooks with various\ncapabilities.","frontmatter":{"title":"Extending","sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/extend.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/extend.mdx"},{"id":221,"title":"Hook List","routePath":"/en/guides/topic-detail/framework-plugin/hook-list","lang":"en","toc":[{"text":"CLI","id":"cli","depth":2,"charIndex":72},{"text":"config","id":"config","depth":3,"charIndex":79},{"text":"validateSchema","id":"validateschema","depth":3,"charIndex":533},{"text":"prepare","id":"prepare","depth":3,"charIndex":1657},{"text":"afterPrepare","id":"afterprepare","depth":3,"charIndex":1998},{"text":"commands","id":"commands","depth":3,"charIndex":2320},{"text":"beforeExit","id":"beforeexit","depth":3,"charIndex":2938},{"text":"beforeDev","id":"beforedev","depth":3,"charIndex":3440},{"text":"afterDev","id":"afterdev","depth":3,"charIndex":3801},{"text":"beforeCreateCompiler","id":"beforecreatecompiler","depth":3,"charIndex":4186},{"text":"afterCreateCompiler","id":"aftercreatecompiler","depth":3,"charIndex":4692},{"text":"beforePrintInstructions","id":"beforeprintinstructions","depth":3,"charIndex":5175},{"text":"beforeBuild","id":"beforebuild","depth":3,"charIndex":5782},{"text":"afterBuild","id":"afterbuild","depth":3,"charIndex":6296},{"text":"modifyEntryImports","id":"modifyentryimports","depth":3,"charIndex":6705},{"text":"modifyEntryExport","id":"modifyentryexport","depth":3,"charIndex":7434},{"text":"modifyEntryRuntimePlugins","id":"modifyentryruntimeplugins","depth":3,"charIndex":8059},{"text":"modifyEntryRenderFunction","id":"modifyentryrenderfunction","depth":3,"charIndex":8858},{"text":"modifyFileSystemRoutes","id":"modifyfilesystemroutes","depth":3,"charIndex":9480},{"text":"modifyServerRoutes","id":"modifyserverroutes","depth":3,"charIndex":10312},{"text":"modifyAsyncEntry","id":"modifyasyncentry","depth":3,"charIndex":11015},{"text":"htmlPartials","id":"htmlpartials","depth":3,"charIndex":11651},{"text":"Runtime","id":"runtime","depth":2,"charIndex":12215},{"text":"init","id":"init","depth":3,"charIndex":12445},{"text":"hoc","id":"hoc","depth":3,"charIndex":12816}],"domain":"","content":"#\n\nModern.js exposes three types of plugins: CLI, Runtime, and Server.\n\n\nCLI#\n\n\nconfig#\n\n * Functionality: Collect configuration\n * Execution phase: After parsing the configuration in modern.config.ts\n * Hook model: ParallelWorkflow\n * Type: ParallelWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      config: () => {\n        return {\n          /** some config */\n        };\n      },\n    };\n  },\n});\n\n\nThe collected configuration information will be collected and processed\nuniformly.\n\n\nvalidateSchema#\n\n * Functionality: Collect the JSON schema used to validate user configurations\n   in various plugins.\n * Execution phase: After the config Hook has run.\n * Hook model: ParallelWorkflow\n * Type: ParallelWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      validateSchema: () => {\n        return {\n          // target is field\n          target: 'foo',\n          schema: {\n            type: 'string',\n          },\n        };\n      },\n    };\n  },\n});\n\n\nThe returned JSON Schema here is used to validate the configuration information\nin modern.config.js.\n\nFor example, the following JSON Schema is returned:\n\n{\n  \"target\": \"foo\",\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n\n\nYou can configure it in modern.config.ts like this:\n\nmodern.config.ts\n\nexport default defineConfig({\n  foo: 'test',\n});\n\n\nIf it is another type, validation will fail and an error will be reported. For\nexample:\n\nmodern.config.ts\n\nexport default defineConfig({\n  foo: {},\n});\n\n\nthen throw error:\n\n$ modern dev\n  1 | {\n> 2 |   \"foo\": {},\n    |   ^^^^^  Property foo is not expected to be here\n\n\n\nprepare#\n\n * Functionality: Preparatory process for running the main process.\n * Execution phase: After configuration validation.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      prepare: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterPrepare#\n\n * function: Running tasks after the prepare process\n * Execution Phase: After the prepare process\n * Hook model: AsyncWorkflow\n * type: AsyncWorkflow\n * Usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterPrepare: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\ncommands#\n\n * Functionality: Add new commands for the command.\n * Execution phase: After the prepare Hook has run.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow<{ program: Command; }, void>\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      commands: ({ program }) => {\n        program.command('foo').action(async () => {\n          // do something\n          console.log('foo');\n        });\n      },\n    };\n  },\n});\n\n\nMove the plugin to modern.config.ts:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\nrun modern foo:\n\n$ modern foo\nfoo\n\n\n\nbeforeExit#\n\n * Functionality: Reset some file states before exiting the process.\n * Execution phase: Before the process exits.\n * Hook model: Workflow\n * Type: Workflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeExit: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\nTIP\n\nSince the callback function when exiting the process in Node.js is synchronous,\nthe type of beforeExit Hook is Workflow and cannot perform asynchronous\noperations.\n\n\nbeforeDev#\n\n * Functionality: Tasks before running the main dev process.\n * Execution phase: Before the project starts when the dev command is run.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeDev: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterDev#\n\n * Function: Tasks to be executed after the main process of dev command\n * Execution Stage: Executed after the project is started when running the dev\n   command\n * Hook Model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterDev: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nbeforeCreateCompiler#\n\n * Function: Provides access to the Webpack configuration used to create the\n   Webpack Compiler within middleware functions.\n * Execution Stage: Executed before creating the Webpack Compiler.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow<{ webpackConfigs: Configuration[];}, unknown>.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeCreateCompiler: ({ webpackConfigs }) => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterCreateCompiler#\n\n * Function: Provides access to the created Webpack Compiler within middleware\n   functions.\n * Execution Stage: Executed after creating the Webpack Compiler.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow<{ compiler: Compiler | MultiCompiler | undefined; },\n   unknown>.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterCreateCompiler: ({ compiler }) => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nbeforePrintInstructions#\n\n * Function: Provides access to the log information that will be printed within\n   middleware functions and allows modification of the log information.\n * Execution Stage: Executed before printing the log information.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ instructions: string }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforePrintInstructions: ({ instructions }) => {\n        // do something\n        return {\n          instructions: [...instructions, 'some new message'],\n        };\n      },\n    };\n  },\n});\n\n\n\nbeforeBuild#\n\n * Function: Tasks to be executed before the main process of the build command,\n   provides access to the Webpack configuration used for building.\n * Execution Stage: Executed before starting the project build when running the\n   build command.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow<{ webpackConfigs: Configuration[]; }>.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeBuild: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterBuild#\n\n * Function: Tasks to be executed after the main process of the build command.\n * Execution Stage: Executed after the project build is completed when running\n   the build command.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterBuild: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryImports#\n\n * Function: Used for modifying or adding import statements in the generated\n   entry files.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ imports: ImportStatement[]; entrypoint: Entrypoint; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryImports({ entrypoint, imports }) {\n        // add ``\n        imports.push({\n          value: 'react',\n          specifiers: [\n            {\n              imported: 'unmountComponentAtNode',\n            },\n          ],\n        });\n\n        return { entrypoint, imports };\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryExport#\n\n * Function: used to modify the export statement in the generated entry file\n * Execution Stage: Before the entry file is generated, the prepare phase\n   triggers\n * Hook Model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; exportStatement: string; }>\n * Example of use:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryImports({ entrypoint, exportStatement }) {\n        return {\n          entrypoint,\n          exportStatement: [`export const foo = 'test'`, exportStatement].join(\n            '\\n',\n          ),\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryRuntimePlugins#\n\n * Function: Used for adding or modifying Runtime plugins in the generated entry\n   files.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; plugins: RuntimePlugin[]; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryRuntimePlugins({ entrypoint, plugins }) {\n        const name = 'customPlugin';\n        const options = {\n          /** serializable content */\n        };\n\n        return {\n          plugins: [\n            ...plugins,\n            {\n              name,\n              options: JSON.stringify(options),\n            },\n          ],\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryRenderFunction#\n\n * Function: Used for modifying the render function in the generated entry\n   files.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; code: string; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryRenderFunction({ entrypoint, code }) {\n        const customRender = `/** render function body */`;\n        return {\n          entrypoint,\n          code: customRender,\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyFileSystemRoutes#\n\n * Function: Used for modifying the content of the generated front-end page\n   routing files, which must be serializable.\n * Execution Stage: Executed before generating the front-end routing files,\n   triggered during the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; routes: Route[]; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyFileSystemRoutes({ entrypoint, routes }) {\n        return {\n          entrypoint,\n          routes: [\n            ...routes,\n            {\n              path: '/custom_page',\n              component: require.resolve('./Component'),\n              exact: true,\n            },\n          ],\n        };\n      },\n    };\n  },\n});\n\n\nThis adds a new page route for the front-end.\n\n\nmodifyServerRoutes#\n\n * Function: Used for modifying the content of the generated server routes.\n * Execution Stage: Executed before generating the server routing files,\n   triggered during the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ routes: ServerRoute[]; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyServerRoutes({ routes }) {\n        return {\n          routes: [\n            ...routes,\n            {\n              urlPath: '/api/foo',\n              isApi: true,\n              entryPath: '',\n              isSPA: false,\n              isSSR: false,\n            },\n          ],\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyAsyncEntry#\n\n * Function: Used for modifying the asynchronous module that wraps the entry\n   file, see source.enableAsyncEntry.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; code: string; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyAsyncEntry({ entrypoint, code }) {\n        const customCode = `console.log('hello');`;\n        return {\n          entrypoint,\n          code: `${customCode}${code}`,\n        };\n      },\n    };\n  },\n});\n\n\n\nhtmlPartials#\n\n * Function: Used for customizing the generated HTML page template.\n * Execution Stage: Triggered during the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; partials: HtmlPartials; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      async htmlPartials({ entrypoint, partials }) {\n        partials.head.push('');\n        return {\n          entrypoint,\n          partials,\n        };\n      },\n    };\n  },\n});\n\n\nThis adds a new Script tag to the HTML template.\n\n\nRuntime#\n\nNOTE\n\nThe Runtime plugin is currently not fully opened, and the API is not guaranteed\nto be stable. Use with caution.\n\nThe Runtime plugin is mainly used for developers to modify the component that\nneed to be rendered.\n\n\ninit#\n\n * Function: Executes App.init.\n * Execution Stage: Rendering (SSR/CSR).\n * Hook Model: AsyncPipeline.\n * Type: AsyncPipeline<{ context: RuntimeContext; }, unknown>\n * Usage Example:\n\n\n\nexport default (): Plugin => ({\n  setup(api) {\n    return {\n      init({ context }, next) {\n        // do something\n        return next({ context });\n      },\n    };\n  },\n});\n\n\n\nhoc#\n\n * Function: Modifies the components that need to be rendered.\n * Execution Stage: Rendering (SSR/CSR).\n * Hook Model: Pipeline.\n * Type: Pipeline<{ App: React.ComponentType; }, React.ComponentType>\n * Usage Example:\n\nNOTE\n\nWhen using the hoc hook, you need to copy the static properties of the original\nApp component to the new component and pass through the props.\n\n\n\n\n\nexport default (): Plugin => ({\n  setup(api) {\n    const FooContext = createContext('');\n    return {\n      hoc({ App }, next) {\n        const AppWrapper = (props: any) => {\n          return (\n            \n              \n            \n          );\n        };\n        return next({\n          App: hoistNonReactStatics(AppWrapper, App)\n        });\n      },\n    };\n  },\n});\n","frontmatter":{"title":"Hook List","sidebar_position":8},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/hook-list.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/hook-list.mdx"},{"id":222,"title":"Hook Model","routePath":"/en/guides/topic-detail/framework-plugin/hook","lang":"en","toc":[{"text":"Basic Working Mode","id":"basic-working-mode","depth":2,"charIndex":286},{"text":"Differences between different Hook models","id":"differences-between-different-hook-models","depth":2,"charIndex":2559},{"text":"Pipeline","id":"pipeline","depth":3,"charIndex":2811},{"text":"Waterfall","id":"waterfall","depth":3,"charIndex":3279},{"text":"Workflow","id":"workflow","depth":3,"charIndex":4522},{"text":"Comparison of Hook models","id":"comparison-of-hook-models","depth":2,"charIndex":5848}],"domain":"","content":"#\n\nFirst, let's introduce some content about the basic plugin system in Modern.js,\nincluding the working mode of the Hook model, the operating mode of each Hook\nmodel, and the working mode of the Manager.\n\nEach Hook model is independent and can manage running functions independently.\n\n\nBasic Working Mode#\n\nTaking the Pipeline as an example, let's briefly introduce the working mode of\nthe Hook model. Let's take a look at a simple example:\n\n\n\n// 1. create\nconst pipeline = createPipeline();\n\n// 2. add function\npipeline.use((count, next) => {\n  return next(count + 1);\n});\npipeline.use((count, next) => {\n  return count * 2;\n});\n\n// 3. exec\npipeline.run(1); // 4\npipeline.run(5); // 12\n\n\nIn this example, a Pipeline is created on line 3. This means that when you run\nit, you need to pass in a number, and you will get a number as a result, the\ntype is:\n\n(count: number, next: (nextCount: number) => number) => number;\n\n\nThe reason why there are only numbers here is because we created a Pipeline. If\nwe had created a Pipeline, then when we run it, we would pass in a number and\nget back a string. the type is:\n\n(count: number, next: (nextCount: number) => string) => string;\n\n\nAfter creating a Pipeline, you can add functions using the use method (lines 5\nand 8). It is important to note that the order in which you add the functions is\nthe order in which they will run by default.\n\nWithin these functions, you can manipulate the count value and return a value.\nIf you call the next function, the next function in the pipeline will run. For\nexample, if you add three functions: A, B, and C, and you call next in function\nA, then function B will run. Similarly, if you call next in function B, then\nfunction C will run.\n\nIn the example above, the first function added on line 5 calls next, which\ncauses the second function added on line 8 to run. The return value of this\nfunction is the return value of the entire pipeline. If the first function does\nnot call next and simply returns a value, then the pipeline will return that\nvalue without running any other functions.\n\nFor example:\n\n\n\n// 1. create\nconst pipeline = createPipeline();\n\n// 2. add function\npipeline.use((count, next) => {\n  return count + 1;\n});\npipeline.use((count, next) => {\n  return count * 2;\n});\n\n// 3. 执行\npipeline.run(1); // 2\npipeline.run(5); // 6\n\n\nIf the first function does not call next, the second function will not run and\nthe return value of the pipeline will be the return value of the first function.\n\nFinally, the way to run the Pipeline is simply to call pipeline.run().\n\n\nDifferences between different Hook models#\n\nThe above section describes the general working mode of the Pipeline, and the\nworking modes of other Hook models are similar. The main differences lie in the\nfunction type, execution order, and parameters.\n\n\nPipeline#\n\nThe example above describes the Pipeline, so we won't go into details here. In\nthe Pipeline category, there are two subcategories: Sync and Async, which manage\nfunctions of either Sync or Async type, respectively.\n\nINFO\n\nIf there are no functions in the Pipeline or all functions have called the next\nfunction, then you need to provide a value when running the Pipeline.\n\npipeline(\n  {},\n  {\n    onLast: () => {\n      // do something\n    },\n  },\n);\n\n\n:::\n\n\nWaterfall#\n\nThis model, as the name suggests, is characterized by the sequential passing of\nparameters, where the return value of the previous function becomes the input\nparameter of the next function. Let's look at an example::\n\n\n\n// 1. create\nconst waterfall = createWaterfall();\n\n// 2. add function\nwaterfall.use(count => {\n  return count + 1;\n});\nwaterfall.use(count => {\n  return count * 2;\n});\n\n// 3. exec\nwaterfall.run(1); // 4\nwaterfall.run(5); // 12\n\n\nIn this example, a Waterfall type is created, which means that the input and\noutput types of this model are the same. In this case, both the input and output\ntypes are number, the type is:\n\n(count: number) => number;\n\n\nAt first glance, this example may seem to have the same functionality as the\nPipeline above, but there are some important differences to note. Firstly, the\nfunctions managed by Waterfall do not have a next function as the second\nargument, so they cannot modify the execution order by calling next within the\nfunction. Secondly, the input and output types of the functions must be the same\n(unlike in the Pipeline where they can be different).\n\nSimilarly to Pipeline, Waterfall has Sync and Async subcategories that\nrespectively manage Sync and Async functions.\n\n\nWorkflow#\n\nThis Hook model is different from the two Hook models above in that there is no\nstrong concept of passing parameters and return values in a sequential order. In\nthis model, each function runs independently based on the same input parameter.\n\nfor example:\n\n\n\n// 1. create\nconst workflow = createWorkflow();\n\n// 2. add plugin\nworkflow.use(count => {\n  return count + 1;\n});\nworkflow.use(count => {\n  return count * 2;\n});\n\n// 3. 执行\nworkflow.run(1); // [2, 2]\nworkflow.run(5); // [6, 10]\n\n\nIn this example, two functions are added to the Workflow, so the result of\nrunning the Workflow is an array of the results of these two functions.\n\nAlthough there is no strong concept of passing parameters and return values in a\nsequential order in this model, there are still differences in the execution\norder. In the Workflow category, there are three subcategories: Sync, Async, and\nParallel.\n\nThe difference between them lies in the execution order of the functions. By\ndefault, they are all executed in the order they are added, but in Sync and\nAsync mode, the execution order is strictly based on the order in which they are\nadded, while in Parallel mode, a variant of Async mode, Promise.all is used to\nexecute all the functions, while in Async mode, await is used to wait for the\nprevious function to finish running.\n\n\nComparison of Hook models#\n\n\"Workflow\" and \"Waterfall\" are actually variants of the \"Pipeline\" model. While\nit's possible to implement \"Workflow\" and \"Waterfall\" using a specific writing\nstyle with \"Pipeline\", it can be more complicated with many implicit\nconventions. To make it easier to use, these two variants are provided to\nsatisfy specific use cases.","frontmatter":{"title":"Hook Model","sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/hook.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/hook.mdx"},{"id":223,"title":"Write Plugins","routePath":"/en/guides/topic-detail/framework-plugin/implement","lang":"en","toc":[{"text":"Implementing a Plugin","id":"implementing-a-plugin","depth":2,"charIndex":130},{"text":"Plugin Types","id":"plugin-types","depth":3,"charIndex":765},{"text":"Plugin Configuration","id":"plugin-configuration","depth":3,"charIndex":2468},{"text":"Plugin API","id":"plugin-api","depth":3,"charIndex":2815},{"text":"Async setup","id":"async-setup","depth":3,"charIndex":3334},{"text":"Adding Plugins","id":"adding-plugins","depth":2,"charIndex":3606},{"text":"Developing Local Plugins","id":"developing-local-plugins","depth":3,"charIndex":3791},{"text":"Publishing a Plugin on npm","id":"publishing-a-plugin-on-npm","depth":3,"charIndex":4178}],"domain":"","content":"#\n\nThe previous section introduced the Hook models used by Modern.js plugins, while\nthis section describes how to write plugins.\n\n\nImplementing a Plugin#\n\nA Modern.js plugin is an object that includes the following properties:\n\n * name: The name of the plugin, a unique identifier.\n * setup: The initialization function for the plugin, which only runs once. The\n   setup function can return a Hooks object, which Modern.js executes at\n   specific times.\n\nconst myPlugin = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    // return hook object\n    return {\n      afterBuild: () => {\n      },\n    };\n  },\n};\n\n\nIn addition, plugins allow configuration of the execution order with other\nplugins. For more information, please refer to Plugin Relationship.\n\n\nPlugin Types#\n\nModern.js supports various types of project development, such as application\ndevelopment (app-tools), module development (module-tools), etc.\n\nTo balance the differences and commonalities between various types of project\ndevelopment, Modern.js organizes plugins as shown in the following figure:\n\n\n\nAs shown in the figure, Modern.js roughly divides plugins into two categories:\n\n 1. Common plugins: Plugins that only include some basic Hooks.\n\n 2. Project plugins: Different project developments will extend their own Hooks,\n    Config, etc. on the basis of common plugins.\n\nWhen using TypeScript, you can import built-in types such as CliPlugin to\nprovide correct type inference for plugins.\n\n\n\nconst myPlugin: CliPlugin = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    return {\n      afterBuild: () => {\n      },\n    };\n  },\n};\n\n\nThe above code is a general-purpose plugin, containing only some basic Hooks.\nModern.js supports extending the definition of plugins through generics:\n\n\n\nconst myPlugin: CliPlugin = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    return {\n      afterBuild: () => {\n      },\n    };\n  },\n};\n\n\nIf you look closely at the type AppTools, you can see that AppTools consists of\n3 types.\n\ntype AppTools = {\n  hooks: AppToolsHooks;\n  userConfig: AppToolsUserConfig;\n  normalizedConfig: AppToolsNormalizedConfig;\n};\n\n\nWhen writing plugins, plugins extend their own types like Hooks on different\nbases through generic extensions:\n\n// common plugin\n\n\n\nconst myPlugin: CliPlugin<{ hooks: MyPluginHook }> = {};\n\n\n// extend from app-tools hook\n\n\n\nconst myPlugin: CliPlugin = {};\n\n\nPlease refer to Extending Hooks for detailed explanations.\n\n\nPlugin Configuration#\n\nIt is recommended to write plugins in the form of functions, so that plugins can\nreceive configuration options through function parameters:\n\n\n\ntype MyPluginOptions = {\n  foo: string;\n};\n\nconst myPlugin = (options: MyPluginOptions): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup() {\n    console.log(options.foo);\n  },\n});\n\n\n\nPlugin API#\n\nThe setup function of a plugin receives an api parameter, and you can call some\nmethods provided on the api to get configuration, application context, and other\ninformation.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    // get user set config\n    const config = api.useConfigContext();\n    // get context\n    const appContext = api.useAppContext();\n    // get final config\n    const resolvedConfig = api.useResolvedConfigContext();\n  },\n});\n\n\nFor more detail Plugin API.\n\n\nAsync setup#\n\nThe setup function of a CLI plugin can be an asynchronous function, which can\nexecute asynchronous logic during the initialization process.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  async setup(api) {\n    await doSomething();\n  },\n});\n\n\n\nAdding Plugins#\n\nCustom plugins can be used by following the instructions in the plugins section\nof the documentation. Below is the recommended way to implement plugins in\nModern.js.\n\n\nDeveloping Local Plugins#\n\nIt is recommended to write local plugins in the config/plugin directory and\nexport them using export default:\n\nconfig/plugin/myPlugin.ts\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup() {\n    // init plugin\n  },\n});\n\n\nregister plugin in modern.config.ts:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\n\nPublishing a Plugin on npm#\n\nIf you want to publish your Modern.js plugin on npm, it's recommended to use the\nmodule project solution provided by Modern.js to manage and build the plugin.\n\nFirst, create an empty module project solution and adjust the package name:\n\n{\n  \"name\": \"my-plugin\"\n  ...\n}\n\n\ncreate plugin main file:\n\nsrc/index.ts\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup() {\n    // plugin init\n  },\n});\n\n\nAfter publishing, install it to the project you need to use pnpm add my-plugin,\ntake an application project as an example, and then add it in modern.config.ts:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\nIf you find that there are currently unsatisfactory scenarios in Modern.js,\nwelcome to build the Modern.js ecosystem together by writing custom plugins.","frontmatter":{"title":"Write Plugins","sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/implement.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/implement.mdx"},{"id":224,"title":"Introduction","routePath":"/en/guides/topic-detail/framework-plugin/introduction","lang":"en","toc":[{"text":"Modern.js Plugin System","id":"modernjs-plugin-system","depth":2,"charIndex":3},{"text":"What Plugins Can Do","id":"what-plugins-can-do","depth":2,"charIndex":1298}],"domain":"","content":"#\n\n\nModern.js Plugin System#\n\nModern.js is a system used for extending the functionality of a project at\ndifferent stages such as running, requesting, and rendering. It mainly consists\nof three parts: the Hook model, the Manager, and the Context Sharing mechanism.\n\nThe Hook model is used to determine the execution method of the current Hook,\nand functions with different Hook models have different execution logics. The\nManager is used to control the execution and scheduling of Hooks. The Context\nSharing mechanism is used to pass information between different Hooks.\n\nCurrently, Modern.js provides several different Hook models:\n\n * Pipeline\n   * Sync\n   * Async\n * Waterfall\n   * Sync\n   * Async\n * Workflow\n   * Sync\n   * Async\n   * Parallel(Async)\n\nNOTE\n\nSubsequent chapters will introduce the execution methods of each model in\ndetail.\n\nBased on the Hook model and Manager, Modern.js exposes three sets of plugins:\nCLI, Runtime, and Server.\n\nAmong them, the CLI plugin is the main running flow control model in Modern.js,\nand most of the features in Modern.js are mainly run through this set of models.\nThe Runtime plugin is mainly responsible for processing the rendering logic of\nReact components. The Server plugin is mainly used for controlling the server\nlifecycle and user requests.\n\n\nWhat Plugins Can Do#\n\nAll of Modern.js's features are implemented through this set of plugins, which\nmeans that all of Modern.js's capabilities are open to developers. Developers\ncan write plugins to extend more functionality and adapt to complex scenarios,\nincluding but not limited to:\n\n * Registering commands\n * Modifying Modern.js configuration and validation schema\n * Modifying compilation configurations for Webpack/Babel/Less/Sass/Tailwind\n   CSS/...\n * Modifying the React components/elements to be rendered at runtime\n * Modifying page routing\n * Modifying server routing\n * Customizing console output\n * Customizing dynamic HTML templates\n * Customizing Node.js server frameworks\n * Customizing React component client/server rendering\n * ...\n\nWhen Modern.js does not currently cover the functionality or scenario that you\nneed, you can develop a custom plugin to implement the related functionality for\nadapting to special scenarios.","frontmatter":{"title":"Introduction","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/introduction.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/introduction.mdx"},{"id":225,"title":"Lifecycle","routePath":"/en/guides/topic-detail/framework-plugin/lifecycle","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js application has a complete lifecycle, including CLI, Server Side and\nRuntime three stages.\n\nModern.js lifecycle is as follows:\n\nNOTE\n\nThe rectangle of the pink box represents the plugin hook provided by the\nModern.js, and the light yellow base color ellipse represents the linkage point\nwith the next stage.\n\n","frontmatter":{"title":"Lifecycle","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/lifecycle.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/lifecycle.mdx"},{"id":226,"title":"Plugin API","routePath":"/en/guides/topic-detail/framework-plugin/plugin-api","lang":"en","toc":[{"text":"API","id":"api","depth":2,"charIndex":503},{"text":"useConfigContext","id":"useconfigcontext","depth":3,"charIndex":510},{"text":"useResolvedConfigContext","id":"useresolvedconfigcontext","depth":3,"charIndex":1009},{"text":"useAppContext","id":"useappcontext","depth":3,"charIndex":1612},{"text":"useHookRunners","id":"usehookrunners","depth":3,"charIndex":2147}],"domain":"","content":"#\n\nThe setup function of the plugin will receive an api imported parameter, and you\ncan call some methods provided on the api to obtain information such as\nconfiguration and application context.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    // get user config\n    const config = api.useConfigContext();\n    // get plugin context\n    const appContext = api.useAppContext();\n    // get resolved config\n    const resolvedConfig = api.useResolvedConfigContext();\n  },\n});\n\n\n\nAPI#\n\n\nuseConfigContext#\n\nUsed to retrieve the original configuration of the application.\n\nconst useConfigContext: () => UserConfig;\n\ninterface UserConfig {\n  source?: SourceConfig;\n  output?: OutputConfig;\n  server?: ServerConfig;\n  deploy?: DeployConfig;\n  // ...other fields\n}\n\n\nPlease refer to Configuration for the specific meanings of configuration fields.\n\nTIP\n\nThis method returns a read-only configuration and cannot be modified. If you\nneed to modify the configuration, please use config hook.\n\n\nuseResolvedConfigContext#\n\nUsed to retrieve the final configuration after parsing.\n\nconst useResolvedConfigContext: () => NormalizedConfig;\n\ninterface NormalizedConfig {\n  source: NormalizedSourceConfig;\n  output: NormalizedOutputConfig;\n  server: NormalizedServerConfig;\n  deploy: NormalizedDeployConfig;\n  _raw: UserConfig; // the original user config\n  // ...other fields\n}\n\n\nPlease refer to Configuration for the specific meanings of configuration fields.\n\nTIP\n\nThis method returns a read-only configuration and cannot be modified. If you\nneed to modify the configuration, please use config hook.\n\n\nuseAppContext#\n\nUsed to retrieve the runtime context of the application.\n\nconst useAppContext: () => IAppContext;\n\ninterface IAppContext {\n  appDirectory: string;\n  configFile: string | false;\n  ip?: string;\n  port?: number;\n  distDirectory: string;\n  packageName: string;\n  srcDirectory: string;\n  sharedDirectory: string;\n  nodeModulesDirectory: string;\n  internalDirectory: string;\n  plugins: {\n    cli?: any;\n    server?: any;\n  }[];\n  entrypoints: Entrypoint[];\n  serverRoutes: ServerRoute[];\n  htmlTemplates: HtmlTemplates;\n}\n\n\n\nuseHookRunners#\n\nUsed to retrieve the executor of Hooks and trigger the execution of specific\nHooks.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  async setup(api) {\n    const hookRunners = api.useHookRunners();\n    // invoke afterBuild Hook\n    await hookRunners.afterBuild();\n  },\n});\n","frontmatter":{"title":"Plugin API","sidebar_position":6},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/plugin-api.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/plugin-api.mdx"},{"id":227,"title":"Relationship","routePath":"/en/guides/topic-detail/framework-plugin/relationship","lang":"en","toc":[{"text":"Plugin Sorting","id":"plugin-sorting","depth":2,"charIndex":820},{"text":"Pre","id":"pre","depth":3,"charIndex":931},{"text":"Post","id":"post","depth":3,"charIndex":1365},{"text":"rivals","id":"rivals","depth":2,"charIndex":1710},{"text":"required","id":"required","depth":2,"charIndex":2126},{"text":"Register Plugin","id":"register-plugin","depth":2,"charIndex":2550}],"domain":"","content":"#\n\nThe plugin configuration object in Modern.js provides a series of fields to\ncontrol plugin order, mutual exclusion, and other capabilities. The available\nfields are as follows:\n\n * name: string, sets the name of the current plugin.\n * pre: string[], these plugins will be adjusted to be executed before the\n   current plugin.\n * post: string[], these plugins will be adjusted to be executed after the\n   current plugin.\n * rivals: string[], mutually exclusive plugins, an error will be thrown when\n   encountering these plugins.\n * required: string[], required plugins, an error will be thrown when the\n   corresponding plugin is not found in the plugin list.\n * usePlugin: CliPlugin[], registers other plugins.\n\nThe above parameters can be used to achieve plugin front, back, mutual\nexclusion, and mandatory logic.\n\n\nPlugin Sorting#\n\nModern.js plugins achieve plugin sorting functionality through the pre and post\nparameters.\n\n\nPre#\n\nBy default, plugins are executed in the order they are added. You can declare\npreceding plugins to be executed by using the pre field.\n\nFor example, there are the following two plugins:\n\nfoo.ts\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nbar.ts\n\nconst bar = {\n  name: 'plugin-bar',\n  pre: ['plugin-foo'],\n};\n\n\nThe bar plugin configures the foo plugin in the pre field, so the'foo' plugin\nmust be executed before the bar plugin.\n\n\nPost#\n\nDeclare succeeding plugins to be executed by using the post field.\n\nfoo.ts\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nbar.ts\n\nconst bar = {\n  name: 'plugin-bar',\n  post: ['plugin-foo'],\n};\n\n\nIf you use the post parameter in the bar plugin's configuration and set it to\n['foo'], then the foo plugin will be executed after the bar plugin.\n\n\nrivals#\n\nThe rivals field can be used to declare a mutual exclusion relationship between\nplugins.\n\nthere are two plugin:\n\nfoo.ts\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nbar.ts\n\nconst bar = {\n  name: 'plugin-bar',\n  rivals: ['plugin-foo'],\n};\n\n\nThe bar plugin has been configured with the foo plugin in the rivals field,\ntherefore an error will be thrown if both the foo and bar plugins are added\nsimultaneously.\n\n\nrequired#\n\nThe required field can be used to declare a dependency relationship between\nplugins.\n\nthere are two plugin:\n\nfoo.ts\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nbar.ts\n\nconst bar = {\n  name: 'plugin-bar',\n  required: ['plugin-foo'],\n};\n\n\nThe bar plugin has been configured with the foo plugin in the required field.\nTherefore, an error will be thrown when using the bar plugin if the foo plugin\nis not configured.\n\n\nRegister Plugin#\n\nWhen there is a dependency relationship between plugins, we can also actively\nregister another plugin in a plugin by using usePlugin.\n\nfoo.ts\n\nconst foo = () => ({\n  name: 'plugin-foo',\n});\n\nconst bar = () => ({\n  name: 'plugin-bar',\n  usePlugin: [foo()],\n});\n\n\nWhen the user configures the bar plugin, the foo plugin will also be\nautomatically registered and activated. The user does not need to register the\nfoo plugin separately.","frontmatter":{"title":"Relationship","sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/relationship.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/relationship.mdx"},{"id":228,"title":"@modern-js/codesmith-api-app","routePath":"/en/guides/topic-detail/generator/codesmith/api/app","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":256},{"text":"API","id":"api","depth":2,"charIndex":642},{"text":"checkEnvironment","id":"checkenvironment","depth":3,"charIndex":649},{"text":"runInstall","id":"runinstall","depth":3,"charIndex":978},{"text":"runGitAndInstall","id":"rungitandinstall","depth":3,"charIndex":1180},{"text":"forgeTemplate","id":"forgetemplate","depth":3,"charIndex":1768},{"text":"showSuccessInfo","id":"showsuccessinfo","depth":3,"charIndex":3313},{"text":"runSubGenerator","id":"runsubgenerator","depth":3,"charIndex":3420},{"text":"getInputBySchema","id":"getinputbyschema","depth":3,"charIndex":3867},{"text":"getInputBySchemaFunc","id":"getinputbyschemafunc","depth":3,"charIndex":4565}],"domain":"","content":"#\n\nThe combination encapsulation of APIs commonly used in the development of\nmicrogenerators, including APIs encapsulation of other packages such as fs, git,\nnpm, etc. When the requirements can be met, it is recommended to use the API of\nthe npm package.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const appApi = new AppAPI(context, generator);\n  await appApi.runInstall();\n};\n\n\n * Create AppAPI instance, the parameter is the generator of the microgenerator\n   function parameter, please see the composition of the microgenerator project\n   for details.\n * Just call the API on its example.\n\n\nAPI#\n\n\ncheckEnvironment#\n\nCheck the current generator operating environment, the check items are:\n\n 1. The node and node versions, the default is greater than 12.22.12, and the\n    node version can be executed by passing parameters.\n 2. Yarn, pnpm or npm can be used.\n\nParameter:\n\n * nodeVersion?: string. Node version want to check.\n\n\nrunInstall#\n\nTo install dependency, you can pass in the install dependency command, which\ndefaults to the packageManager value in config.\n\nParameter:\n\n * command?: string, Install dependency command.\n\n\nrunGitAndInstall#\n\nThis function performs the following actions:\n\n 1. Check whether the current generator execution directory is a git repository.\n 2. If not a git repository, initialization is a git repository.\n 3. Install dependencies.\n 4. Commit the initial commit in a non-monorepo project (judging the condition,\n    isMonorepoSubProject does not exist or is false in the config), the commit\n    information is feat: init, and customize is supported.\n\nParameter:\n\n * commitMessage?: string, Initialization commit message\n * installFunc?: () => Promise. Install dependency function\n\n\nforgeTemplate#\n\nRender generator template file.\n\nParameter:\n\n * templatePattern: string. Template files match regularities,for example:\n   templates/base-templates/**/* .\n * filter?: (resourceKey: string) => boolean. Filter function, the parameter is\n   the file path matching the templatePattern, return true to render the file,\n   return false to render the file.\n * rename?: (resourceKey: string) => string. Rename function, the parameter is\n   the file path matching templatePattern, and the new filename is returned. The\n   templates directory at the beginning of resourceKey and the .handlebars\n   suffix at the end will be replaced by default.\n * parameters?: Record. Render parameter, when there is a handlebars or ejs\n   variable in the template, use it to pass the corresponding variable value.\n * type?: 'handlebars' | 'ejs'. Template file type, defaults to handlebars.\n\nFor example:\n\nawait appApi.forgeTemplate(\n  'templates/base-templates/**/*',\n  undefined,\n  resourceKey =>\n    resourceKey\n      .replace('templates/base-templates/', '')\n      .replace('.handlebars', ''),\n);\n\nawait appApi.forgeTemplate(\n  'templates/base-template/**/*',\n  resourceKey => !resourceKey.include('eslintrc.json'),\n  resourceKey =>\n    resourceKey\n      .replace('templates/base-template/', projectPath)\n      .replace('language', language as string)\n      .replace('.handlebars', ''),\n  {\n    name: packageName as string,\n    language,\n    isTs: language === Language.TS,\n    packageManager: getPackageManagerText(packageManager as any),\n  },\n);\n\n\n\nshowSuccessInfo#\n\nDisplay success information.\n\nParameter:\n\n * successInfo?: string. Default is Success.\n\n\nrunSubGenerator#\n\nRun the subgenerator.\n\nParameter:\n\n * subGenerator: string. Subgenerator name or path.\n * relativePwdPath?: string. The relative path to which the'string 'subgenerator\n   runs.\n * config?: Record. Default config configuration for subgenerator runs.\n\nFor example:\n\nawait appApi.runSubGenerator(\n  getGeneratorPath('@modern-js/repo-generator', context.config.distTag),\n  undefined,\n  { ...context.config, hasPlugin: false },\n);\n\n\n\ngetInputBySchema#\n\nUser interaction input is done through schema.\n\nParameter:\n\n * schema: FormilySchema | Question[]. Question list, supports Formily schema\n   and inquirer types.\n * type: 'formily' | 'inquirer'. Schema type, the default value is formily.\n * configValue: Record = {}. Schema default value, the problem corresponding to\n   the schema field passed in this value will no longer interact with the user.\n * validateMap?: Record) => { success: boolean; error?: string }>. Validation\n   function for special fields in schema.\n * initValue?: Record. Schema the initialization value of the field.\n\nFor Formily Schema type support, please refer to Customize input related type\ndefinition.\n\n\ngetInputBySchemaFunc#\n\nBy schema to complete user interaction input, schema parameter value as\nfunction, the user handles globalization problems, and only supports Formily\nschema.\n\nParameter:\n\n * schema: config?: Record) => FormilySchema. Get the problem list function, the\n   config parameter is the config configuration information in the current\n   generator.\n * configValue: Record = {}. Schema default value, the problem corresponding to\n   the schema field passed in this value will no longer interact with the user.\n * validateMap?: Record) => { success: boolean; error?: string }>. Validation\n   function for special fields in schema.\n * initValue?: Record. Schema the initialization value of the field.\n\nFor Formily Schema type support, please refer to Customize input related type\ndefinition.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/app.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/app.mdx"},{"id":229,"title":"@modern-js/codesmith-api-ejs","routePath":"/en/guides/topic-detail/generator/codesmith/api/ejs","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":154},{"text":"API","id":"api","depth":2,"charIndex":618},{"text":"renderTemplate","id":"rendertemplate","depth":3,"charIndex":625},{"text":"renderTemplateDir","id":"rendertemplatedir","depth":3,"charIndex":865}],"domain":"","content":"#\n\nAn API wrapper for file operations using [ejs] (https://ejs.co/) in\nmicrogenerators, providing a way to render individual template files and\nfolders.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const ejsAPI = new EjsAPI(generator);\n  await ejsAPI.renderTemplate(\n     material.get('templates/a.js'),\n     target: 'b.js',\n     { data: \"data\" }\n   );\n}\n\n\n * Create EjsAPI instance, the parameter is the generator of the microgenerator\n   function parameter, please see the composition of the microgenerator project\n   for details.\n * Just call the API on its example.\n\n\nAPI#\n\n\nrenderTemplate#\n\nRender a single template file.\n\nParameter:\n\n * templateResource: FsResource. Template file resource, used by\n   context.materials.get().\n * target: string. Target file path name.\n * parameters?: Record. Render parameter.\n\n\nrenderTemplateDir#\n\nRender template folder.\n\nParameter:\n\n * material: FsMaterial. The material context of the current microgenerator\n   execution.\n * findGlob: string. Template file matches the regular.\n * target: (globMatch: string) => string. The target file path generation\n   function, the parameter is resourceKey.\n * options?: RenderTemplateDirOptions. Glob Find the file configuration, the\n   specific function viewable is here [glob]\n   (https://www.npmjs.com/package/glob).\n\ntype RenderTemplateDirOptions = {\n  nodir?: boolean;\n  dot?: boolean;\n  ignore?: string | readonly string[];\n};\n","frontmatter":{"sidebar_position":6},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/ejs.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/ejs.mdx"},{"id":230,"title":"@modern-js/codesmith-api-fs","routePath":"/en/guides/topic-detail/generator/codesmith/api/fs","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":227},{"text":"API","id":"api","depth":2,"charIndex":660},{"text":"renderFile","id":"renderfile","depth":3,"charIndex":667},{"text":"renderDir","id":"renderdir","depth":3,"charIndex":853}],"domain":"","content":"#\n\nAPI wrapper for file operations in microgenerators, providing methods to render\nindividual template files and folders. FsAPI is usually used to handle binaries\nor template files that cannot be handled with handlebars, ejs.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const fsApi = new FsAPI(generator);\n  await fsApi.renderFile(\n     material.get('templates/a.js'),\n     target: 'b.js'\n   );\n}\n\n\n * Create FsAPI instance, the parameter is the generator of the microgenerator\n   function parameter, please see the composition of the microgenerator project\n   for details.\n * Just call the API on its example.\n\n\nAPI#\n\n\nrenderFile#\n\nRender a single template file.\n\nParameter:\n\n * resource: FsResource. Template file resource, used by\n   context.materials.get().\n * target: string. Target file path name.\n\n\nrenderDir#\n\nRender template folder.\n\nParameter:\n\n * material: FsMaterial. The material context of the current microgenerator\n   execution.\n * findGlob: string. Template file matches the regular.\n * target: (globMatch: string) => string. The target file path generation\n   function, the parameter is resourceKey.\n * options?: RenderTemplateDirOptions. Glob Find the file configuration, the\n   specific function viewable is here [glob]\n   (https://www.npmjs.com/package/glob).\n\ntype RenderTemplateDirOptions = {\n  nodir?: boolean;\n  dot?: boolean;\n  ignore?: string | readonly string[];\n};\n","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/fs.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/fs.mdx"},{"id":231,"title":"@modern-js/codesmith-api-git","routePath":"/en/guides/topic-detail/generator/codesmith/api/git","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":152},{"text":"API","id":"api","depth":2,"charIndex":553},{"text":"isInGitRepo","id":"isingitrepo","depth":3,"charIndex":560},{"text":"initGitRepo","id":"initgitrepo","depth":3,"charIndex":746},{"text":"addAndCommit","id":"addandcommit","depth":3,"charIndex":1133}],"domain":"","content":"#\n\nThe API encapsulation of git-related operations in the micro-generator provides\nmethods for judging git repository, initialization and commit code.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const gitApi = new GitAPI(generatorCore, generatorContext);\n  await gitApi.initGitRepo();\n};\n\n\n * Create GitAPI instance, the parameter is the generator of the microgenerator\n   function parameter, please see the composition of the microgenerator project\n   for details.\n\n * Just call the API on its example.\n\n\nAPI#\n\n\nisInGitRepo#\n\nWhether the current directory is a git repository.\n\nParameter:\n\n * cwd?: string. The execution directory of the git command, the default is\n   microgenerator outputPath.\n\n\ninitGitRepo#\n\nThe initialization is the git repository. The default branch name for init can\nbe configured via defaultBranch in the generator config.\n\nParameter:\n\n * cwd?: string. The execution directory of the git command, the default is\n   microgenerator outputPath.\n * force?: boolean. Use this parameter to force git init when the current\n   directory is already a git repository.\n\n\naddAndCommit#\n\nExecute git add . and git commit commit the current changes.\n\nParameter:\n\n * commitMessage: string. Commit information.\n * cwd?: string. The execution directory of the git command, the default is\n   microgenerator outputPath.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/git.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/git.mdx"},{"id":232,"title":"@modern-js/codesmith-api-handlebars","routePath":"/en/guides/topic-detail/generator/codesmith/api/handlebars","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":174},{"text":"API","id":"api","depth":2,"charIndex":666},{"text":"renderTemplate","id":"rendertemplate","depth":3,"charIndex":673},{"text":"renderTemplateDir","id":"rendertemplatedir","depth":3,"charIndex":913}],"domain":"","content":"#\n\nAn API wrapper for file operations using [handlebars]\n(https://handlebarsjs.com/) in the microgenerator, providing a way to render\nindividual template files and folders.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const handlebarApi = new HandlebarsAPI(generator);\n  await handlebarsAPI.renderTemplate(\n     material.get('templates/a.js'),\n     target: 'b.js',\n     { data: \"data\" }\n   );\n}\n\n\n * Create HandlebarsAPI instance, the parameter is the generator of the\n   microgenerator function parameter, please see the composition of the\n   microgenerator project for details.\n\n * Just call the API on its example.\n\n\nAPI#\n\n\nrenderTemplate#\n\nRender a single template file.\n\nParameter:\n\n * templateResource: FsResource. Template file resource, used by\n   context.materials.get().\n * target: string. Target file path name.\n * parameters?: Record. Render parameter.\n\n\nrenderTemplateDir#\n\nRender template folder.\n\nParameter:\n\n * material: FsMaterial. The material context of the current microgenerator\n   execution.\n * findGlob: string. Template file matches the regular.\n * target: (globMatch: string) => string. The target file path generation\n   function, the parameter is resourceKey.\n * options?: RenderTemplateDirOptions. Glob Find the file configuration, the\n   specific function viewable is here [glob]\n   (https://www.npmjs.com/package/glob).\n\ntype RenderTemplateDirOptions = {\n  nodir?: boolean;\n  dot?: boolean;\n  ignore?: string | readonly string[];\n};\n","frontmatter":{"sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/handlebars.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/handlebars.mdx"},{"id":233,"title":"@modern-js/codesmith-api-json","routePath":"/en/guides/topic-detail/generator/codesmith/api/json","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":98},{"text":"API","id":"api","depth":2,"charIndex":642},{"text":"get","id":"get","depth":3,"charIndex":649},{"text":"extend","id":"extend","depth":3,"charIndex":782},{"text":"update","id":"update","depth":3,"charIndex":960}],"domain":"","content":"#\n\nThe JSON API encapsulation in the microgenerator provides common JSON file\noperation methods.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const jsonAPI = new JsonAPI(generator);\n  await jsonAPI.update(context.materials.default.get('package.json'), {\n    query: {},\n    update: {\n      $set: {\n        'dependencies.@modern-js/plugin-bff': `^2.0.0`,\n      },\n    },\n  });\n};\n\n\n * Create JsonAPI instance, the parameter is the generator of the microgenerator\n   function parameter, please see the composition of the microgenerator project\n   for details.\n * Just call the API on its example.\n\n\nAPI#\n\n\nget#\n\nGet the JSON file content.\n\nParameter:\n\n * resource: FsResource. A file resource, get by\n   context.materials.default.get().\n\n\nextend#\n\nMerge objects into a JSON file.\n\nParameter:\n\n * resource: FsResource. A file resource, get by\n   context.materials.default.get().\n * obj: Record. Object to be merged.\n\n\nupdate#\n\npdate object fields to JSON file.\n\nParameter:\n\n * resource: FsResource. A file resource, get by\n   context.materials.default.get().\n * operation: { query: Record; update: Record }. Update operation, use gesture\n   to view declaration-update in detail.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/json.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/json.mdx"},{"id":234,"title":"@modern-js/codesmith-api-npm","routePath":"/en/guides/topic-detail/generator/codesmith/api/npm","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":140},{"text":"API","id":"api","depth":2,"charIndex":519},{"text":"npmInstall","id":"npminstall","depth":3,"charIndex":526},{"text":"yarnInstall","id":"yarninstall","depth":3,"charIndex":694},{"text":"pnpmInstall","id":"pnpminstall","depth":3,"charIndex":864}],"domain":"","content":"#\n\nThe NPM API encapsulation in the microgenerator provides a common method for\ninstalling dependencies of different NPM package managers.\n\n\nUse#\n\n\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const npmApi = new NpmAPI(generator);\n  await npmApi.pnpmInstall();\n};\n\n\n * Create NpmAPI instance, the parameter is the generator of the microgenerator\n   function parameter, please see the composition of the microgenerator project\n   for details.\n\n * Just call the API on its example.\n\n\nAPI#\n\n\nnpmInstall#\n\nInstall dependency using npm.\n\nParameter:\n\n * cwd?: string. The execution directory of the install command, the default is\n   microgenerator outputPath.\n\n\nyarnInstall#\n\nInstall dependency using yarn.\n\nParameter:\n\n * cwd?: string. The execution directory of the install command, the default is\n   microgenerator outputPath.\n\n\npnpmInstall#\n\nInstall dependency using pnpm.\n\nParameter:\n\n * cwd?: string. The execution directory of the install command, the default is\n   microgenerator outputPath.","frontmatter":{"sidebar_position":7},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/api/npm.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/api/npm.mdx"},{"id":235,"title":"Develop a microgenerator project","routePath":"/en/guides/topic-detail/generator/codesmith/develop","lang":"en","toc":[{"text":"Create project","id":"create-project","depth":2,"charIndex":3},{"text":"Add template file","id":"add-template-file","depth":2,"charIndex":314},{"text":"Develop generator core logic","id":"develop-generator-core-logic","depth":2,"charIndex":508},{"text":"Test microgenerator","id":"test-microgenerator","depth":2,"charIndex":781},{"text":"Run the microgenerator","id":"run-the-microgenerator","depth":2,"charIndex":1222}],"domain":"","content":"#\n\n\nCreate project#\n\nModern.js provides a microgenerator to create a microgenerator project, you can\ndirectly create a microgenerator project with the following commands:\n\n$ mkdir \n$ npx @modern-js/codesmith-cli @modern-js/generator-generator\n\n? Package Name: \n? Package Manager: pnpm\n? Development Language: TS\n\n\n\nAdd template file#\n\nIn the templates folder of the project directory, it is used to store the\ntemplate files required by the generator. If there is no template file, this\nstep can be skipped.\n\n\nDevelop generator core logic#\n\nIn the project generated by default, it has been implemented to directly copy\nthe templates directory file to the target project, and the core logic\ndevelopment of the generator can be completed directly in the handleTemplateFile\nfunction.\n\n\nTest microgenerator#\n\nAfter the development of the microgenerator is completed, you need to execute\npnpm run build to compile the code. In development mode, you can use pnpm run\nbuild --watch.\n\nCodesmith provides the cli tool for running and testing the microgenerator.\nExecute it in the target directory with the following command:\n\nnpx @modern-js/codesmith-cli \n\n\nWhere generatorPath is the absolute path of the above generator project.\n\n\nRun the microgenerator#\n\nAfter the generator publishes to npm, use the following command to execute:\n\nnpx @modern-js/codesmith-cli \n\n\nWhere generatorName is the generator package name.\n\nINFO\n\n@modern-js/create also supports running micro-generators, you can use npx\n@modern-js/create --generator to run customized micro-generators.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/develop.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/develop.mdx"},{"id":236,"title":"What is a microgenerator","routePath":"/en/guides/topic-detail/generator/codesmith/introduce","lang":"en","toc":[{"text":"Core concept","id":"core-concept","depth":2,"charIndex":696},{"text":"GeneratorCore","id":"generatorcore","depth":3,"charIndex":712},{"text":"Materials","id":"materials","depth":3,"charIndex":1326}],"domain":"","content":"#\n\nModern.js provides the @modern-js/create tool and the new command for\ninitialization to create projects and the ability to enable some plugin\nfunctions, respectively, these tools are based on microgenerators, also known as\ncodesmith implementations.\n\nCodesmith is committed to providing a set of micro-generator operating\nmechanism, and maintain the context information in the execution process of the\nmicro-generator, so as to implement various operations based on files, commands,\netc., to complete sophisticated operations.\n\nCodesmith also encapsulates the commonly used methods, and can directly use the\nAPI functions it provides, which can more easily implement its own\nmicro-generator.\n\n\nCore concept#\n\n\nGeneratorCore#\n\nGeneratorCore is the core of codesmith running generator, maintaining the\ncontext and running methods during the execution of the generator.\n\nclass GeneratorCore {\n  logger: ILogger;\n  materialsManager: MaterialsManager;\n  outputPath: string;\n  output:\n    fs: (file: string | number, data: any, options?: fs.WriteFileOptions | string) => Promise;\n  };\n  _context: GeneratorContext;\n  addMaterial(key: string, material: FsMaterial): void;\n  runGenerator(generator: string, config?: Record): Promise;\n  runSubGenerator(subGenerator: string, relativePwdPath?: string, config?: Record): Promise;\n}\n\n\n\nMaterials#\n\nThe micro-generator resource information currently only includes file resources\n(fsMaterials). Through this field, the template resources in the generator\nexecution process can be obtained and operated through the API.\n\nclass MaterialsManager {\n  materialMap: {\n    // 资源映射关系\n    [materialUri: string]: FsMaterial;\n  };\n  loadLocalGenerator(generator: string): Promise;\n  loadRemoteGenerator(generator: string): Promise;\n}\n","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/introduce.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/introduce.mdx"},{"id":237,"title":"Execute microgenerator with JS code","routePath":"/en/guides/topic-detail/generator/codesmith/run-in-js","lang":"en","toc":[{"text":"install codesmith dependency","id":"install-codesmith-dependency","depth":2,"charIndex":210},{"text":"Create codesmith instance","id":"create-codesmith-instance","depth":2,"charIndex":274},{"text":"Call the forge method to execute the generator","id":"call-the-forge-method-to-execute-the-generator","depth":2,"charIndex":455}],"domain":"","content":"#\n\nIn addition to using the cli method to execute the micro generator, we\ninevitably need to execute the micro generator in the code. The following\ndescribes how to execute the micro generator in the js code.\n\n\ninstall codesmith dependency#\n\npnpm add @modern-js/codesmith\n\n\n\nCreate codesmith instance#\n\n\n\nconst smith = new CodeSmith({\n  debug: false, //Whether to enable debug mode, if true, the debug information in the generator will be displayed\n});\n\n\n\nCall the forge method to execute the generator#\n\ntype RunnerTask = Array<{\n  name: string;\n  config: Record;\n}>;\n\nconst task: RunnerTask = [\n  {\n    name: 'generator', // generator npm package name\n    config: {}, //The default configuration performed by the generator\n  },\n];\n\nawait smith.forge({\n  tasks: task.map(runner => ({\n    generator: runner.name,\n    config: runner.config,\n  })),\n  pwd: '.', // generator implementation path\n});\n","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/run-in-js.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/run-in-js.mdx"},{"id":238,"title":"The composition of the microgenerator","routePath":"/en/guides/topic-detail/generator/codesmith/structure","lang":"en","toc":[{"text":"package.json","id":"packagejson","depth":2,"charIndex":102},{"text":"Entry file","id":"entry-file","depth":2,"charIndex":204},{"text":"context","id":"context","depth":3,"charIndex":502},{"text":"generator","id":"generator","depth":3,"charIndex":1980},{"text":"Template File","id":"template-file","depth":2,"charIndex":2782}],"domain":"","content":"#\n\nA microgenerator project is a module project or an Npm package that contains\nseveral basic parts:\n\n\npackage.json#\n\nNPM package description information, including name, version, main and other\nfields.\n\n\nEntry file#\n\nThe js file corresponding to the above main field. The file exports a generator\nfunction by default, and the function format is as follows:\n\nexport default async (\n  context: GeneratorContext,\n  generator: GeneratorCore,\n) => {};\n\n\nThe function parameters are context and generator:\n\n\ncontext#\n\nContext provides context information maintained by the codesmith runtime. Its\ntype is defined as:\n\ninterface GeneratorContext {\n  materials: Record;\n  config: Record;\n  data?: Record;\n  current: { material: FsMaterial } | null;\n  [key: string]: any;\n}\n\n\nMaterials is an abstract file system for codesmith that maintains the mapping\nbetween generator names and actionable files.\n\nMaterials also maintains this default mapping relationship, which is used to\nmaintain the resource information of the current generator execution directory,\nand can operate on the target project resources through this field.\n\nFor example, when you need to modify a field in the package.json of the current\nproject:\n\nconst resource = context.materials.default.get(\n  path.join(appDir, 'package.json'),\n);\n\n\nPass the acquired resources to the JSON API provided by codesmith to implement\njson operations.\n\nThe currently running generator file resource is maintained on the current field\nof GeneratorContext, and the current FsMaterial can be obtained through\ncurrent.material.\n\nThe get method is provided in FsMaterial to get the resource file and pass the\nresource file to the API supported by the generator to process the template\nfile.\n\nFor example:\n\nconst resourceMap = await material.find('templates/**/*');\n\n\nAll template files in the generator that match to the templates /**/* rules can\nbe obtained in the above way, and the resource files can be operated by\ntraversing the object.\n\n\ngenerator#\n\nGenerator provides the function method of the codesmith runtime. Its type is\ndefined as:\n\ninterface GeneratorCore {\n    logger: Logger;\n    outputPath: string;\n    output: {\n        fs: (file: string | number, data: any, options?: string | fs.WriteFileOptions | undefined) => Promise\n    };\n    runSubGenerator: (subGenerator: string, relativePwdPath?: string | undefined, config?: Record | undefined): Promise\n}\n\n\nThe outputPath and the materials.default in the context point to the same\ndirectory, the outputPath is used to directly calculate the target path and\noperate, and the materials.default is used to obtain resource files.\n\nrunSubGenerator provides a way to run other microgenerators in one\nmicrogenerator, which will automatically update and maintain new context\ninformation.\n\n\nTemplate File#\n\nGenerator template file.\n\nIt is recommended to create a templates directory in the project root directory\nto maintain the template file of the microgenerator. During the execution of the\nmicrogenerator, you can only use your own template file. For template files that\nneed to be shared, it is recommended to use a shared sub-generator\nimplementation.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/codesmith/structure.mdx","_relativePath":"en/guides/topic-detail/generator/codesmith/structure.mdx"},{"id":239,"title":"Web App","routePath":"/en/guides/topic-detail/generator/config/app","lang":"en","toc":[{"text":"Project creation","id":"project-creation","depth":2,"charIndex":3},{"text":"New Command","id":"new-command","depth":2,"charIndex":286},{"text":"actionType","id":"actiontype","depth":3,"charIndex":522},{"text":"element","id":"element","depth":3,"charIndex":853},{"text":"name","id":"name","depth":4,"charIndex":1101},{"text":"function","id":"function","depth":3,"charIndex":1152},{"text":"BFF parameters","id":"bff-parameters","depth":4,"charIndex":1536}],"domain":"","content":"#\n\n\nProject creation#\n\nWhen creating a project, the configuration used by @modern-js/create when using\nthe --config parameter, and the configuration used when modifying and adding\ninput in the generator plugin.\n\nThe application project creation parameters are Generator Configuration.\n\n\nNew Command#\n\nThe new command configuration in the application project can be used through the\n--config parameter configuration when executing the new command, or when\ncreating elements and enabling functions in the generator plugin.\n\n\nactionType#\n\nThe action type (actionType) of the New command , the type supports two types:\n\n * element: reate engineering elements\n\n * function: enable function\n\nINFO\n\nThis parameter is not required when using the enable function and creating\nelements in the generator plugin, it is automatically added in the generator\nplugin.\n\n\nelement#\n\nElement name (element), supports two options:\n\n * Create an application entry(entry)\n\n * Create customized server dir(server)\n\nThe entry also need to be used in conjunction with the specific configuration,\nwhich is described as follows:\n\nname#\n\nEntry name (name), character string type.\n\n\nfunction#\n\nOptional function name (function), supports the following options:\n\n * Tailwind CSS(tailwindcss)\n\n * BFF(bff)\n\n * SSG(ssg)\n\n * Micro Frontend(micro_frontend)\n\n * Unit Test / Integration Test(test)\n\n * Storybook(mwa_storybook)\n\n * UA-based Polyfill Feature'(polyfill)\n\n * Global Proxy(proxy)\n\nbff also need to be used in conjunction with configuration, as described below:\n\nBFF parameters#\n\nbffType#\n\nBFF type (bffType), supports two options:\n\n * Function mode(function)\n\n * Framework mode(framework)\n\nframework#\n\nBFF runtime framework (framework), supports two options:\n\n * Express(express)\n\n * Koa(koa)","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/config/app.mdx","_relativePath":"en/guides/topic-detail/generator/config/app.mdx"},{"id":240,"title":"Generator Configuration","routePath":"/en/guides/topic-detail/generator/config/common","lang":"en","toc":[{"text":"solution","id":"solution","depth":3,"charIndex":3},{"text":"scenes","id":"scenes","depth":3,"charIndex":288},{"text":"language","id":"language","depth":3,"charIndex":614},{"text":"packageManager","id":"packagemanager","depth":3,"charIndex":712},{"text":"Other configurations","id":"other-configurations","depth":2,"charIndex":973},{"text":"noNeedInstall","id":"noneedinstall","depth":3,"charIndex":997},{"text":"noNeedGit","id":"noneedgit","depth":3,"charIndex":1096},{"text":"successInfo","id":"successinfo","depth":3,"charIndex":1208},{"text":"isMonorepoSubProject","id":"ismonoreposubproject","depth":3,"charIndex":1366},{"text":"isTest","id":"istest","depth":3,"charIndex":1464},{"text":"isPublic","id":"ispublic","depth":3,"charIndex":1657}],"domain":"","content":"#\n\n\nsolution#\n\nEngineering solution type (solution), the options are as follows:\n\n * Application(mwa)\n\n * Module(module)\n\n * Monorepo\n\nINFO\n\nSolution configuration can only be used in the --config parameter of\n@modern-js/create, not by setting the default value in the generator plugin.\n\n\nscenes#\n\nProject scenarios (scenes), when using the generator plugin that creates the\nproject scene type, this value is the key value of the corresponding generator\nplugin.\n\nINFO\n\nscenes configuration can only be used in the --config parameter of\n@modern-js/create, not by setting the default value in the generator plugin.\n\n\nlanguage#\n\nDevelopment language (language), the options are as follows:\n\n * TS(ts)\n\n * ES6+(js)\n\n\npackageManager#\n\nPackage management tool (packageManager), the options are as follows:\n\n * pnpm(pnpm)\n\n * Yarn(yarn)\n\nINFO\n\nIn the custom type of the generator plugin to create a project scenario, only\nthe packageManager configuration is provided by default.\n\n\nOther configurations#\n\n\nnoNeedInstall#\n\n * Type: boolean\n * Default: false\n\nWhether to skip the dependency installation.\n\n\nnoNeedGit#\n\n * Type: boolean\n * Default: false\n\nWhether to skip git initialization and commit initial commit.\n\n\nsuccessInfo#\n\n * Type: string\n * Default: Command operation prompts for different project schemes.\n\nCustomize prompt information to create project success.\n\n\nisMonorepoSubProject#\n\n * Type: boolean\n * Default: false\n\nWhether it is a Monorepo subproject.\n\n\nisTest#\n\n * Type: boolean\n * Default: false\n\nWorks on an Application project to identify whether it is a test project.\n\n * true: create project to examples/\n * false: create project to apps/\n\n\nisPublic#\n\n * Type: boolean\n * Default: false\n\nUsed in the Module project to identify whether it needs to be published to npm.\n\n * true: create project to packages/\n * false: create project to features/","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/config/common.mdx","_relativePath":"en/guides/topic-detail/generator/config/common.mdx"},{"id":241,"title":"Module","routePath":"/en/guides/topic-detail/generator/config/module","lang":"en","toc":[{"text":"Project creation","id":"project-creation","depth":2,"charIndex":3},{"text":"packageName","id":"packagename","depth":3,"charIndex":286},{"text":"New Command","id":"new-command","depth":2,"charIndex":353},{"text":"actionType","id":"actiontype","depth":3,"charIndex":562},{"text":"function","id":"function","depth":3,"charIndex":845}],"domain":"","content":"#\n\n\nProject creation#\n\nWhen creating a project, the configuration used by @modern-js/create when using\nthe --config parameter, and the configuration used when modifying and adding\ninput in the generator plugin.\n\nThe application project creation parameters are Generator Configuration.\n\n\npackageName#\n\nPackage name (packageName), character string type.\n\n\nNew Command#\n\nThe new command configuration in the module project can be used through the\n--config parameter configuration when executing the new command, or when\nenabling functions in the generator plugin.\n\n\nactionType#\n\nThe action type (actionType) of the New command, he type supports one:\n\n * function: enable function\n\nINFO\n\nThis parameter is not required when using the enable function and creating\nelements in the generator plugin, it is automatically added in the generator\nplugin.\n\n\nfunction#\n\nOptional function name (function), supports the following options:\n\n * Tailwind CSS(tailwindcss)\n\n * Storybook(mwa_storybook)\n\n * Runtime API(runtimeApi)\n\n * Test(test)","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/config/module.mdx","_relativePath":"en/guides/topic-detail/generator/config/module.mdx"},{"id":242,"title":"Monorepo","routePath":"/en/guides/topic-detail/generator/config/monorepo","lang":"en","toc":[{"text":"Create subproject","id":"create-subproject","depth":2,"charIndex":48},{"text":"solution","id":"solution","depth":3,"charIndex":373},{"text":"packageName","id":"packagename","depth":3,"charIndex":557},{"text":"packagePath","id":"packagepath","depth":3,"charIndex":627}],"domain":"","content":"#\n\nMonorepo projects only need PackageManager.\n\n\nCreate subproject#\n\nThe Monorepo project supports the creation of sub-projects by using the new\ncommand. The sub-project type supports application, test application, module,\ninternal module. In addition to the respective configuration of the application\nand module, some general sub-project configuration is required here.\n\n\nsolution#\n\nSubproject type(solution), the different subproject type fields are:\n\n * Application (mwa)\n * Application (Test) (mwa_test)\n * Module\n * Modules (internal) (inner_module)\n\n\npackageName#\n\nSubproject name (packageName), character string type.\n\n\npackagePath#\n\nSubproject path (packagePath), character string type.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/config/monorepo.mdx","_relativePath":"en/guides/topic-detail/generator/config/monorepo.mdx"},{"id":243,"title":"Why do you need a generator plugin","routePath":"/en/guides/topic-detail/generator/plugin/abstract","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js provides application, modules and Monorepo three engineering\nsolutions, and by using the @modern-js/create tool can create the initial\nproject template of the three engineering solutions, the initial project\ntemplate will provide basic code development environment, simple sample code and\nconfiguration, etc.\n\nModern.js provides an initialization template that is versatile and can meet\nsome general project development needs.\n\nWhen you use Modern.js in depth, you will inevitably find that every time you\ncreate a project, you will make some similar changes specific to your own\nproject, such as modifying the sample code, adding some configuration, enabling\nsome functions, etc.\n\nThe generator plugin can help you precipitate these individual or team-specific\nchanges. Simply bring the --plugin parameter when executing npx\n@modern-js/create to avoid the need to repeatedly modify the project every time\nthe project is created..\n\nThe generator plugin is based on the initialization template project provided by\nthe Modern.js, providing methods to add, delete and modify templates, and\nmodifying package.json, modernConfig configuration and opening functions in a\nfast way.\n\nThe generator plugin provides two ways of customization:\n\n 1. Extended engineering: directly customize the three major engineering\n    provided by default.\n\n 2. Create engineering scenes: Create corresponding engineering scenes based on\n    the default three major engineering.\n\nThe next step will introduce how to use and develop the generator plugin step by\nstep.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/abstract.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/abstract.mdx"},{"id":244,"title":"addFile","routePath":"/en/guides/topic-detail/generator/plugin/api/file/addFile","lang":"en","toc":[{"text":"type","id":"type","depth":2,"charIndex":598},{"text":"file","id":"file","depth":2,"charIndex":646},{"text":"template","id":"template","depth":2,"charIndex":692},{"text":"templateFile","id":"templatefile","depth":2,"charIndex":840},{"text":"force","id":"force","depth":2,"charIndex":960},{"text":"data","id":"data","depth":2,"charIndex":1140}],"domain":"","content":"#\n\nAdd a single file. Use to add a single template file to the templates directory\nor add to a template file directly using templates.\n\nThis method can be used with any file type, for file types other than binary,\nHandlebars render is performed when files are added.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport interface AddFileParams {\n  type: FileType;\n  file: string;\n  template?: string;\n  templateFile?: string;\n  force?: boolean;\n  data?: Record;\n}\nexport type ForgedAPI = {\n  addFile: (params: AddFileParams) => Promise;\n  ...\n};\n\n\n\ntype#\n\nFile type, specific viewableFile type.\n\n\nfile#\n\nThe path to the created target file.\n\n\ntemplate#\n\nFile template, configuration This field value can be used directly for template\nrender files. The priority is lower than templateFile.\n\n\ntemplateFile#\n\nTemplate file, the template file path used for rendering, its value is the\nrelative path of templates.\n\n\nforce#\n\nWhether to force coverage, when the added file already exists, an error will be\nreported in conflict by default. When setting this value to true, coverage can\nbe forced.\n\n\ndata#\n\nHandlebars renders data.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/addFile.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/addFile.mdx"},{"id":245,"title":"addHelper","routePath":"/en/guides/topic-detail/generator/plugin/api/file/addHelper","lang":"en","toc":[{"text":"name","id":"name","depth":2,"charIndex":312},{"text":"fn","id":"fn","depth":2,"charIndex":341}],"domain":"","content":"#\n\nFor text files, add a customized Help function of Handlebars, the specific\nviewable documentCustom Helpers.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\n  addHelper: (name: string, fn: Handlebars.HelperDelegate) => void;\n  ...\n};\n\n\n\nname#\n\nhelp function name.\n\n\nfn#\n\nhelp function.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/addHelper.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/addHelper.mdx"},{"id":246,"title":"addManyFile","routePath":"/en/guides/topic-detail/generator/plugin/api/file/addManyFile","lang":"en","toc":[{"text":"type","id":"type","depth":2,"charIndex":629},{"text":"destination","id":"destination","depth":2,"charIndex":677},{"text":"templateFiles","id":"templatefiles","depth":2,"charIndex":818},{"text":"templateBase","id":"templatebase","depth":2,"charIndex":928},{"text":"fileNameFunc","id":"filenamefunc","depth":2,"charIndex":1209},{"text":"data","id":"data","depth":2,"charIndex":1334}],"domain":"","content":"#\n\nImport in batches file. Multiple files for adding the templates directory.\n\nThis method can be used with any file type, for file types other than binary,\nHandlebars render is performed when files are added.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport interface AddManyFilesParams {\n  type: FileType;\n  destination: string;\n  templateFiles: string[] | (() => string[]);\n  templateBase?: string;\n  fileNameFunc?: (name: string) => string;\n  data?: Record; // template data\n}\nexport type ForgedAPI = {\n  addManyFiles: (params: AddManyFilesParams) => Promise;\n  ...\n};\n\n\n\ntype#\n\nFile type, specific viewableFile type.\n\n\ndestination#\n\nCreate the target folder path. Since it is an import in batches file, fill in\nthe folder path that needs to be written here.\n\n\ntemplateFiles#\n\nList of template files.\n\nThis parameter supports the function parameter, as well as globby.\n\n\ntemplateBase#\n\nTemplate base path.\n\nThe template path is usually the template file in the same directory. If the\nrender result needs to remove the template file prefix directory, this field can\nbe used.\n\nTemplate render file content will be equal to templateFiles - templateBase\n\n\nfileNameFunc#\n\nRename file function, where the file name of render is passed in once, and can\nbe renamed in this function.\n\n\ndata#\n\nHandlebars renders data.","frontmatter":{"sidebar_position":5},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/addManyFile.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/addManyFile.mdx"},{"id":247,"title":"addPartial","routePath":"/en/guides/topic-detail/generator/plugin/api/file/addPartial","lang":"en","toc":[{"text":"name","id":"name","depth":2,"charIndex":306},{"text":"str","id":"str","depth":2,"charIndex":329}],"domain":"","content":"#\n\nFor text files, add a customized Partial fragment of Handlebars, the specific\nviewable document Partials.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\n  addPartial: (name: string, str: Handlebars.Template) => void;\n  ...\n};\n\n\n\nname#\n\npartial name.\n\n\nstr#\n\npartial template string.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/addPartial.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/addPartial.mdx"},{"id":248,"title":"Introduction","routePath":"/en/guides/topic-detail/generator/plugin/api/file/introduce","lang":"en","toc":[{"text":"File type","id":"file-type","depth":2,"charIndex":281}],"domain":"","content":"#\n\nThe file operation API can be used in the onForged time to live function, which\ncan add, delete and change the current project file.\n\nFile operation API related path to fill in the project relative path, generator\nplugin will automatically add the current project path prefix.\n\n\nFile type#\n\nThe generator plugin divides file types into the following categories:\n\n * Text files: plain text content files, files that can be templated using\n   handlebars.\n\n * Binary files: pictures, audio, video and other files.\n\nWARNING\n\nThe jsx or tsx file using the variable is a binary file, and its syntax\nconflicts with handlebars render, which will cause the template file failed to\ncreate.\n\n * JSON files: Files in JSON format, such as package.json, tsconfig.json.\n\n * Text List File: A file consisting of lines of text, such as .gitignore,\n   .editorconfig, .npmrc.\n\nThe file manipulation API for the generator plugin will operate on these four\nfile types.\n\nIts type is defined as:\n\nexport enum FileType {\n  Text = 'text',\n  Binary = 'binary',\n  Json = 'json',\n  TextRaw = 'textRaw',\n}\n","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/introduce.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/introduce.mdx"},{"id":249,"title":"rmDir","routePath":"/en/guides/topic-detail/generator/plugin/api/file/rmDir","lang":"en","toc":[{"text":"dirName","id":"dirname","depth":2,"charIndex":295}],"domain":"","content":"#\n\nDelete folder. This method deletes all files under the folder in recursion.\n\nThis method can be used for any file type.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\n  rmDir: (dirName: string) => Promise;\n  ...\n};\n\n\n\ndirName#\n\nThe folder name or folder path to delete.","frontmatter":{"sidebar_position":10},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/rmDir.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/rmDir.mdx"},{"id":250,"title":"rmFile","routePath":"/en/guides/topic-detail/generator/plugin/api/file/rmFile","lang":"en","toc":[{"text":"fileName","id":"filename","depth":2,"charIndex":238}],"domain":"","content":"#\n\nDelete the file.\n\nThis method can be used for any file type.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\n  rmFile: (fileName: string) => Promise;\n  ...\n};\n\n\n\nfileName#\n\nFile name or file path to delete.","frontmatter":{"sidebar_position":9},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/rmFile.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/rmFile.mdx"},{"id":251,"title":"updateJSONFile","routePath":"/en/guides/topic-detail/generator/plugin/api/file/updateJSONFile","lang":"en","toc":[{"text":"fileName","id":"filename","depth":2,"charIndex":342},{"text":"updateInfo","id":"updateinfo","depth":2,"charIndex":399}],"domain":"","content":"#\n\nUpdate the JSON file fields.\n\nThis method is suitable for JSON file types, and can batch update field values\nin JSON files.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\n  updateJSONFile: (\n    fileName: string,\n    updateInfo: Record,\n  ) => Promise;\n  ...\n};\n\n\n\nfileName#\n\nThe filename or file path of the JSON file.\n\n\nupdateInfo#\n\nField update information.\n\nThis information is represented in Record form.\n\nFor example, the name field needs to be updated:\n\napi.updateJSONFile(file, {\n  name: 'new name',\n});\n\n\nNested fields need to be updated:\n\napi.updateJSONFile(file, {\n  'dependencies.name': 'new name',\n});\n\n\nWARNING\n\nPay attention to the field name when updating the nested field. If it is not a\ntotal volume update, the nested key should also be written into the field name.","frontmatter":{"sidebar_position":6},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/updateJSONFile.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/updateJSONFile.mdx"},{"id":252,"title":"updateModernConfig","routePath":"/en/guides/topic-detail/generator/plugin/api/file/updateModernConfig","lang":"en","toc":[{"text":"updateInfo","id":"updateinfo","depth":2,"charIndex":238}],"domain":"","content":"#\n\nUpdate the modernConfig field in package.json.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\n  updateModernConfig: (updateInfo: Record) => Promise;\n  ...\n};\n\n\n\nupdateInfo#\n\nField update information.\n\nINFO\n\nThis function is the package of updateJSONFile, which will automatically update\nthe modernConfig field of package.json. Just fill in the update information\nrelative to modernConfig in the updateInfo.","frontmatter":{"sidebar_position":8},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/updateModernConfig.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/updateModernConfig.mdx"},{"id":253,"title":"updateTextRawFile","routePath":"/en/guides/topic-detail/generator/plugin/api/file/updateTextRawFile","lang":"en","toc":[{"text":"fileName","id":"filename","depth":2,"charIndex":324},{"text":"update","id":"update","depth":2,"charIndex":386}],"domain":"","content":"#\n\nUpdate the text list file content.\n\nThis method works with the text list file type.\n\nThis method is available on the onForged time to live API parameter.\n\nIts type is defined as:\n\nexport type ForgedAPI = {\nupdateTextRawFile: (\n    fileName: string,\n    update: (content: string[]) => string[],\n  ) => Promise;\n  ...\n};\n\n\n\nfileName#\n\nThe filename or file path of the text list file.\n\n\nupdate#\n\nUpdate function.\n\nThe function parameter is the current file content. The content will be divided\nby \\n and passed into function in the form of array. The return value of\nfunction is also array. The internal will be automatically merged with \\n and\nwritten to the source file.","frontmatter":{"sidebar_position":7},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/file/updateTextRawFile.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/file/updateTextRawFile.mdx"},{"id":254,"title":"gitAddAndCommit","routePath":"/en/guides/topic-detail/generator/plugin/api/git/gitAddAndCommit","lang":"en","toc":[{"text":"commitMessage","id":"commitmessage","depth":2,"charIndex":165}],"domain":"","content":"#\n\nCommit the current repository changes.\n\nIts type is defined as:\n\nexport type AfterForgedAPI = {\n  gitAddAndCommit: (commitMessage: string) => Promise;\n  ...\n};\n\n\n\ncommitMessage#\n\nCommit information.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/git/gitAddAndCommit.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/git/gitAddAndCommit.mdx"},{"id":255,"title":"initGitRepo","routePath":"/en/guides/topic-detail/generator/plugin/api/git/initGitRepo","lang":"en","toc":[],"domain":"","content":"#\n\nnitialization The current directory is the Git repository.\n\nIts type is defined as:\n\nexport type AfterForgedAPI = {\n  initGitRepo: () => Promise;\n  ...\n};\n","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/git/initGitRepo.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/git/initGitRepo.mdx"},{"id":256,"title":"isInGitRepo","routePath":"/en/guides/topic-detail/generator/plugin/api/git/isInGitRepo","lang":"en","toc":[],"domain":"","content":"#\n\nDetermines whether the current project is a Git repository.\n\nIts type is defined as:\n\nexport type AfterForgedAPI = {\n  isInGitRepo: () => Promise;\n  ...\n};\n","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/git/isInGitRepo.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/git/isInGitRepo.mdx"},{"id":257,"title":"AfterForged","routePath":"/en/guides/topic-detail/generator/plugin/api/hook/afterForged","lang":"en","toc":[{"text":"func","id":"func","depth":2,"charIndex":509},{"text":"api","id":"api","depth":3,"charIndex":616},{"text":"inputData","id":"inputdata","depth":3,"charIndex":723}],"domain":"","content":"#\n\nafterForged function is the generator plugin time to live function, which is\nusually used to define operations such as installation dependency and Git.\nProfessional operations will be performed after the onForged function is\nexecuted.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport type PluginAfterForgedFunc = (\n  api: AfterForgedAPI,\n  inputData: Record,\n) => Promise;\n\nexport interface IPluginContext {\n  afterForged: (func: PluginAfterForgedFunc) => void;\n  ...\n}\n\n\n\nfunc#\n\nThe onForged parameter is a callback function, and the function parameters are\napi and inputData.\n\n\napi#\n\nA list of supported functions in afterForged time to live, specifically viewabl\nGit API 和 NPM API.\n\n\ninputData#\n\nCurrent user input, the user can be used to obtain the current input information\nand configuration information.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/hook/afterForged.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/hook/afterForged.mdx"},{"id":258,"title":"OnForged","routePath":"/en/guides/topic-detail/generator/plugin/api/hook/onForged","lang":"en","toc":[{"text":"func","id":"func","depth":2,"charIndex":470},{"text":"api","id":"api","depth":3,"charIndex":577},{"text":"inputData","id":"inputdata","depth":3,"charIndex":697}],"domain":"","content":"#\n\nonForged function is the generator plugin time to live function, which is\nusually used to define file type operations that will be performed after the\ncompletion of the base project solution file operation.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport type PluginForgedFunc = (\n  api: ForgedAPI,\n  inputData: Record,\n) => void | Promise;\n\nexport interface IPluginContext {\n  onForged: (func: PluginForgedFunc) => void;\n  ...\n}\n\n\n\nfunc#\n\nThe onForged parameter is a callback function, and the function parameters are\napi and inputData.\n\n\napi#\n\nA list of supported functions in onForged time to live, specifically viewable\nFile API and Enable function API.\n\n\ninputData#\n\nCurrent user input, the user can be used to obtain the current input information\nand configuration information.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/hook/onForged.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/hook/onForged.mdx"},{"id":259,"title":"isFileExist","routePath":"/en/guides/topic-detail/generator/plugin/api/info/isFileExit","lang":"en","toc":[{"text":"fileName","id":"filename","depth":2,"charIndex":199}],"domain":"","content":"#\n\nDetermine if the file exists.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport interface IPluginContext {\n  isFileExist: (fileName: string) => Promise;\n  ...\n}\n\n\n\nfileName#\n\nThe file name or file path that needs to be judged is based on the relative path\nof the created project.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/info/isFileExit.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/info/isFileExit.mdx"},{"id":260,"title":"locale","routePath":"/en/guides/topic-detail/generator/plugin/api/info/locale","lang":"en","toc":[],"domain":"","content":"#\n\nCurrent language.\n\nThe method is available directly on the context.\n\nThere are two values for this field:\n\n * zh: Chinese\n\n * en: English\n\nThe generator plugin can adjust the value of the relevant display field\naccording to this field.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/info/locale.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/info/locale.mdx"},{"id":261,"title":"readDir","routePath":"/en/guides/topic-detail/generator/plugin/api/info/readDir","lang":"en","toc":[{"text":"dir","id":"dir","depth":2,"charIndex":199}],"domain":"","content":"#\n\nRead the folder and get the file list.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport interface IPluginContext {\n  readDir: (dir: string) => Promise;\n  ...\n}\n\n\n\ndir#\n\nIts type is defined as: folder name or path, based on the relative path of the\ncreated project.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/info/readDir.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/info/readDir.mdx"},{"id":262,"title":"addInputAfter","routePath":"/en/guides/topic-detail/generator/plugin/api/input/addInputAfter","lang":"en","toc":[{"text":"key","id":"key","depth":2,"charIndex":218},{"text":"input","id":"input","depth":2,"charIndex":367},{"text":"Example","id":"example","depth":2,"charIndex":485}],"domain":"","content":"#\n\nAdd input question after default input.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport interface IPluginContext {\n  addInputAfter: (key: string, input: Schema) => void;\n  ...\n}\n\n\n\nkey#\n\nModern.js the problem keyword of the configuration of the engineering solution,\nthe specific configuration viewable Generator Configuration.\n\n\ninput#\n\nQuestions that need to be added, specific type definition viewable Customize\ninput related type definition.\n\n\nExample#\n\nAdd input after package manager:\n\ncontext.addInputAfter('packageManager', {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: 'Develop Language',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n});\n\n\nNotes\n\n 1. The key of the added question cannot be duplicated with the key of the\n    question of the item type itself provided by the Modern.js.\n\n 2. The priority of adding the problem addInputAfter is higher than\n    addInputBefore. When adding After problem to one key and Before problem to\n    the next key at the same time, After problem will be before Before.\n\n 3. When multiple questions need to be added before or after the same key, the\n    method can be called multiple times, and the order of questions will be\n    permutated in the order in which they are called.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/input/addInputAfter.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/input/addInputAfter.mdx"},{"id":263,"title":"addInputBefore","routePath":"/en/guides/topic-detail/generator/plugin/api/input/addInputBefore","lang":"en","toc":[{"text":"key","id":"key","depth":2,"charIndex":220},{"text":"input","id":"input","depth":2,"charIndex":369},{"text":"Example","id":"example","depth":2,"charIndex":487}],"domain":"","content":"#\n\nAdd input question before default input.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport interface IPluginContext {\n  addInputBefore: (key: string, input: Schema) => void;\n  ...\n}\n\n\n\nkey#\n\nModern.js the problem keyword of the configuration of the engineering solution,\nthe specific configuration viewable Generator Configuration.\n\n\ninput#\n\nQuestions that need to be added, specific type definition viewable Customize\ninput related type definition.\n\n\nExample#\n\nAdd input before package manager:\n\ncontext.addInputBefore('packageManager', {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: 'Develop Langauge',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n});\n\n\nNotes\n\n 1. The key of the added question cannot be duplicated with the key of the\n    question of the item type itself provided by the Modern.js.\n\n 2. The priority of adding the problem addInputAfter is higher than\n    addInputBefore. When adding After problem to one key and Before problem to\n    the next key at the same time, After problem will be before Before.\n\n 3. When multiple questions need to be added before or after the same key, the\n    method can be called multiple times, and the order of questions will be\n    permutated in the order in which they are called.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/input/addInputBefore.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/input/addInputBefore.mdx"},{"id":264,"title":"setInput","routePath":"/en/guides/topic-detail/generator/plugin/api/input/setInput","lang":"en","toc":[{"text":"key","id":"key","depth":2,"charIndex":216},{"text":"filed","id":"filed","depth":2,"charIndex":365},{"text":"value","id":"value","depth":2,"charIndex":549},{"text":"Example","id":"example","depth":2,"charIndex":951}],"domain":"","content":"#\n\nSet the problem attribute.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport interface IPluginContext {\n  setInput: (key: string, field: string, value: unknown) => void;\n  ...\n}\n\n\n\nkey#\n\nThe problem keyword can be the problem keyword of the Modern.js project\nsolution, or the keyword of the new problem in the generator plugin.\n\n\nfiled#\n\nhe problem field to be set, you can modify other fields except the key of the\ncurrent Input, Input specific type definition viewable Customize input related\ntype definition.\n\n\nvalue#\n\nThe value of the problem field to be setted. value supports function, the\nfunction parameter is the current field value, and the return value needs to be\nthe complete new field value.\n\nINFO\n\nFor the input options provided by the Modern.js project type, only delete is\ntemporarily supported, and increase is not supported. The increase will cause\nproblems in the logical judgment in the code.\n\n\nExample#\n\nModify the display name of packageName:\n\ncontext.setInput('packageName', 'title', 'Show title');\n","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/input/setInput.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/input/setInput.mdx"},{"id":265,"title":"setInputValue","routePath":"/en/guides/topic-detail/generator/plugin/api/input/setInputValue","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":197}],"domain":"","content":"#\n\nSets the input default value.\n\nThe method is available directly on the context.\n\nIts type is defined as:\n\nexport interface IPluginContext {\n    setInputValue: (value: Record) => void;\n  ...\n}\n\n\n\nExample#\n\ncontext.setInputValue({\n  moduleRunWay: 'no',\n});\n\n\nWARNING\n\nThis method only supports setting the configuration parameter value\ncorresponding to the project solution integrated by the generator plugin, and\ndoes not support setting the project solution type (solution) and project scene\n(scenes). These two configurations can be set by the --config parameter at\nexecution default value.","frontmatter":{"sidebar_position":7},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/input/setInputValue.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/input/setInputValue.mdx"},{"id":266,"title":"Customize input related type definition","routePath":"/en/guides/topic-detail/generator/plugin/api/input/type","lang":"en","toc":[{"text":"Input","id":"input","depth":2,"charIndex":3},{"text":"type","id":"type","depth":3,"charIndex":121},{"text":"name","id":"name","depth":3,"charIndex":344},{"text":"title","id":"title","depth":3,"charIndex":369},{"text":"default","id":"default","depth":3,"charIndex":400},{"text":"enum","id":"enum","depth":3,"charIndex":434},{"text":"x-validator","id":"x-validator","depth":3,"charIndex":609},{"text":"x-reactions","id":"x-reactions","depth":3,"charIndex":748},{"text":"properties","id":"properties","depth":3,"charIndex":877},{"text":"Example","id":"example","depth":2,"charIndex":941}],"domain":"","content":"#\n\n\nInput#\n\nModern.js Input input type uses the open source Formily Schema, with support for\nsome of its Schema fields.\n\n\ntype#\n\nschema types. Currently, the input supported by the generator plugin is of type\nstring, number and object. Where object is used for implementation schema\nnested, it needs to be used in conjunction with properties.\n\n\nname#\n\nschema keyword.\n\n\ntitle#\n\nschema display name.\n\n\ndefault#\n\nschema default value.\n\n\nenum#\n\nIf the schema is selection type, this field is used to define the option\ncontent.\n\nEach option supports two fields:\n\n * value: option value.\n\n * label: display name.\n\n\nx-validator#\n\nschema verification rules. Formily's verification method is supported here, for\ndetails, please refer to Formily Validate.\n\n\nx-reactions#\n\nschema field linkage. Formily's linkage method is supported here, for details,\nplease refer to Formily Linkages.\n\n\nproperties#\n\nWhen schema type is object, define its subforms.\n\n\nExample#\n\nconst schema = {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: 'Develop Langauge',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n};\n","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/input/type.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/input/type.mdx"},{"id":267,"title":"Introduction","routePath":"/en/guides/topic-detail/generator/plugin/api/introduce","lang":"en","toc":[{"text":"Generator plugin composition","id":"generator-plugin-composition","depth":2,"charIndex":179},{"text":"Classification","id":"classification","depth":2,"charIndex":1109},{"text":"Type definition","id":"type-definition","depth":3,"charIndex":1399},{"text":"Extended engineering","id":"extended-engineering","depth":4,"charIndex":1518},{"text":"Create engineering scenes","id":"create-engineering-scenes","depth":4,"charIndex":1633},{"text":"Custom type","id":"custom-type","depth":3,"charIndex":2210}],"domain":"","content":"#\n\nModern.js supports the customization of the provided engineering solutions by\nmeans of generator plugins or the customization of specific scenarios for\nengineering solutions.\n\n\nGenerator plugin composition#\n\nThe generator plugin is a module that can be developed directly using Modern.js\nmodule engineering solutions. Of course, Modern.js also provides the\ncorresponding generator plugin (@modern-js/generator-plugin-plugin) to directly\ncreate a new generator plugin project.\n\nA generator plugin project directory is as follows:\n\n.\n├── README.md\n├── package.json\n├── src\n│   ├── index.ts\n│   └── modern-app-env.d.ts\n├── templates\n└── tsconfig.json\n\n\nThe src/index.ts is the source code directory, which is used to develop the\ngenerator plugin logic. The plugin exports a function by default, and the\nfunction parameter is context. Some methods are provided on the context to\ndirectly operate the current project. These methods will be introduced in detail\nlater in this chapter.\n\nThe templates directory is the template directory used to store template files\nthat need to be used in the generator plugin.\n\n\nClassification#\n\nThere are two types of generator plugins:\n\n 1. Extended engineering: directly customize the three major engineering\n    provided by default.\n\n 2. Create engineering scenes: Create corresponding engineering scenes based on\n    the default three major engineering schemes.\n\n\nType definition#\n\nThe classification of the generator plugin is provided by the meta information\nin the package.json.\n\nExtended engineering#\n\n{\n  \"meta\": {\n    \"extend\": \"mwa\" // The three engineering is mwa, module, monorepo\n  }\n}\n\n\nCreate engineering scenes#\n\n{\n  \"meta\": {\n    \"key\": \"new_solution\",\n    \"name\": \"New Solution\",\n    \"type\": \"mwa\" // In addition to the three major engineering solutions, the type here also supports the customize (custom) type\n  }\n}\n\n\nkey is the scene scheme name and the value is a character string. name is the\ndisplay name of the scene scheme, used for the display of the option when used,\nand the value is a character string. type is the project solution type. In\naddition to supporting three project solutions like extend, it also supports the\ncustomize (custom) type.\n\n\nCustom type#\n\nThe customize type provides the implementation capability of the full custom\nproject solution. When using this type to create a new project solution\nscenario, only a small amount of code for best practices at the development\nlevel is provided, such as .gitignore, .editorConfig and other files,\nspecifically for the following directory structure:\n\n.\n├── .editorconfig\n├── .gitignore\n├── .idea\n│   ├── codeStyles\n│   │   ├── Project.xml\n│   │   └── codeStyleConfig.xml\n│   ├── inspectionProfiles\n│   │   └── Project_Default.xml\n│   └── jsLinters\n│       └── eslint.xml\n├── .nvmrc\n└── .vscode\n    ├── extensions.json\n    └── settings.json\n\n\nCustomized types ensure flexible configuration according to their needs for\nengineering solutions.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/introduce.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/introduce.mdx"},{"id":268,"title":"createElement","routePath":"/en/guides/topic-detail/generator/plugin/api/new/createElement","lang":"en","toc":[{"text":"element","id":"element","depth":2,"charIndex":357},{"text":"params","id":"params","depth":2,"charIndex":418}],"domain":"","content":"#\n\nCreate engineering elements that only support application engineering solutions.\n\nThis method is available on the onForged API parameter.\n\nIts type is defined as:\n\nexport enum ActionElement {\n  Entry = 'entry',\n  Server = 'server',\n}\nexport type ForgedAPI = {\n  createElement: (\n    element: ActionElement,\n    params: Record,\n  ) => Promise;\n  ...\n};\n\n\n\nelement#\n\nProject element type, supports entry and server.\n\n\nparams#\n\nFor other parameters of creating elements, please refer toApp New Command.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/new/createElement.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/new/createElement.mdx"},{"id":269,"title":"createSubProject","routePath":"/en/guides/topic-detail/generator/plugin/api/new/createSubProject","lang":"en","toc":[{"text":"solution","id":"solution","depth":2,"charIndex":396},{"text":"params","id":"params","depth":2,"charIndex":448}],"domain":"","content":"#\n\nCreate subprojects and only support Monorepo engineering solutions.\n\nThis method is available on the onForged API parameter.\n\nIts type is defined as:\n\nexport enum SubSolution {\n  MWA = 'mwa',\n  MWATest = 'mwa_test',\n  Module = 'module',\n  InnerModule = 'inner_module',\n}\nexport type ForgedAPI = {\n  createSubProject: (\n    solution: SubSolution,\n    params: Record,\n  ) => Promise;\n  ...\n};\n\n\n\nsolution#\n\nSub-project engineering solution name.\n\n\nparams#\n\nFor other parameters of creating subprojects, please refer toMonorepo Create Sub\nProject.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/new/createSubProject.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/new/createSubProject.mdx"},{"id":270,"title":"enableFunc","routePath":"/en/guides/topic-detail/generator/plugin/api/new/enableFunc","lang":"en","toc":[{"text":"func","id":"func","depth":2,"charIndex":620},{"text":"params","id":"params","depth":2,"charIndex":734}],"domain":"","content":"#\n\nEnable functionality to support application and module engineering scenarios.\n\nThis method is available on the onForged API parameter.\n\nIts type is defined as:\n\nexport enum ActionFunction {\n  UnBundle = 'unbundle',\n  TailwindCSS = 'tailwindcss',\n  BFF = 'bff',\n  MicroFrontend = 'micro_frontend',\n  I18n = 'i18n',\n  Test = 'test',\n  E2ETest = 'e2e_test',\n  Doc = 'doc',\n  Storybook = 'storybook',\n  RuntimeApi = 'runtimeApi',\n  SSG = 'ssg',\n  Polyfill = 'polyfill',\n  Deploy = 'deploy',\n}\nexport type ForgedAPI = {\n  enableFunc: (\n    func: ActionFunction,\n    params?: Record | undefined,\n  ) => Promise;\n  ...\n};\n\n\n\nfunc#\n\nThe function name is passed according to the functions supported by the\ndifferent engineering solutions.\n\n\nparams#\n\nFor other parameters when the function is enabled, please refer to App New\nCommand and Module New Command.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/new/enableFunc.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/new/enableFunc.mdx"},{"id":271,"title":"Introduction","routePath":"/en/guides/topic-detail/generator/plugin/api/new/introduce","lang":"en","toc":[],"domain":"","content":"#\n\nThe three engineering solutions provided by the Modern.js support executing the\nnew command in the project to create elements and enable functions. In the\ngenerator plugin, the relevant API can be directly called to create some\nelements and enable supported functions by default.\n\nDifferent engineering solutions to support new operations:\n\n * Web App\n\n * Module\n\n * Monorepo","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/new/introduce.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/new/introduce.mdx"},{"id":272,"title":"install","routePath":"/en/guides/topic-detail/generator/plugin/api/npm/install","lang":"en","toc":[],"domain":"","content":"#\n\nInstall dependency in the project root directory.\n\nIn the install function, the dependency will be installed using the\ncorresponding package manager based on the value of packageManager.\n\nIts type is defined as:\n\nexport type AfterForgedAPI = {\n  install: () => Promise;\n  ...\n};\n","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/npm/install.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/api/npm/install.mdx"},{"id":273,"title":"How to develop generator plugins","routePath":"/en/guides/topic-detail/generator/plugin/develop","lang":"en","toc":[{"text":"Create project","id":"create-project","depth":2,"charIndex":3},{"text":"Extension type","id":"extension-type","depth":3,"charIndex":341},{"text":"Customized type","id":"customized-type","depth":3,"charIndex":615},{"text":"Develop plugin logic","id":"develop-plugin-logic","depth":2,"charIndex":1167},{"text":"Customize input","id":"customize-input","depth":3,"charIndex":1506},{"text":"onForged","id":"onforged","depth":3,"charIndex":2063},{"text":"afterForged","id":"afterforged","depth":3,"charIndex":3376}],"domain":"","content":"#\n\n\nCreate project#\n\nModern.js provides a generator plugin to create a generator plugin project, you\ncan directly execute the following command to create:\n\nnpx @modern-js/create plugin --plugin @modern-js/generator-plugin-plugin\n\n\nDifferent plugin types will ask different questions. You can choose the plugin\ntype according to your needs.\n\n\nExtension type#\n\n? Please select the solution you want to create: Npm Module\n? Please select the scene you want to create: Generator Plugin\n? Plugin Package Name: plugin\n? Development Language: TS\n? Package Manager: pnpm\n? Plugin Type: extend\n? Plugin Base Type: Web App\n\n\n\nCustomized type#\n\n? Plugin Package Name: plugin\n? Development Language: TS\n? Package Manager: pnpm\n? Plugin Type: custom\n? Plugin Key: mobile-app\n? Plugin Show Name: Mobile App\n? Plugin Base Type: Web App\n\n\nAfter the execution of the create project command is completed, a project for\ndeveloping the generator plugin will be generated accordingly, and the meta\ninformation will also be generated according to your selection in the\npackage.json.\n\nINFO\n\nFor generator plugin development, please refer to\n@modern-js/generator-plugin-plugin. Source Code\n\n\nDevelop plugin logic#\n\nComplete plugin logic development in src/index.ts.\n\nThe plugin exports a function by default, the function parameter is context, and\nsome methods are provided on context to directly operate on the current project.\n\nA brief introduction to the provided methods, the complete API list viewable\nGenerator Plugin API.\n\n\nCustomize input#\n\n * addInputBefore\n\nAdd input before the default input, such as adding questions before the Select\npackage manager question.\n\nSpecific Modern.js configuration viewable for each problem Project Solution\nConfiguration.\n\ncontext.addInputBefore('input2', {\n  type: 'object',\n  properties: {\n    'input1.2': {\n      type: 'string',\n      title: 'input1.2',\n    },\n  },\n});\n\n\n * setInput\n\nSet attributes of existing problems.\n\ncontext.setInput('test', 'type', 'number');\ncontext.setInput('test', 'enum', [{ value: 'option1', label: '选项一' }]);\n\n\n\nonForged#\n\nAfter the implementation of the hook related operations of the project plan type\nfile is completed, multiple extended inspection will execute its onForged\nfunction in sequence according to the plugin parameter order.\n\nThe onForged parameter is a callback function, and the function parameters are\napi and input.\n\nSome file manipulation related methods are provided on the api, which can\noperate on the current template file in this hook.\n\ninput is the current user input, which can be used to obtain the current input\ninformation and configuration information of the user.\n\nWhen you need a new template file, you can add it directly in the templates\ndirectory. In the onForged function, you can directly operate the templates\ndirectory file. For example, the templateFile parameter in the addFile below is\nthe file in the templates directory. There is no need to display the declaration\ntemplates here, just write the relative path relative to templates.\n\nAPI functions supported in onForged can also be found in Generator Plugin API.\n\ncontext.onForged(async (api: ForgedAPI, input: Record) => {\n  const { language } = input;\n  api.addFile({\n    type: FileType.Text,\n    file: `src/index.${language as string}`,\n    templateFile: `index.${language as string}.handlebars`,\n    force: true,\n  });\n});\n\n\n\nafterForged#\n\nAfter the onForged function is executed, it can mainly install dependencies, Git\noperations, etc.\n\nIf your project plan is based on the three projects provided by the Modern.js,\nthis hook function may not be required. The default project plan will\nautomatically include the installation dependency and commit code logic.\n\nThe generator plugin also supports a customized custom type, which only provides\na small amount of development-level best practice code, such as .gitignore,\neditorConfig and other files. In this case, you need to manually supplement the\ninstallation dependency and Git operation logic in the afterForged function.\n\nThe afterForged parameter is also a callback function, and the function\nparameters are api and input.\n\nThe api will provide some npm, Git and other methods, which can install\ndependency and Git operations in this hook.\n\ninput is the current user input, which can be used to obtain the current input\ninformation and configuration information of the user.\n\nThe API functions supported in afterForged can also be found in Generator Plugin\nAPI.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/develop.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/develop.mdx"},{"id":274,"title":"How to use the generator plugin","routePath":"/en/guides/topic-detail/generator/plugin/use","lang":"en","toc":[{"text":"Classification","id":"classification","depth":2,"charIndex":330},{"text":"Type definition","id":"type-definition","depth":3,"charIndex":620},{"text":"Extended engineering","id":"extended-engineering","depth":4,"charIndex":739},{"text":"Create engineering scenes","id":"create-engineering-scenes","depth":4,"charIndex":854},{"text":"Execution timing","id":"execution-timing","depth":3,"charIndex":1091},{"text":"Extended engineering","id":"extended-engineering-1","depth":4,"charIndex":1197},{"text":"Create engineering scenes","id":"create-engineering-scenes-1","depth":4,"charIndex":1418}],"domain":"","content":"#\n\n@modern-js/create provides the --plugin parameter to declare the generator\nplugin used.\n\nYou can use the generator plugin directly by executing the following command:\n\nnpx @modern-js/create --plugin \n\n\nThe plugin parameter supports multiple declarations, which means that multiple\ngenerator plugins are used at the same time.\n\n\nClassification#\n\nThere are two types of generator plugins:\n\n 1. Extended engineering: directly customize the three major engineering\n    provided by default.\n\n 2. Create engineering scenes: Create corresponding engineering scenes based on\n    the default three major engineering schemes.\n\n\nType definition#\n\nThe classification of the generator plugin is provided by the meta information\nin the package.json.\n\nExtended engineering#\n\n{\n  \"meta\": {\n    \"extend\": \"mwa\" // The three engineering is mwa, module, monorepo\n  }\n}\n\n\nCreate engineering scenes#\n\n{\n  \"meta\": {\n    \"key\": \"new_solution\",\n    \"name\": \"New Solution\",\n    \"type\": \"mwa\" // In addition to the three major engineering solutions, the type here also supports the customize (custom) type\n  }\n}\n\n\n\nExecution timing#\n\nThe execution timing of different types of custom engineering solutions is\ndifferent.\n\nExtended engineering#\n\nThe generator plugin of the extended engineering type will execute in sequence\naccording to the declaration order of the plugin parameter after selecting the\ncorresponding extended project scheme.\n\nCreate engineering scenes#\n\nThe generator plugin that create engineering scenes will have the option to\nselect the scene after selecting the project solution type. The option list\nincludes the current default project scenes and the project scenes defined by\nthe plugin. If you select the corresponding scene, the corresponding generator\nwill be executed plugin.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/use.mdx","_relativePath":"en/guides/topic-detail/generator/plugin/use.mdx"},{"id":275,"title":"Project Generator","routePath":"/en/guides/topic-detail/generator/project","lang":"en","toc":[{"text":"Use","id":"use","depth":2,"charIndex":96},{"text":"Params","id":"params","depth":2,"charIndex":312},{"text":"[projectDir]","id":"[projectdir]","depth":3,"charIndex":322},{"text":"--version","id":"--version","depth":3,"charIndex":638},{"text":"--lang","id":"--lang","depth":3,"charIndex":761},{"text":"-c, --config","id":"-c,---config","depth":3,"charIndex":1046},{"text":"--no-need-install","id":"--no-need-install","depth":3,"charIndex":1544},{"text":"--dist-tag <distTag>","id":"--dist-tag-<disttag>","depth":3,"charIndex":-1},{"text":"--registry <registry/>","id":"--registry-<registry/>","depth":3,"charIndex":-1},{"text":"--debug","id":"--debug","depth":3,"charIndex":2136},{"text":"--mwa","id":"--mwa","depth":3,"charIndex":2207},{"text":"--module","id":"--module","depth":3,"charIndex":2396},{"text":"--monorepo","id":"--monorepo","depth":3,"charIndex":2577},{"text":"--plugin <plugin>","id":"--plugin-<plugin>","depth":3,"charIndex":-1},{"text":"--generator <generator>","id":"--generator-<generator>","depth":3,"charIndex":-1},{"text":"--packages <packages>","id":"--packages-<packages>","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nModern.js provides @modern-js/create as a project generator for Modern.js\nproject creation.\n\n\nUse#\n\nThere is no need to install @modern-js/create globally, just execute the tool\ndirectly with npx:\n\nnpx @modern-js/create [projectDir]\n\n\nINFO\n\nUse npx to get the latest version of @modern-js/create every time.\n\n\nParams#\n\n\n[projectDir]#\n\nProject directory name.\n\nWhen executing the above command, the projectDir folder will be created in the\ncurrent directory by default, and the initialization project will be in this\nfolder. When this parameter is empty, the initialization project will be\ndirectly generated in the current directory.\n\n\n--version#\n\nGet the @modern-js/create tool version.\n\n$ npx @modern-js/create --version\n\n[INFO] @modern-js/create v2.0.0\n\n\n\n--lang#\n\nSpecifies the execution language, supports zh and en.\n\nBy default, @modern-js/create will automatically identify the user's system\nlanguage, choose to use Chinese or English, if the recognition fails or you want\nto specify the language manually, you can use this parameter.\n\n\n-c, --config#\n\nSpecifies the project default configuration.\n\nBy default, @modern-js/create will have interaction problems such as language\nselection and package managers during execution. When you need to specify these\nconfiguration contents in advance, you can pass in this field.\n\nThis field is a JSON character string, for example when running a package\nmanager:\n\nnpx @modern-js/create --config '{\"packageManager\": \"pnpm\"}'\n\n\nSpecific configuration information viewable Project Configuration.\n\n\n--no-need-install#\n\nBy default, @modern-js/create automatically installs dependency after the\nproject is created, use this parameter to ignore the install dependency step.\n\n\n--dist-tag #\n\nSpecifies the generator and Modern.js dependency versions.\n\nA smaller micro-generator will be executed during the execution of\n@modern-js/create, and the version number of the micro-generator that can be\nexecuted with this parameter and the version number of the corresponding\ninstallation Modern.js related dependencies.\n\n\n--registry #\n\nExecute the npm registry to get the generator and npm packages.\n\n\n--debug#\n\nDisplays debug log information during generator execution.\n\n\n--mwa#\n\nOne-click to create an application engineering solution project.\n\nWith this parameter, @modern-js/create will create the application project with\nthe configuration default value.\n\n\n--module#\n\nOne-click to create a module engineering solution project.\n\nWith this parameter, @modern-js/create will create the module project with the\nconfiguration default value.\n\n\n--monorepo#\n\nOne-click to create a Monorepo engineering solution project.\n\nWith this parameter, @modern-js/create will create the Monorepo project with the\nconfiguration default value.\n\n\n--plugin #\n\nSpecifies the generator plugin.\n\nModern.js support the use of the generator plug-in custom Modern.js the default\nproject type or add the project type scenes, the parameter user specifies the\ncustomized generator plugin.\n\nFor custom generator plugins, please refer to Development Generator Plugin.\n\n\n--generator #\n\nSpecifies the microgenerator.\n\nBy default, @modern-js/create will execute the microgenerator Modern.js\nframework build-in. If you need to execute a customized microgenerator, and you\nneed to use the posture of npx @modern-js/create, you can use this parameter\ndirectly.\n\nFor custom microgenerators, please refer to Develop Microgenerator.\n\n\n--packages #\n\nA project is created by specifying a specific package version dependency.\n\nIf you need to specify a specific package version when creating a project, you\ncan use this parameter. This parameter will lock the package version number in\nthe package.json of the project root directory by configuration pnpm.overrides\n(package manager selects pnpm) or resolutions.\n\nThe parameter value is a JSON character string.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/generator/project.mdx","_relativePath":"en/guides/topic-detail/generator/project.mdx"},{"id":276,"title":"Introduction","routePath":"/en/guides/topic-detail/micro-frontend/c01-introduction","lang":"en","toc":[{"text":"Keyword","id":"keyword","depth":2,"charIndex":591},{"text":"Features","id":"features","depth":2,"charIndex":938}],"domain":"","content":"#\n\nMicro frontend is an architecture similar to microservices. It is an\narchitectural style composed of multiple front-end applications delivered\nindependently. It decomposes the front-end application into some smaller and\nsimpler applications that can be independently developed, tested and deployed.,\nwhile still a cohesive single product in the eyes of users.\n\nIt mainly solves two problems:\n\n * As the iterative application of the project becomes larger and more difficult\n   to maintain.\n * Collaborative development of projects across teams or departments leads to\n   inefficiencies.\n\n\nKeyword#\n\nIn the micro frontend, applications are divided into main application, and\nsub-applications.\n\n * Main application: The base project of the micro frontend project, all\n   sub-applications will be loaded by it.\n * Sub-application: An application developed and deployed independently will\n   eventually be loaded by the main application.\n\n\nFeatures#\n\n * Base on Garfish\n * Generator supports\n * Support React component-based reference micro-front-end sub-application\n * Support loading\n * Support main application online and sub-application offline debugging mode\n\nYou can learn how to develop a micro frontend master app in the section\nExperience micro frontend.","frontmatter":{"sidebar_position":1,"title":"Introduction"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c01-introduction.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c01-introduction.mdx"},{"id":277,"title":"development","routePath":"/en/guides/topic-detail/micro-frontend/c02-development","lang":"en","toc":[{"text":"Create an app","id":"create-an-app","depth":2,"charIndex":189},{"text":"File-based Routing Main App","id":"file-based-routing-main-app","depth":3,"charIndex":619},{"text":"Load file-base routing sub-app","id":"load-file-base-routing-sub-app","depth":4,"charIndex":1538},{"text":"Load self-controlled routing sub-app","id":"load-self-controlled-routing-sub-app","depth":4,"charIndex":1712},{"text":"route link","id":"route-link","depth":4,"charIndex":1905},{"text":"Self-Controlled Main App","id":"self-controlled-main-app","depth":3,"charIndex":2314},{"text":"Load sub-app","id":"load-sub-app","depth":4,"charIndex":2963},{"text":"File-based sub-app","id":"file-based-sub-app","depth":3,"charIndex":2979},{"text":"Self-controlled sub-app","id":"self-controlled-sub-app","depth":3,"charIndex":3755},{"text":"Debug","id":"debug","depth":2,"charIndex":4822},{"text":"FAQ","id":"faq","depth":2,"charIndex":5311}],"domain":"","content":"#\n\nThrough this chapter you can learn:\n\n * How to create the main application and sub-application of the micro frontend\n   project.\n * Basic process of micro frontend project development.\n\n\nCreate an app#\n\nCurrently supports two routing modes\n\n * Self-controlled routing\n * Conventional routing\n\nFirst, clarify the routing mode of the main application create a conventional\nrouting main application or create a self-controlled routing main application\n\nIn this experience we will create two sub-applications Table and Dashboard for\nthe main application (Table is reduced routing, Dashboard is self-controlled\nrouting)\n\n\nFile-based Routing Main App#\n\nInitialize the project with a command line:\n\nmkdir masterApp && cd masterApp\nnpx @modern-js/create\n\n\nAfter the project is created, we can enable the micro frontend through pnpm run\nnew:\n\n? Action Enable features\n? Enable features Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and add the main micro frontend\napp and add the list of sub-apps:\n\nThen we create two new directories in the routes folder\n\n * table (for loading conventional routing sub-applications)\n * dashboard (for loading self-controlled routing sub-applications)\n\nIn these two directories, we need to create a $.tsx file as the entry of the\nmain application convention route ($represents fuzzy match, that is, /table and\n/table/test will match this $.tsx as the entry file of the route, which will\nensure that the sub-application route is loaded correctly in the micro frontend\nscenario)\n\nLoad file-base routing sub-app#\n\nsrc/routes/table/$.tsx\n\n\n\nconst Index = () => {\n  const { Table } = useModuleApps();\n\n  return (\n    \n\n      \n  )\n}\n\nexport default Index;\n\n\nLoad self-controlled routing sub-app#\n\nsrc/routes/dashboard/$.tsx\n\n\n\nconst Index = () => {\n  const { Dashboard } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  )\n}\n\nexport default Index;\n\n\nroute link#\n\nAt this time, the main application configuration has been completed, and the\nsub-application can be loaded through the route, and the layout.tsx of the main\napplication can be modified to jump to the route:\n\nsrc/route/layout.tsx\n\n\n\nconst Layout = () => (\n  \n\n    \nLoad file-base routing sub-app\n    \nLoad self-controlled routing sub-app\n    \nunmount sub-app\n    \n  \n);\n\nexport default Layout;\n\n\n\nSelf-Controlled Main App#\n\nInitialize the project with a command line:\n\nmkdir masterApp && cd masterApp\nnpx @modern-js/create\n\n\nAfter the project is created, we can enable the micro frontend function through\npnpm run new:\n\n? Action Enable features\n? Enable features Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and add the main micro frontend\napp and add the list of sub-apps:\n\nSince it is a self-controlled route, we delete the routes/ folder and add the\nApp.tsx file in the src/ directory. If you use a non-MApp component here, you\nneed to use the createBrowserRouter API of '=React Router v6 to create routes.\n\nLoad sub-app#\n\n\nFile-based sub-app#\n\nInitialize the project with a command line:\n\nmkdir table && cd table\nnpx @modern-js/create\n\n\nAfter create sub-app. We execute pnpm run new to enable the micro frontend\nfunction:\n\n? Action Enable features\n? Enable features Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and modify modern.config.ts to\nadd the configuration of the micro frontend sub-app deploy.microFrontend:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  dev: {\n    port: 8081\n  },\n  runtime: {\n    router: true,\n    state: true,\n  },\n  deploy: {\n    microFrontend: true,\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\nadd src/routes/page.tsx:\n\nsrc/routes/page.tsx\n\nconst Index = () => {\n  return (\n    \nsubApp\n  )\n}\n\nexport default Index;\n\n\n\nSelf-controlled sub-app#\n\nInitialize the project with a command line:\n\nmkdir table && cd table\nnpx @modern-js/create\n\n\nAfter create sub-app. We execute pnpm run new to enable the micro frontend\nfunction:\n\n? Action Enable features\n? Enable features Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and modify modern.config.ts to\nadd the configuration of the micro frontend sub-app deploy.microFrontend:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  dev: {\n    port: 8082\n  },\n  runtime: {\n    router: true,\n    state: true,\n  },\n  deploy: {\n    microFrontend: true,\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\nSelf-controlled routing needs to delete the routes/ folder and create a new\nApp.tsx in the src/ directory.\n\nAnd add code in src/App.tsx, note that you need to parse from props and pass\nbasename to BrowserRouter.\n\nsrc/App.tsx\n\n\n\nexport default (props: {basename: string}) => {\n  const { basename } = props;\n\n  return (\n    \n      \n        Self-controlled route root\n\n} /> Self-controlled sub route\n} /> ); };\n\n\nDebug#\n\nStart the application by executing the pnpm run dev command in the directory in\nsequence:\n\n * masterApp http://localhost:8080\n * table subapplication (conventional routing) http://localhost:8081\n * dashboard subapplication (self-controlled routing) http://localhost:8082\n\nAccess the main application address http://localhost:8080\n\nAfter completing the experience of the overall development process of micro\nfrontend, you can learn more about how to develop the main application.\n\n\nFAQ#\n\nGarfish issue: https://www.garfishjs.org/issues/","frontmatter":{"sidebar_position":2,"title":"development"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c02-development.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c02-development.mdx"},{"id":278,"title":"Develop Main App","routePath":"/en/guides/topic-detail/micro-frontend/c03-main-app","lang":"en","toc":[{"text":"Register Sub-app","id":"register-sub-app","depth":2,"charIndex":558},{"text":"Register sub-app info directly","id":"register-sub-app-info-directly","depth":3,"charIndex":832},{"text":"Custom remote app list","id":"custom-remote-app-list","depth":3,"charIndex":1189},{"text":"Renderer sub-app","id":"renderer-sub-app","depth":2,"charIndex":1733},{"text":"Sub-app component","id":"sub-app-component","depth":3,"charIndex":2159},{"text":"Centralized routing","id":"centralized-routing","depth":3,"charIndex":3964},{"text":"Mix Mode","id":"mix-mode","depth":3,"charIndex":4526},{"text":"Loading","id":"loading","depth":3,"charIndex":4865},{"text":"Add Error Status","id":"add-error-status","depth":4,"charIndex":5296},{"text":"Avoid Loading Flash Back","id":"avoid-loading-flash-back","depth":4,"charIndex":5607},{"text":"Add Timeout State","id":"add-timeout-state","depth":4,"charIndex":6538}],"domain":"","content":"#\n\nIn the previous Experience micro frontend, an example was used to demonstrate\nhow to create and configure micro frontend sub-applications. Through this\nchapter, you can further understand how to develop the main application, and its\ncommon configuration.\n\nAfter creating an application project through the @modern-js/create command, you\ncan execute pnpm run new in the project (the modern new command is actually\nexecuted). After selecting the 「micro frontend」 mode, the micro frontend will be\ninstalled. Dependencies, just register the plugin manually.\n\n\nRegister Sub-app#\n\nWhen the information is provided on the masterApp configuration, the application\nwill be considered the main application. At present, there are two configuration\nmethods for sub-app information, and these two methods are applied to different\nscenarios.\n\n\nRegister sub-app info directly#\n\nYou can register the sub-application information directly through the\nconfiguration:\n\nTIP\n\nIt can be configured at runtime via the API defineConfig.\n\nWhen the parameter is a function, it cannot be serialized to the product code,\nso please configure it through defineConfig when it comes to configuration such\nas functions\n\n\nCustom remote app list#\n\nThis function allows you to pull a list of remote child applications and\nregister them with the runtime framework:\n\nApp.tsx\n\ndefineConfig(App, {\n  masterApp: {\n    manifest: {\n      getAppList: async () => {\n        // get from remote api\n        return [{\n          name: 'Table',\n          entry: 'http://localhost:8001',\n          // activeWhen: '/table'\n        }, {\n          name: 'Dashboard',\n          entry: 'http://localhost:8002'\n          // activeWhen: '/dashboard'\n        }];\n      },\n    },\n  },\n});\n\n\n\nRenderer sub-app#\n\nThere are two ways to load sub-app in micro frontend:\n\n 1. **Sub-app component ** Get the components of each sub-app, and then you can\n    render the sub-app of micro frontend just like using ordinary'React\n    'components.\n 2. Centralized routing Through centralized routing configuration, the\n    corresponding sub-app of rendering is automatically activated according to\n    the current page pathname.\n\n\nSub-app component#\n\nDevelopers can use the useModuleApps method to obtain the components of each\nchild application.\n\nThrough the combined use of the router component, developers can autonomously\nrender different sub-applications according to different routes.\n\nSuppose our subapp list is configured as follows:\n\nApp.tsx as follow:\n\nApp.tsx\n\n\n\n\n\nconst AppLayout = () => (\n  <>\n    \nload file-based sub-app\n    \nload self-controlled sub-app\n    \nunmount sub-app\n    \n  </>\n)\n\nexport default () => {\n  const { apps, MApp } = useModuleApps();\n\n  // Instead of using the MApp component, you need to use createBrowserRouter to create the route\n  const router = createBrowserRouter(\n    createRoutesFromElements(\n      }>\n        {apps.map(app => {\n          const { Component } = app;\n          // Fuzzy match, path needs to be written in a pattern similar to abc/*\n          return (\n             {\n                    if (error) {\n                      return \nerror: {error?.message};\n                    } else if (pastDelay) {\n                      return \nloading;\n                    } else {\n                      return null;\n                    }\n                  },\n                }}\n              />\n              }\n            />\n          )\n        })}\n      \n    )\n  );\n\n  return (\n    // Use MApp to automatically load sub-applications according to the configured activeWhen parameters (this project is configured in modern.config.ts)\n    // \n    //   \n    // \n\n    // Manually write the Route component to load the sub-application, which is convenient for scenarios that require pre-operation such as authentication\n    <>\n      \n    </>\n  );\n};\n\n\nHere, the activation route of Table is customized as /table through the Route\ncomponent, and the activation route of Dashboard is /dashboard.\n\n\nCentralized routing#\n\nCentralized Routing is a way to centrally configure active routes for subapps.\nWe enable Centralized Routing by adding an activeWhen field to the subapp list\ninformation.\n\nUse useModuleApp api in Main App, get MApp component and then render it\n\nMain\n\n\n\nfunction App() {\n  const { MApp } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  );\n}\n\n\nAfter starting the application in this way, accessing the '/table' route will\nrender the'Table 'sub-application, and accessing the'/dashboard 'route will\nrender the'Dashboard' sub-application.\n\n\nMix Mode#\n\nOf course, sub-application components and centralized routing can be mixed.\n\n * One molecular application is activated as a sub-application component, and\n   the other part is activated as a centralized routing.\n * A molecular application can be activated either as a centralized routing or\n   as a sub-application component.\n\n\nLoading#\n\nBy configuring the loadable configuration, loading components can be added for\n「centralized routing」 and 「sub-applicati」, and errors, timeouts, flashes, etc.\ncan be considered, so as to provide users with a better user experience. The\ndesign and implementation of this function refer to react-loadable, and the\nbasic functions are similar.\n\nfunction Loading() {\n  return \nLoading...;\n}\n\nfunction App(){\n  return <>\n    \n\nAdd Error Status#\n\nWhen the micro-frontend sub-application fails to load or render, the loading\ncomponent will receive the error parameter (if there is no error, the error is\nnull).\n\nfunction Loading({ error }) {\n  if (error) {\n    return \nError msg {error?.message};\n  } else {\n    return \nLoading...;\n  }\n}\n\n\nAvoid Loading Flash Back#\n\nSometimes the display time of the loading component may be less than 200ms, and\nthe loading component will flash back at this time. Many user studies have\nproved that the loading flash back situation will cause the user to perceive\nthat the loading content takes longer than the actual time.\n\nWhen loading is less than 200ms, if the content is not displayed, the user will\nthink it is faster.\n\nTherefore, the loading component also provides the pastDelay parameter, which\nwill only be true when it exceeds the set delay display. You can set the delay\nduration through the delay parameter.\n\nfunction Loading({ error, pastDelay }) {\n  if (error) {\n    return \nError! {error?.message};\n  } else if (pastDelay) {\n    return \nLoading...;\n  } else {\n    return null;\n  }\n}\n\n\nThe default value of delay is 200ms, you can set the delay display time through\ndelay in loadable.\n\n\nfunction App(){\n  return <>\n    \n\nAdd Timeout State#\n\nSometimes because of the network, the micro-front-end sub-application fails to\nload, resulting in the loading state being displayed all the time, which is very\nbad for users, because they don't know the right response to get a specific\nresponse, whether they need to refresh the page, by Increasing the timeout state\ncan solve this problem well.\n\nThe loading component will get the timeOut parameter when timeout, when the\nmicro frontend application loads timeout, it will get the timeOut property value\nof true.\n\nfunction Loading({ error, timeOut, pastDelay }) {\n  if (error) {\n    return \nError! {error?.message};\n  } else if (timeOut) {\n    return \nLoading timed out, please refresh the page... ;\n  } else if (pastDelay) {\n    return \nLoading...;\n  } else {\n    return null;\n  }\n}\n\n\nThe timeout state is off and can be enabled by setting the timeout parameter in\nloadable:\n\n\nfunction App(){\n  return <>\n    ","frontmatter":{"sidebar_position":3,"title":"Develop Main App"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c03-main-app.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c03-main-app.mdx"},{"id":279,"title":"Communicate","routePath":"/en/guides/topic-detail/micro-frontend/c04-communicate","lang":"en","toc":[{"text":"Props","id":"props","depth":2,"charIndex":3},{"text":"channel","id":"channel","depth":2,"charIndex":616}],"domain":"","content":"#\n\n\nProps#\n\nIn Modern.js, the sub-application will be wrapped into a React component, and\nthe purpose of communicating between the main application and the\nsub-application can be achieved directly by passing'props' to the React\ncomponent.\n\nMain:\n\nfunction App() {\n  const { MApp } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  );\n}\n\n\nMain:\n\nfunction App(props) {\n  console.log(props);\n  return ...\n}\n\n\nThe child application will print {count: 0}. Currently, child application\nrendering responsiveness is not supported. Changing the data of'count 'on the\nmain application in time will not trigger a view update\n\n\nchannel#\n\n[Garfish.channel] (https://www.garfishjs.org/api/channel) Used for communication\nbetween applications. It is an instance of EventEmitter2.\n\n// sub app listen login event\nconst App = () => {\n  const handleLogin = userInfo => {\n    console.log(`${userInfo.name} has login`);\n  };\n\n  useEffect(() => {\n    window?.Garfish.channel.on('login', handleLogin);\n    return () => {\n      window?.Garfish.channel.removeListener('login', handleLogin);\n    };\n  });\n};\n\n// main app emit login event\napi.getLoginInfo.then(res => {\n  if (res.code === 0) {\n    window.Garfish.channel.emit('login', res.data);\n  }\n});\n","frontmatter":{"sidebar_position":4,"title":"Communicate"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c04-communicate.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c04-communicate.mdx"},{"id":280,"title":"Mixed Stack","routePath":"/en/guides/topic-detail/micro-frontend/c05-mixed-stack","lang":"en","toc":[{"text":"Modern.js Sub App","id":"modernjs-sub-app","depth":2,"charIndex":423},{"text":"Modern.js Main App","id":"modernjs-main-app","depth":2,"charIndex":754}],"domain":"","content":"#\n\nThe Modern.js micro frontend scheme is based on the Garfish package and provides\nsome more out-of-the-box usage.\n\nWhen your main application and sub-application are not all Modern.js\napplications, you can refer to this document.\n\n 1. The sub-app is Modern.js, the native Garfish micro frontend used by the main\n    app.\n 2. The main application is Modern.js, and some sub-applications have other\n    technology stacks.\n\n\nModern.js Sub App#\n\nModern.js subapps compile to generate a standard Garfish subapp export. So you\ncan directly access the standard micro frontend main application.\n\nINFO\n\nThe child application is Modern.js, when the main application uses the native\nGarfish micro frontend, the child application debugging mode is not available.\n\n\nModern.js Main App#\n\nThe Main App is Modern.js, and other technology stacks used by sub-applications.\nSub-App can be developed according to Garfish Sub-Application Standard.","frontmatter":{"sidebar_position":5,"title":"Mixed Stack"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c05-mixed-stack.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c05-mixed-stack.mdx"},{"id":281,"title":"Automatically Actions","routePath":"/en/guides/topic-detail/model/auto-actions","lang":"en","toc":[{"text":"Primitive data types","id":"primitive-data-types","depth":2,"charIndex":374},{"text":"Array Types","id":"array-types","depth":2,"charIndex":720},{"text":"Simple Object Types","id":"simple-object-types","depth":2,"charIndex":1256}],"domain":"","content":"#\n\nIn the Quick Start, we implemented the simplest counter model, which still\nrequired 10 lines of code. In fact, Modern.js supports automatically generating\ncommonly used actions based on the declared state type, which reduces the amount\nof boilerplate code. The currently supported types are:\n\n * Primitive data types\n * Array types\n * Simple object types (Plain Object)\n\n\nPrimitive data types#\n\nconst countModel = model('count').define({ state: 1 });\n\n\nAs shown above, we only need one line to create a simple countModel. Here's an\nexample code that uses the model:\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  useEffect(() => {\n    // 增加 1\n    actions.setState(state + 1);\n  }, []);\n}\n\n\n\nArray Types#\n\nWhen the state is an array type, an example code for automatically generating\nactions is shown below:\n\nconst countModel = model('count').define({ state: [] });\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  useEffect(() => {\n    actions.push(1);\n    actions.pop();\n    actions.shift();\n    actions.unshift(1);\n    actions.concat([1]);\n    actions.splice(0, 1, 2);\n    actions.filter(value => value > 1);\n  }, []);\n}\n\n\nWe can use the methods of the JavaScript Array object to modify the state.\n\n\nSimple Object Types#\n\nWhen the state is a simple object type, an example code for automatically\ngenerating actions is shown below:\n\nconst countModel = model('count').define({\n  state: {\n    a: 1,\n    b: [],\n    c: {},\n  },\n});\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  useEffect(() => {\n    actions.setA(2);\n    actions.setB([1]);\n    actions.setC({ a: 1 });\n  }, []);\n}\n\n\nThree different fields a, b, and c each generate setA, setB, and setC actions,\nrespectively.\n\nINFO\n\nWhen the user-defined action and the action automatically generated by Modern.js\nhave the same name, the user-defined action takes precedence. For example, if\nsetA action is already defined in countModel, calling actions.setA() executes\nthe user-defined setA.\n\nAdditional Information\n\nFor more information on related APIs, please refer to here.","frontmatter":{"sidebar_position":6,"title":"Automatically Actions"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/auto-actions.mdx","_relativePath":"en/guides/topic-detail/model/auto-actions.mdx"},{"id":282,"title":"Derived State","routePath":"/en/guides/topic-detail/model/computed-state","lang":"en","toc":[{"text":"Only Depend on the Model\\'s Own State","id":"only-depend-on-the-model\\'s-own-state","depth":2,"charIndex":-1},{"text":"Dependent State from Other Models","id":"dependent-state-from-other-models","depth":2,"charIndex":1914},{"text":"Derived State with Function Type","id":"derived-state-with-function-type","depth":2,"charIndex":2598}],"domain":"","content":"#\n\nIn some scenarios, components need to perform further calculations on the State\nin Model before they can be used in the components. This logic can be directly\nwritten in the component or implemented through derived states in Model. Derived\nstates are defined under the computed field in the Model. Depending on the\ndependencies of the Model and the return type, there are three ways to define\nderived states.\n\n\nOnly Depend on the Model's Own State#\n\nThe derived state only depends on the current Model's State, which is passed as\nthe first parameter to the derived state's definition function.\n\nFor example, the todo application has items and filter in its State, and filter\nis used to filter the todo items displayed on the current page. Therefore, we\ndefine a visibleTodos derived state that can be directly used in the component.\nThe sample code is as follows:\n\n/**\n *  Assuming the structure of the todo item is as follows:\n{\n    id: string;          // id\n    text: string;        // todo\n    completed: boolean;\n}\n**/\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n    filter: 'ALL', // ALL: show all；COMPLETED: show completed；ACTIVE: show active\n  },\n  computed: {\n    visibleTodos: state => {\n      switch (state.filter) {\n        case 'ALL':\n          return state.items;\n        case 'COMPLETED':\n          return todos.filter(t => t.completed);\n        case 'ACTIVE':\n          return todos.filter(t => !t.completed);\n        default:\n          return [];\n      }\n    },\n  },\n});\n\n\nDerived state will eventually be merged with the Model's State, so the derived\nstate can be accessed through the Model's State object. For example, the\nvisibleTodos can be used in the component as follows:\n\nfunction Todo() {\n  const [state, actions] = useModel(todoModel);\n\n  return (\n    \n\n      \n\n        {state.visibleTodos.map(item => (\n          \n{item.text}\n        ))}\n      \n    \n  );\n}\n\n\n\nDependent State from Other Models#\n\nIn addition to depending on the current model's state, derived states may also\ndepend on the state of other models. In this case, the definition format for the\nderived state is:\n\n[stateKey]: [...depModels, (selfState, ...depModels) => computedState]\n\n\nThe following example demonstrates how the derived state combinedValue of\nbarModel depends on the state of fooModel.\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 'foo',\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    value: 'foo',\n  },\n  computed: {\n    combinedValue: [\n      fooModel,\n      (state, fooState) => state.value + fooState.value,\n    ],\n  },\n});\n\n\n\nDerived State with Function Type#\n\nDerived states can also return a function. In this case, the definition format\nfor the derived state is:\n\n[stateKey]: (state) => (...args) => computedState    // Only relies on its own state\n[stateKey]: [...depModels, (selfState, ...depModels) => (...args) => computedState]  // Relies on the state of other models\n\n\nAssuming the filter state is not stored in the state of the todo app, but is\ninstead used directly in the component, visibleTodos can be a function type\nvalue. This function receives the filter parameter when used in the component,\nas shown below:\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n  },\n  computed: {\n    visibleTodos: state => filter => {\n      switch (filter) {\n        case 'ALL':\n          return state.items;\n        case 'COMPLETED':\n          return todos.filter(t => t.completed);\n        case 'ACTIVE':\n          return todos.filter(t => !t.completed);\n        default:\n          return [];\n      }\n    },\n  },\n});\n\nfunction Todo(props) {\n  // use props pass filter\n  const { filter } = props;\n  const [state, actions] = useModel(todoModel);\n\n  // get final todos\n  const todos = state.visibleTodos(filter);\n\n  return (\n    \n\n      \n\n        {todos.map(item => (\n          \n{item.text}\n        ))}\n      \n    \n  );\n}\n\n\nAdditional Reference\n\nUsing Models","frontmatter":{"sidebar_position":4,"title":"Derived State"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/computed-state.mdx","_relativePath":"en/guides/topic-detail/model/computed-state.mdx"},{"id":283,"title":"Define Model","routePath":"/en/guides/topic-detail/model/define-model","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous section, we demonstrated how to create a Model for a simple\ncounter application. In this section, we will provide a detailed introduction on\nhow to create a Model.\n\nWe can create a Model using the model API. For example, model('foo') creates a\nModel named foo. We can define the State and Actions included in the Model by\ncalling the define function returned by model('foo'):\n\n\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 'foo',\n  },\n  actions: {\n    setValue: (state, payload){\n      state.value = payload\n    }\n  }\n});\n\n\nINFO\n * Actions in the Model cannot contain side-effect logic, such as requesting\n   HTTP interfaces, accessing localStorage, etc.\n * setValue directly modifies the input State, which seems to violate the\n   definition of a pure function. However, Reduck uses immer internally to\n   modify immutable objects, ensuring that this approach does not affect the\n   immutability of the object, so setValue is still a pure function. Of course,\n   you can also return a new object directly in the Action, but this approach\n   will be more complex.\n\nThe define function only describes the original structure of the Model,\nincluding the internally defined State, Actions, and so on. The fooModel\nreturned by define is the actual Model object that is created. For example,\nalthough setValue has two parameters, when we call the setValue Action, we only\nneed to pass in the payload parameter, because we are calling the Action method\non fooModel, not the one described in the original structure of the Model. For\nmore information, please refer to Using Models.\n\nIn addition to object-type parameters, define can also receive function-type\nparameters. For example:\n\n\n\nconst fooModel = model('foo').define((context, utils) => {\n  return {\n    state: {\n      value: 'foo',\n    },\n    actions: {\n      setValue: (state, payload){\n        state.value = payload\n      }\n    }\n  }\n});\n\n\nWhen defining a Model using a function, the function automatically receives two\nparameters: context and utils. context is the context object of Reduck, which\ncan obtain the store object, and utils provides a set of utility functions to\nfacilitate the implementation of complex features such as Model communication.\n\nModels support duplication. For example:\n\nconst barModel = fooModel('bar');\n\n\nbarModel is a new Model object created based on fooModel. Analogous to the\nconcepts in object-oriented programming languages, barModel and fooModel are two\ninstance objects created based on the same class. When the state management\nlogic of two modules is the same, for example, two tab modules in the same page\nuse the same data structure and logic, but the difference is that they obtain\ndata from different interfaces, then you can create two different Model objects\nby duplicating the Model.\n\nAdditional Information\n\nFor detailed definitions of the APIs mentioned in this section, please refer to\nhere.","frontmatter":{"sidebar_position":2,"title":"Define Model"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/define-model.mdx","_relativePath":"en/guides/topic-detail/model/define-model.mdx"},{"id":284,"title":"FAQ","routePath":"/en/guides/topic-detail/model/faq","lang":"en","toc":[{"text":"Browser Compatibility","id":"browser-compatibility","depth":2,"charIndex":3},{"text":"Accessing the Main Application Model from a Microfrontend Sub-Application Model","id":"accessing-the-main-application-model-from-a-microfrontend-sub-application-model","depth":2,"charIndex":334}],"domain":"","content":"#\n\n\nBrowser Compatibility#\n\nThe compiled build artifacts of Reduck use ES6 syntax by default. If you need to\nsupport older versions of browsers, please include all packages under the\n@modern-js-reduck namespace in your application's build process.\n\nAdditional Information\n\nReduck uses @babel/preset-env with specific configurations.\n\n\nAccessing the Main Application Model from a Microfrontend Sub-Application Model#\n\nWhen a microfrontend sub-application model accesses the main application model\nand the model has not yet been mounted on the main application, it will be\nautomatically mounted on the sub-application.\n\nExample:\n\n\n\n\nfunction SubModelApp() {\n  const [state, actions] = useModel(parentModel);\n\n  return \n...;\n}\n\n\n\n\nTo avoid accidental downgrades, it is recommended to pre-mount the model that\nthe main application needs to share:\n\n// App is the entry component of the main application, and sharedModel1 and sharedModel2 are the models that need to be shared.\nApp.models = [sharedModel1, sharedModel2];\n","frontmatter":{"sidebar_position":13,"title":"FAQ"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/faq.mdx","_relativePath":"en/guides/topic-detail/model/faq.mdx"},{"id":285,"title":"Management Effect","routePath":"/en/guides/topic-detail/model/manage-effects","lang":"en","toc":[{"text":"Modifying State via Side Effects","id":"modifying-state-via-side-effects","depth":2,"charIndex":383},{"text":"Side effects do not affect state","id":"side-effects-do-not-affect-state","depth":2,"charIndex":5908}],"domain":"","content":"#\n\nThe actions in the model must be pure functions and cannot have any side effects\nduring execution. However, in real-world scenarios, we often encounter many side\neffects, such as: requesting data from an HTTP API to obtain state data, or\nmodifying localStorage or sending events while updating the state. In Reduck,\nside effects are managed through the model's effects function.\n\n\nModifying State via Side Effects#\n\nThe most common scenario in which side effects modify the state is requesting\ndata from an HTTP API to update state data.\n\nLet's take a simple todoModel as an example. It has a side effect function load\nthat requests the TODO list from a remote server. After the request succeeds, it\nupdates the state.items field.\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  actions: {\n    load: {\n      pending(state) {\n        state.loading = true;\n      },\n      fulfilled(state, items) {\n        state.items = items;\n        state.loading = false;\n      },\n      rejected(state, error) {\n        state.error = error;\n        state.loading = false;\n      },\n    },\n  },\n  effects: {\n    // Promise effects\n    async load() {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(['Learn Modern.js']), 2000);\n      });\n    },\n  },\n});\n\n\nThe side effect function is uniformly defined under the effects field. Here we\nhave written a load function that returns a Promise. After the Promise is\nsuccessfully executed, it returns the TODO list [\"Lerna Modern.js\"].\n\nSide effect functions need to work with actions to modify state. Therefore, we\ndefine a load object in actions (the name needs to be consistent with the name\nof the side effect function under effects), which includes three actions\n(pending, fulfilled, rejected) that handle the three states (pending, fulfilled,\nrejected) of the Promise returned by the side effect function load:\n\n * pending: Receives the current state state as a parameter and sets the loading\n   flag to true in the new state.\n * fulfilled: Receives the current state state and the Promise fulfilled value\n   items as parameters, and sets items to the parameter items and loading to\n   false in the new state.\n * rejected: Receives the current state state and the Promise rejected error\n   error as parameters, and sets error to the parameter error and loading to\n   false in the new state.\n\nHow do we call the effects function in the component? The effects function will\nbe merged into the actions object, so you can call the effects function through\nthe actions object, as shown below:\n\nfunction Todo() {\n  const [state, actions] = useModel(todoModel);\n\n  useEffect(() => {\n    // invoke effects function\n    actions.load();\n  }, []);\n\n  if (state.loading) {\n    return \nloading....;\n  }\n\n  return (\n    \n\n      \n\n        {state.items.map((item, index) => (\n          \n{item}\n        ))}\n      \n    \n  );\n}\n\n\nIn the example above, the three actions pending, fulfilled, and rejected are\ngenerally required for HTTP requests used to obtain data. Reduck provides a\nutility function handleEffect to simplify the creation of actions in this\nscenario.\n\nFor this type of side effect scenario, handleEffect stipulates that the state\nstructure of the model contains three fields: result, error, and pending, with\ninitial values of:\n\n{\n  result: null,\n  error: null,\n  pending: false,\n}\n\n\nCalling handleEffect will return the following data structure:\n\n{\n  pending() { // ... },\n  fulfilled() { // ... },\n  rejected() { // ... }\n}\n\n\nThis data structure is the same as the data structure of the load object under\nactions. The object returned by handleEffect actually corresponds to the three\nactions required by the Effects function.\n\nWe can use handleEffect to rewrite todoModel:\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  actions: {\n    load: handleEffect({ result: 'items' }),\n  },\n  effects: {\n    // Promise effects\n    async load() {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(['Learn Modern.js']), 2000);\n      });\n    },\n  },\n});\n\n\nThe handleEffect function sets result to items in the received parameter object.\nBecause todoModel uses items as the key to save the TODO list data instead of\nusing the default result as the key of handleEffect, configuration is required\nhere.\n\nIt is obvious that the todoModel implemented through handleEffect is much more\nconcise than the previous implementation.\n\nIf you do not want all three states (pending, fulfilled, rejected) to be\nautomatically handled by handleEffect, for example, if the fulfilled state\nrequires more complex data processing and needs to be manually handled, but you\nstill want to automate the handling of the pending and rejected states, you can\nuse the following method:\n\n  actions: {\n    load: {\n      ...handleEffect(),\n      fulfilled(state, payload) {\n        // manual handle\n      },\n    },\n  },\n\n\nhandleEffect API.\n\nIn the Effects function, you can also manually call Actions. For example:\n\nconst todoModel = model('todo').define((context, utils) => ({\n  state: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  actions: {\n    pending(state) {\n      state.loading = true;\n    },\n    fulfilled(state, items) {\n      state.items = items;\n      state.loading = false;\n    },\n  },\n  effects: {\n    async load() {\n      // use utils.use get cuttent Model actions\n      const [, actions] = utils.use(todoModel);\n      // invoke action\n      actions.pending();\n\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const items = ['Learn Modern.js'];\n          // invoke action\n          actions.fulfilled(items);\n          resolve(items);\n        }, 2000);\n      });\n    },\n  },\n}));\n\n\nYou can use the use function to load other Models (including the Model itself)\nto achieve Model communication.\n\n\nSide effects do not affect state#\n\nIn some cases, we only need to read State and execute relevant side effect\nlogic, and the side effect will not modify State.\n\nFor example, store some State in localStorage:\n\nconst fooModel = model('foo').define((context, utils) => ({\n  state: {\n    value: 'foo',\n  },\n  effects: {\n    setLocalStorage(key) {\n      const [state] = utils.use(fooModel);\n      localStorage.set(key, state.value);\n      return 'success';\n    },\n  },\n}));\n\n\nor send message to server:\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 'foo',\n  },\n  effects: {\n    async sendData(data) {\n      const res = await fetch('url', {\n        method: 'POST',\n        body: data,\n      });\n      return res.json();\n    },\n  },\n});\n\n\nSometimes, we want to execute subsequent logic directly based on the execution\nresult of the side effect function. In this case, we need to use the return\nvalue of the Effects function.\n\nFor example, when the send button is clicked and the data is successfully sent,\nclose the current popup immediately; if it fails, display an error message. We\ncan achieve this through the following code:\n\n// The code is for illustration only and cannot be executed.\n// Response function of the \"send\" button within the component.\nconst handleClick = async () => {\n  // sendData returns a string that represents the state.\n  const result = await actions.sendData('some data');\n  if (result === 'success') {\n    // Close the popup window.\n    closeModal();\n  } else {\n    // show error\n    showError(result);\n  }\n};\n\n\nINFO\n\nExample","frontmatter":{"sidebar_position":5,"title":"Management Effect"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/manage-effects.mdx","_relativePath":"en/guides/topic-detail/model/manage-effects.mdx"},{"id":286,"title":"Model Communication","routePath":"/en/guides/topic-detail/model/model-communicate","lang":"en","toc":[{"text":"Communication between Models","id":"communication-between-models","depth":2,"charIndex":150},{"text":"Communication within a Model","id":"communication-within-a-model","depth":2,"charIndex":4224}],"domain":"","content":"#\n\nModel communication refers to communication between different Models, as well as\ncommunication between Effects and Actions within the same Model.\n\n\nCommunication between Models#\n\nModels are not isolated from each other and can communicate with each other.\nThere are mainly two scenarios:\n\n 1. Accessing the State and Actions of other Models in the Model.\n 2. Listening to changes in other Models in the Model.\n\nHere, we will transform the simple counter application in the Quick Start\nsection into a counter application that allows you to set the step frequency. By\nsetting the step frequency, you can affect the magnitude of each counter\nincrease.\n\nWe abstract two Models, stepModel (step frequency) and counterModel (counter):\n\n\n\nconst stepModel = model('step').define({\n  state: 1,\n});\n\nconst counterModel = model('count').define((context, { use, onMount }) => {\n  const [, , subscribeStep] = use(stepModel);\n\n  onMount(() => {\n    return subscribeStep(() => {\n      console.log(\n        `Subscribe in counterModel: stepModel change to ${use(stepModel)[0]}`,\n      );\n    });\n  });\n\n  return {\n    state: {\n      value: 1,\n    },\n    actions: {\n      add(state) {\n        const step = use(stepModel)[0];\n        state.value += step;\n      },\n    },\n  };\n});\n\nexport { stepModel, counterModel };\n\n\nstepModel declares only one state, with an initial value of 1.\n\ncounterModel loads stepModel with the use function, and retrieves the returned\nsubscribeStep function to listen for changes to the stepModel state. onMount is\na hook function that is executed after the Model is mounted. counterModel begins\nto subscribe to the state changes of stepModel after it has been mounted, and\nprints out the latest value of stepModel.\n\ncounterModel accesses stepModel using the use function, and in the add function,\nthe current value of stepModel (step frequency) can be obtained to perform\nincrements using this value.\n\nNote\n\nWhen you need to access the state of another Model, you must call use during the\nactual execution phase of the current Actions or Effects function (in this\nexample, the add function) to ensure that the obtained State is the latest\nvalue. Therefore, although we also call use(stepModel) in the callback function\nof define, we do not destructure the state value of stepModel because the\ncallback function of define is executed during the mounting phase of the Model,\nand at this time, the state of stepModel obtained may be different from the\nvalue obtained when add is executed.\n\nModify App.tsx:\n\n\n\n\nfunction Counter() {\n  const [state, actions] = useModel(counterModel);\n  const [step, stepActions] = useModel(stepModel);\n\n  return (\n    \n\n      \nstep: {step}\n       stepActions.setState(step + 1)}>add step\n      \ncounter: {state.value}\n       actions.add()}>add counter\n    \n  );\n}\n\nexport default function App() {\n  return ;\n}\n\n\nAdditional Information\n\nModern.js has enabled auto-generate actions by default, so even though there are\nno Actions defined manually in the stepModel, the auto-generated setState can\nstill be used.\n\n * Click add step to add steps.\n * Click add counter to trigger the counter to increase.\n\nThe final effect is as follows:\n\n\n\nAdditional Information\n * Full example code for this section can be found here.\n * For more information about the relevant API, please refer to: model.\n\nIn the previous example of counterModel, we called use within the Actions\nfunction to get other Model objects. If we only need to call Actions of other\nModels, we can also use use to get the Actions of Models in the define callback\nfunction because Actions are functions and there is no issue of value\nexpiration. For example:\n\nconst barModel = model('bar').define({\n  // ..\n});\n\nconst fooModel = model('foo').define((context, utils) => {\n  // get barModel actions\n  const [, actions] = utils.use(barModel);\n  return {\n    // ...\n    effects: {\n      async loadA() {\n        // ...\n        // invoke barModel action\n        barModel.actionA();\n      },\n      async loadB() {\n        // ...\n        // invoke barModel action\n        barModel.actionB();\n      },\n    },\n  };\n});\n\n\nHere, we no longer need to repeatedly get the barModel object in loadA and\nloadB, which simplifies the code logic.\n\n\nCommunication within a Model#\n\nCommunication within a Model can also be divided into two main scenarios:\n\n 1. Effects functions call the Actions functions of the same Model or other\n    Effects functions.\n 2. Actions functions call other Actions functions of the same Model.\n\nIn the Managing Side Effects section, we demonstrated how Effects functions call\nActions functions.\n\nHere we provide another example:\n\nconst fooModel = model('foo').define((context, { use, onMount }) => ({\n  state: {\n    a: '',\n    b: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n    setB(state, payload) {\n      state.a = payload;\n    },\n  },\n  effects: {\n    async loadA() {\n      // get current Model actions\n      const [, actions] = use(fooModel);\n      const res = await mockFetchA();\n      actions.setA(res);\n    },\n    async loadB() {\n      // get current Model actions\n      const [, actions] = use(fooModel);\n      const res = await mockFetchB();\n      actions.setB(res);\n    },\n  },\n}));\n\n\nIn this example, the two Effects functions of fooModel need to call their own\nActions functions. Here, we have called use once in each Effects function. Why\ncan't we use use to get the Actions of the Model itself in the define callback\nfunction, as in the example of Model communication? This is because when calling\nuse to get a Model, it first checks whether the Model has been mounted. If it\nhas not been mounted, the mounting logic will be executed first.\n\nThe define callback function is executed during the mounting phase, so calling\nuse to get the Model itself during the mounting phase will result in an infinite\nloop (which will throw an error in the actual execution process). Therefore, you\nmust not call use in the define callback function to get the Model itself.\n\nHowever, we can use the onMount hook function to get the Model itself through\nuse after the Model has been mounted:\n\nconst fooModel = model('foo').define((context, { use, onMount }) => {\n  let actions;\n\n  onMount(() => {\n    // after fooModel mounted, get actions\n    [, actions] = use(fooModel);\n  });\n\n  return {\n    state: {\n      a: '',\n      b: '',\n    },\n    actions: {\n      setA(state, payload) {\n        state.a = payload;\n      },\n      setB(state, payload) {\n        state.a = payload;\n      },\n    },\n    effects: {\n      async loadA() {\n        const res = await mockFetchA();\n        actions.setA(res);\n      },\n      async loadB() {\n        const res = await mockFetchB();\n        actions.setB(res);\n      },\n    },\n  };\n});\n\n\nIn this way, we can also simplify the code.","frontmatter":{"sidebar_position":7,"title":"Model Communication"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/model-communicate.mdx","_relativePath":"en/guides/topic-detail/model/model-communicate.mdx"},{"id":287,"title":"Performance Optimization","routePath":"/en/guides/topic-detail/model/performance","lang":"en","toc":[{"text":"Splitting Models","id":"splitting-models","depth":2,"charIndex":317},{"text":"State Selection","id":"state-selection","depth":2,"charIndex":1341},{"text":"Derivative State Caching","id":"derivative-state-caching","depth":2,"charIndex":2156}],"domain":"","content":"#\n\nReduck has already done a lot of performance optimization work internally, so\nperformance issues generally do not need to be considered. However, when\nperformance is more sensitive, or when encountering performance issues, you can\nconsider more targeted performance optimization from the following three\naspects.\n\n\nSplitting Models#\n\nWhen useModel returns the complete State object of the Model, any change in any\npart of the State will cause the component that calls useModel to be\nre-rendered.\n\nFor example:\n\nconst fooModel = model('foo').define({\n  state: {\n    a: '',\n    b: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n    setB(state, payload) {\n      state.b = payload;\n    },\n  },\n});\n\nfunction ComponentA() {\n  const [state] = useModel(fooModel);\n\n  return \n{state.a};\n}\n\n\nAlthough ComponentA only needs to use the a state, it will still be re-rendered\nwhen the b state changes. In this case, we can consider splitting fooModel into\nseparate Models responsible for managing a and b respectively:\n\nconst fooModel = model('foo').define({\n  state: {\n    a: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    b: '',\n  },\n  actions: {\n    setB(state, payload) {\n      state.b = payload;\n    },\n  },\n});\n\n\n\nState Selection#\n\nuseModel supports passing in a selector function to filter the returned State\nand Actions for the component. We can use a selector function to ensure that the\nState returned to the component is what the component needs directly, thus\nensuring that the component is not re-rendered due to changes in other unrelated\nstates.\n\nFor the same example above, we can use a selector function for performance\noptimization, the code is as follows:\n\nconst fooModel = model('foo').define({\n  state: {\n    a: '',\n    b: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n    setB(state, payload) {\n      state.b = payload;\n    },\n  },\n});\n\nfunction ComponentA() {\n  // 通过传入 selector 函数，只返回 a 状态给组件\n  const [stateA] = useModel(fooModel, state => state.a);\n\n  return \n{stateA};\n}\n\n\n\nDerivative State Caching#\n\nWhen a Model has computed property, the computed function will be executed every\ntime useModel is called.\n\nConsider the following code:\n\nconst barModel = model('bar').define({\n  state: {\n    value: 'bar',\n  },\n  computed: {\n    combineA: [\n      fooModel, // fooModel define as above\n      (state, fooState) => {\n        return state + fooState.a;\n      },\n    ],\n  },\n  actions: {\n    setValue(state, payload) {\n      state.value = payload;\n    },\n  },\n});\n\nfunction ComponentB() {\n  const [state, actions] = useModel(fooModel);\n  const [{ combineA }] = useModel(barModel);\n  // ...\n}\n\n\nEven if the b state of fooModel changes, the combineA function (more precisely,\nthe last function type element of combineA) will still be called and executed\nwhen the component is re-rendered, although the derivative state combineA of\nbarModel depends on barModel itself and the state a of fooModel.\n\nIn general, the logic in the computed function is usually very lightweight, but\nwhen the logic in the computed function is relatively complex, we can consider\ncaching the calculation logic. For example, we can use reselect to cache\ncombineA of barModel:\n\n\n\n// create cache function\nconst selectCombineA = createSelector(\n  (state) => state.bar.value,\n  (state) => state.foo.a,\n  (barState, fooState) => {\n    return barState + fooState;\n  }\n);\n\nconst barModel = model(\"bar\").define({\n  state: {\n    value: \"bar\",\n  },\n  computed: {\n    combineA: [\n      fooModel,\n      (state, fooState) => {\n        return selectCombineA({\n          foo: fooState,\n          bar: state,\n        });\n      },\n    ],\n  },\n  actions: {\n    setValue(state, payload) {\n      state.value = payload;\n    },\n  },\n});\n\n\nWe created a caching function createSelector, which only recalculates the value\nof combineA when the state of barModel changes or the state a of fooModel\nchanges.\n\nAdditional Information\n\nYou can find the complete example code of this section here.","frontmatter":{"sidebar_position":8,"title":"Performance Optimization"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/performance.mdx","_relativePath":"en/guides/topic-detail/model/performance.mdx"},{"id":288,"title":"Quick Start","routePath":"/en/guides/topic-detail/model/quick-start","lang":"en","toc":[{"text":"Core Concepts","id":"core-concepts","depth":2,"charIndex":1338},{"text":"Basic Usage","id":"basic-usage","depth":2,"charIndex":1895}],"domain":"","content":"#\n\nReduck is a state management library developed by the Modern.js team that\nfollows the MVC pattern. Its underlying state storage is based on Redux\nimplementation, while providing a higher level of abstraction and full\ncompatibility with the Redux ecosystem.\n\nThe goal of Reduck is to organize the development structure of React\napplications in the MVC pattern, maintain business logic in the Model layer,\ndecoupling business logic from UI, making it easier for developers to focus on\nbusiness logic, and reducing duplicated work (boilerplate code) through higher\nlevel of abstraction.\n\nIn the MVC pattern, Reduck plays the role of M(Model), React UI Component\ncorresponds to V(View), and gets the Model from Reduck and modifies the Model's\nReact Container Component, which corresponds to C(View Controller/Container).\n\nThe state management solution of Modern.js is implemented through built-in\nReduck. Using Reduck in Modern.js not only eliminates the manual integration\nprocess, but also allows all Reduck APIs to be imported and used directly from\nthe Modern.js Runtime package, providing a better consistency experience.\n\nINFO\n 1. To use Reduck APIs in Modern.js, you need to set runtime.state to enable the\n    state management plugin.\n 2. Reduck can also be used separately as a state management library outside of\n    Modern.js.\n\n\nCore Concepts#\n\nThere are only four core concepts in Reduck: Model, State, Actions, and Effects.\n\nModel: Encapsulates the logic and required state of an independent module,\nconsisting of State, Actions, and Effects.\n\nState: The state stored in the Model.\n\nActions: Pure functions used to modify State, functions must be Synchronous.\n\nEffects: Functions with side effects used to modify State, functions can be\nAsynchronous. Effects can call their own Actions and Effects or those of other\nModels.\n\nThe Reduck data flow is shown in the following figure:\n\n\n\n\nBasic Usage#\n\nNext, let's take a simple Counter application as an example to demonstrate the\nbasic usage of Reduck.\n\nFirst, we define a Model named count:\n\n\n\nconst countModel = model('count').define({\n  state: {\n    value: 1,\n  },\n});\n\nexport default countModel;\n\n\nWe use the API model to create countModel, which currently only contains the\nstate that stores the counter value, that is, value in the code.\n\nWe define an action to increase the counter by 1:\n\n\n\nconst countModel = model('count').define({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(state) {\n      state.value += 1;\n    },\n  },\n});\n\nexport default countModel;\n\n\nIn the add action, we can directly modify the value of the state and perform the\nincrement operation without treating the state as an immutable object. This is\nbecause Reduck integrates immer, which can directly modify the original state\nobject.\n\nNext, we will demonstrate how to use the Model in a component.\n\nCreate a new component called Counter, and use the countModel via the useModel\nAPI inside the component:\n\n\n\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  return (\n    \n\n      \ncounter: {state.value}\n       actions.add()}>add\n    \n  );\n}\n\n\nuseModel gets the state and actions of countModel. The component displays the\ncurrent value of the counter, and clicking the add button increments the counter\nby 1.\n\nINFO\n\nDue to the simplicity of the example used here, the layering of the MVC pattern\nis not strictly followed. The Counter component acts as both the V and C layers.\n\nThe final demonstration effect is as follows:\n\n\n\nThat completes a simple counter application. You can view the complete example\ncode for this section here.","frontmatter":{"sidebar_position":1,"title":"Quick Start"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/quick-start.mdx","_relativePath":"en/guides/topic-detail/model/quick-start.mdx"},{"id":289,"title":"Ecosystem Integration","routePath":"/en/guides/topic-detail/model/redux-integration","lang":"en","toc":[],"domain":"","content":"#\n\nReduck is based on Redux, so you can use libraries from the Redux ecosystem to\nenhance its functionality. APIs like Provider, createApp, and createStore allow\nyou to configure the use of middlewares and store enhancers; and using\ncreateStore, you can take complete control over the process of creating the\nstore.\n\nFor example, if we want to use the middleware redux-logger, the example code is\nas follows:\n\nReactDOM.render(\n  \n    // Set middleware through the config parameter of Provider\n    \n  ,\n  document.getElementById('root'),\n);\n\n\nCAUTION\n\nReduck is built on top of the lower-level Redux API, and abstracts away some of\nthe underlying concepts of Redux, such as Reducers. Reduck allows models to be\ndynamically mounted, whereas Redux mounts all the necessary state at Store\ncreation time. Due to these implementation differences, some libraries from the\nRedux ecosystem cannot be used directly in Reduck.","frontmatter":{"sidebar_position":11,"title":"Ecosystem Integration"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/redux-integration.mdx","_relativePath":"en/guides/topic-detail/model/redux-integration.mdx"},{"id":290,"title":"Test Model","routePath":"/en/guides/topic-detail/model/test-model","lang":"en","toc":[],"domain":"","content":"#\n\nTesting is crucial for the stability of code. Here's an example using the\ncountModel from Quick Start to demonstrate how to perform unit testing on a\nModel in Modern.js.\n\nTo use the testing feature, you need to first enable it. In the project root\ndirectory, execute pnpm run new and make the following selection:\n\n? Please select the operation you want to perform: Enable optional features\n? Enable optional features Enable \"Unit Testing / Integration Testing\" feature\n\n\nThis will enable testing feature support.\n\nCreate a new file called count.test.ts with the following code:\n\n\n\n\ndescribe('test model', () => {\n  it('count value should plus one after add', () => {\n    const store = createStore();\n    const [state, { add }] = store.use(countModel);\n\n    expect(state).toEqual({ value: 1 });\n\n    add();\n\n    expect(store.use(countModel)[0]).toEqual({ value: 2 });\n  });\n});\n\n\nINFO\n\nThe createStore used here is imported from @modern-js/runtime/testing, which\ninternally uses the configuration of runtime.state to create a store.\n\nIn the test case, we create a new store to mount countModel, use store.use to\nget the State and Actions of countModel. Then, we call the add Action to update\nthe state and assert the updated state value.\n\nExecute the pnpm run test command to trigger the execution of the test case.","frontmatter":{"sidebar_position":9,"title":"Test Model"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/test-model.mdx","_relativePath":"en/guides/topic-detail/model/test-model.mdx"},{"id":291,"title":"TS Best Practices","routePath":"/en/guides/topic-detail/model/typescript-best-practice","lang":"en","toc":[{"text":"Defining the State Type of the Model","id":"defining-the-state-type-of-the-model","depth":2,"charIndex":217},{"text":"Dependent types of Derived State","id":"dependent-types-of-derived-state","depth":2,"charIndex":1383},{"text":"Hooks for Getting Model Type Information","id":"hooks-for-getting-model-type-information","depth":2,"charIndex":1788}],"domain":"","content":"#\n\nReduck provides excellent support for TypeScript, and in most cases, you can get\nAPI type prompts directly without any extra work. In this section, we will\nprovide additional information on other usage scenarios.\n\n\nDefining the State Type of the Model#\n\nDeclaring type information for the State of a Model is a best practice when\nusing Reduck in TypeScript.\n\ninterface State {\n  data: string;\n}\n\nexport const foo = model('foo').define({\n  state: {\n    data: '',\n  },\n  computed: {\n    withSuffix: state => state.data + 'suffix',\n  },\n  actions: {\n    setData: (state, payload: string) => {\n      state.data = payload;\n    },\n  },\n});\n\n\nWhen you declare type information for the State of a Model, the computed and\nactions of the Model can get the correct type information. In fact, even if we\ndon't define State type information in the example code above, the type\ninformation of State can be automatically inferred based on the initial value\ninformation of state. However, we still recommend that you declare the type\ninformation of State when defining a Model because the type information of State\ninferred based on the initial value information of state may be incomplete\n(missing fields or field type information), and the type information of State\ncannot be automatically inferred based on the initial value information of state\nwhen using Function Type to define the Model.\n\n\nDependent types of Derived State#\n\nWhen the derived state of a Model depends on other Models, you need to manually\nspecify the State of the other Models.\n\ninterface State {\n  data: string;\n}\n\nexport const bar = model('bar').define({\n  state: {\n    data: '',\n  },\n  computed: {\n    // specify the type for fooState\n    withFoo: [foo, (state, fooState: FooState) => state.data + fooState.data],\n  },\n});\n\n\n\nHooks for Getting Model Type Information#\n\nReduck provides a set of utility types for getting Model type information:\n\n * GetModelState: Get the type information of the State (including derived\n   state) of the Model.\n * GetModelActions: Get the type information of the Actions (including Effects\n   functions) of the Model.\n\nexport const foo = model('foo').define({\n  // skip some codes\n});\n\n// get the State type of foo\nlet fooActions: GetModelActions;\n// get the Actions type of foo\nlet fooState: GetModelState;\n","frontmatter":{"sidebar_position":10,"title":"TS Best Practices"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/typescript-best-practice.mdx","_relativePath":"en/guides/topic-detail/model/typescript-best-practice.mdx"},{"id":292,"title":"Use Models","routePath":"/en/guides/topic-detail/model/use-model","lang":"en","toc":[{"text":"Using Models in Components","id":"using-models-in-components","depth":2,"charIndex":3},{"text":"Using as Global State","id":"using-as-global-state","depth":3,"charIndex":33},{"text":"Using as Static State","id":"using-as-static-state","depth":3,"charIndex":2191},{"text":"Using as Local State","id":"using-as-local-state","depth":3,"charIndex":4222},{"text":"Using outside of components","id":"using-outside-of-components","depth":2,"charIndex":5197}],"domain":"","content":"#\n\n\nUsing Models in Components#\n\n\nUsing as Global State#\n\nuseModel can be used to obtain the State, Actions, and other information of the\nModel. When the State of the Model is modified by Actions, any other components\nthat use the Model will automatically re-render.\n\nIn the counter example in Quick Start, we have demonstrated the use of useModel\nand will not repeat it here.\n\nuseModel supports passing multiple Models, and the State and Actions of multiple\nModels will be merged and returned as the result. For example:\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(state) {\n      state += 1;\n    },\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    title: 'bar',\n  },\n  actions: {\n    set(state, payload) {\n      state.title = payload;\n    },\n  },\n});\n\nconst [state, actions] = useModel([fooModel, barModel]);\n// 或\nconst [state, actions] = useModel(fooModel, barModel);\n\n\nstate and actions value are:\n\nstate = {\n  value: 1,\n  title: 'bar',\n};\n\nactions = {\n  add(state) {\n    state += 1;\n  },\n  set(state, payload) {\n    state.title = payload;\n  },\n};\n\n\nuseModel also supports selector operations on State and Actions to filter or\nrename State and Actions. For example:\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(state) {\n      state += 1;\n    },\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    value: 'bar',\n  },\n  actions: {\n    set(state, payload) {\n      state.value = payload;\n    },\n  },\n});\n\nconst [state, actions] = useModel(\n  [fooModel, barModel],\n  (fooState, barState) => ({\n    fooValue: fooState.value,\n    barValue: barState.value,\n  }), // stateSelector\n  (fooActions, barActions) => ({ add: fooActions.add }), // actionsSelector\n);\n\n\nWe use stateSelector to rename the states with the same name in fooModel and\nbarModel. We use actionsSelector to filter out the Actions of barModel.\n\nIf only actionsSelector needs to be set, you can set stateSelector to undefined\nas a placeholder. For example:\n\nconst [state, actions] = useModel(\n  [fooModel, barModel],\n  undefined,\n  (fooActions, barActions) => ({ add: fooActions.add }), // actionsSelector\n);\n\n\n\nUsing as Static State#\n\nuseStaticModel can be used to obtain the Model and use the state of the Model as\na static state. This ensures that the State accessed by the component is always\nthe latest value, but the change of the Model's State does not cause the current\ncomponent to re-render.\n\nINFO\n\nThe usage of useStaticModel is exactly the same as useModel.\n\nConsider the following scenario: there is an Input component responsible for\nuser input, and another Search component responsible for executing a search\noperation after the user input information is entered and the search button is\nclicked. We do not want the state changes during the user input process to cause\nSearch to re-render. In this case, useStaticModel can be used:\n\n\n\nfunction Search() {\n  // should not be destructured\n  const [state] = useStaticModel(searchModel);\n\n  return (\n    \n\n       {\n          const result = await mockSearch(state.input);\n          console.log(result);\n        }}\n      >\n        Search\n      \n    \n  );\n}\n\n\nCaution\n\nDo not destructure the state returned by useStaticModel. For example, changing\nit to the following code: const [{input}] = useStaticModel(searchModel); will\nalways get the initial value of Input.\n\nuseStaticModel is also suitable for use with animation libraries such as\nreact-three-fiber, because binding fast-changing states in animation component\nUI can easily cause performance issues. In this case, you can choose to use\nuseStaticModel, which only subscribes to the State but does not cause the view\ncomponent to re-render. Here is a simplified example:\n\nfunction ThreeComponent() {\n  const [state, actions] = useStaticModel(modelA);\n\n  useFrame(() => {\n    state.value;\n    actions.setValue(1);\n    state.value;\n  });\n}\n\n\nUsing React's refs can also achieve similar effects. In fact, useStaticModel\nalso uses refs internally. However, using useStaticModel directly helps decouple\nthe state management logic from the component and converge it into the Model\nlayer.\n\nThe complete sample code can be found here.\n\n\nUsing as Local State#\n\nuseLocalModel can be used to obtain the Model and use the state of the Model as\nlocal state. At this time, the change of the Model State only causes the current\ncomponent to re-render, but does not cause other components that use the Model\nto re-render. The effect is similar to managing state through useState in React,\nbut it can decouple the state management logic from the component and converge\nit into the Model layer.\n\nINFO\n\nThe usage of useLocalModel is exactly the same as useModel.\n\nFor example, we modify the code of the counter application and add a counter\ncomponent LocalCounter with local state:\n\n\n\nfunction LocalCounter() {\n  const [state, actions] = useLocalModel(countModel);\n\n  return (\n    \n\n      \nlocal counter: {state.value}\n       actions.add()}>add\n    \n  );\n}\n\n\nClick the add button of Counter and LocalCounter respectively, and the states of\nthe two do not affect each other:\n\n\n\nThe complete sample code can be found here.\n\n\nUsing outside of components#\n\nIn actual business scenarios, sometimes we need to use Model outside of React\ncomponents, such as accessing State and executing Actions in utility functions.\nAt this time, we need to use the Store. The Store is a low-level concept that\nusers generally cannot touch. It is responsible for storing and managing the\nentire application's state. Reduck's Store is based on Redux's Store\nimplementation and adds Reduck-specific APIs, such as use.\n\nFirst, call useStore in the component to obtain the store object used by the\ncurrent application and mount it to a variable outside the component:\n\nlet store; // Reference to `store` object outside of the component\nfunction setStore(s) {\n  store = s;\n}\nfunction getStore() {\n  return store;\n}\n\nfunction Counter() {\n  const [state] = useModel(countModel);\n  const store = useStore();\n  // Avoid unnecessary duplicate settings through `useMemo`\n  useMemo(() => {\n    setStore(store);\n  }, [store]);\n\n  return (\n    \n\n      \ncounter: {state.value}\n    \n  );\n}\n\n\nYou can obtain the Model object through store.use, and the usage of store.use is\nthe same as useModel. Taking the counter application as an example, we perform\nan increment operation on the counter value every 1 second outside the component\ntree:\n\nsetInterval(() => {\n  const store = getStore();\n  const [, actions] = store.use(countModel);\n  actions.add();\n}, 1000);\n\n\nThe complete sample code can be found here.\n\nINFO\n\nIf the Store object is manually created through createStore, there is no need to\nobtain it through useStore in the component, and it can be used directly.\n\nAdditional Information\n\nFor detailed API definitions related to this section, please refer to here.","frontmatter":{"sidebar_position":3,"title":"Use Models"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/use-model.mdx","_relativePath":"en/guides/topic-detail/model/use-model.mdx"},{"id":293,"title":"Using Reduck Separately","routePath":"/en/guides/topic-detail/model/use-out-of-modernjs","lang":"en","toc":[],"domain":"","content":"#\n\nWhen integrating Reduck separately from Modern.js, the following modifications\nneed to be made:\n\n 1. Install the Reduck related packages\n\nInstall the Reduck package in the project: @modern-js-reduck/react.\n\n 2. Import package names for API\n\nWhen used in Modern.js, the package name for exporting Reduck API is:\n@modern-js/runtime/model. When using Reduck separately, the package name for\nexporting is: @modern-js-reduck/react.\n\n 3. Wrap the Provider component\n\nModern.js automatically wraps the Provider component used to inject the Reduck\nglobal Store on the entry component of the application. When using Reduck\nseparately, this needs to be done manually.\n\nExample:\n\n// Root Component\nconst Root = () => {\n  return (\n    \n      {/* Entry App */}\n      \n    \n  );\n};\n\n\n 4. Feature configuration\n\nWhen used in Modern.js, Reduck features can be configured through runtime.state.\nWhen used separately, configuration needs to be done through the config or store\nparameter of Provider.\n\nExample:\n\nconst Root = () => {\n  return (\n    {/* Close Redux DevTools */}\n    \n      \n    \n  )\n}\n","frontmatter":{"sidebar_position":12,"title":"Using Reduck Separately"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/topic-detail/model/use-out-of-modernjs.mdx","_relativePath":"en/guides/topic-detail/model/use-out-of-modernjs.mdx"},{"id":294,"title":"Build FAQ","routePath":"/en/guides/troubleshooting/builder","lang":"en","toc":[{"text":"General FAQ","id":"general-faq","depth":2,"charIndex":87},{"text":"Features FAQ","id":"features-faq","depth":2,"charIndex":367},{"text":"Exceptions FAQ","id":"exceptions-faq","depth":2,"charIndex":647}],"domain":"","content":"#\n\nIf you encounter build-related problems, you can refer to the following\ndocuments:\n\n\nGeneral FAQ#\n\nPlease refer to Modern.js Builder - General FAQ, which contains some general\nquestions about concepts, such as:\n\n * The relationship between Modern.js Builder and Modern.js?\n * Can Builder be used to build libraries or UI components?\n * Will Builder support Vite?\n\n\nFeatures FAQ#\n\nPlease refer to Modern.js Builder - Features FAQ, which contains an introduction\nto some common building features, such as:\n\n * How to import UI Component library on demand?\n * How to run ESLint during compilation?\n * How to configure CDN path for static assets?\n\n\nExceptions FAQ#\n\nPlease refer to Modern.js Builder - Exceptions FAQ, which contains some common\nconstruction problems, such as:\n\n * 'compilation' argument error when webpack compiling?\n * Compile error You may need additional loader?\n * Find exports is not defined runtime error?","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/troubleshooting/builder.mdx","_relativePath":"en/guides/troubleshooting/builder.mdx"},{"id":295,"title":"CLI FAQ","routePath":"/en/guides/troubleshooting/cli","lang":"en","toc":[{"text":"Can\\'t pass command line arguments correctly when using pnpm?","id":"can\\'t-pass-command-line-arguments-correctly-when-using-pnpm?","depth":3,"charIndex":-1}],"domain":"","content":"#\n\n\nCan't pass command line arguments correctly when using pnpm?#\n\nThe pnpm v6 and pnpm v7 versions do not use the same posture when executing\ncommands. The following should be noted:\n\npnpm v7:\n\nWhen using pnpm to invoke a command in package.json, if you need to pass\narguments to pnpm, you need to put the arguments before the command.\n\nFor example, execute the prepare command with the pnpm '--filter' parameter:\n\npnpm run --filter \"./packages/**\" prepare\n\n\nIf you need to pass parameters to a command, you need to put the parameters\nafter the command.\n\nFor example, in the following package.json configuration:\n\n{\n  \"scripts\": {\n    \"command\": \"modern command\"\n  }\n}\n\n\nThe way to carry parameters when executing the command command is:\n\npnpm run command --options\n\n\npnpm v6:\n\nIn the following package.json configuration:\n\n{\n  \"scripts\": {\n    \"command\": \"modern command\"\n  }\n}\n\n\nIf you need to execute modern command --option,\n\nWhen using pnpm, you need to execute the pnpm run command -- --option.\n\nThis is because pnpm does not handle command parameters the same as Yarn, but is\nsimilar to npm: when not adding a -- character string, the parameters of pnpm\nare passed; when using a -- character string, the parameters of the execution\nscript are passed.\n\nIn the above example the parameter --option is passed to modern command. If pnpm\nrun command --option is executed, the parameter --option will be passed to pnpm.\n\nSummary:\n\nWhen using pnpm v7, if you pass arguments to pnpm, you need to put the arguments\nbefore the command\n\nWhen using pnpm v6, if the parameter passed to pnpm, you do not need to add --;\nif the parameter passed is for script use, you need to add -- character string.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/troubleshooting/cli.mdx","_relativePath":"en/guides/troubleshooting/cli.mdx"},{"id":296,"title":"Dependencies FAQ","routePath":"/en/guides/troubleshooting/dependencies","lang":"en","toc":[{"text":"How to check the actual installed version of a dependency in the project?","id":"how-to-check-the-actual-installed-version-of-a-dependency-in-the-project?","depth":3,"charIndex":3},{"text":"The engine \\\"node\\\" is incompatible when installing dependencies?","id":"the-engine-\\\"node\\\"-is-incompatible-when-installing-dependencies?","depth":3,"charIndex":-1},{"text":"ReactNode type error after upgrading dependencies?","id":"reactnode-type-error-after-upgrading-dependencies?","depth":3,"charIndex":1843},{"text":"After pnpm install, there are some peer dependencies warnings in the console?","id":"after-pnpm-install,-there-are-some-peer-dependencies-warnings-in-the-console?","depth":3,"charIndex":2882},{"text":"What is the minimum React version supported by the Modern.js framework?","id":"what-is-the-minimum-react-version-supported-by-the-modernjs-framework?","depth":3,"charIndex":3329}],"domain":"","content":"#\n\n\nHow to check the actual installed version of a dependency in the project?#\n\nYou can use the ls command that provided by the package manager to view the\ndependencies version.\n\nThe following are some basic examples, please refer to the documentation of each\npackage manager for detailed usage.\n\nnpm / yarn\n\nFor projects using npm or yarn, the npm ls command can be used.\n\nFor example, execute npm ls @modern-js/core, you can see the following results:\n\nproject\n└─┬ @modern-js/app-tools@2.0.0\n  └── @modern-js/core@2.0.0\n\n\npnpm\n\nFor projects using pnpm, you can use pnpm ls command.\n\nFor example, execute pnpm ls @modern-js/core --depth Infinity, you can see the\nfollowing results:\n\ndevDependencies:\n@modern-js/app-tools 2.0.0\n└── @modern-js/core 2.0.0\n\n\n--------------------------------------------------------------------------------\n\n\nThe engine \"node\" is incompatible when installing dependencies?#\n\nIf the following error message appears when installing dependencies, it means\nthat the version of Node.js used in the current environment is too low, and\nNode.js needs to be upgraded to a higher version.\n\nThe engine \"node\" is incompatible with this module.\n\nExpected version \">=14.17.6\". Got \"12.20.1\"\n\n\nWhen using Modern.js, it is recommended to use Node.js 14.x or Node.js 16.x.\n\nIf the Node.js version in the current environment is lower than the required\nversion, you can use nvm or [fnm](https://github.com/Schniz /fnm) and other\ntools for version switching.\n\nHere's an example using nvm:\n\n# Install Node.js v14\nnvm install 14\n\n# Switch to Node 14\nnvm use 14\n\n# Set Node 14 as the default version\nnvm default 14\n\n\nIt is recommended to use fnm in the local development environment. Its usage is\nsimilar to nvm, but it has better performance than nvm.\n\n--------------------------------------------------------------------------------\n\n\nReactNode type error after upgrading dependencies?#\n\nIf the following types of errors are reported after upgrading the project's\ndependencies, it means that the wrong @types/react version is installed in the\nproject.\n\nThe types returned by 'render()' are incompatible between these types.\nType 'React.ReactNode' is not assignable to type 'import(\"/node_modules/@types/react/index\").ReactNode'.\nType '{}' is not assignable to type 'ReactNode'.\n\n\nThe reason for this problem is that the ReactNode type definitions in React 18\nand React 16/17 are different. If there are multiple different @types/react\nversions in the project, there will be a ReactNode type conflict, resulting in\nthe above error.\n\nThe solution is to lock @types/react and @types/react-dom in the project to a\nunified version, such as v17.\n\n{\n  \"@types/react\": \"^17\",\n  \"@types/react-dom\": \"^17\"\n}\n\n\nFor the method of locking the dependency version, please refer to Lock nested\ndependency.\n\n--------------------------------------------------------------------------------\n\n\nAfter pnpm install, there are some peer dependencies warnings in the console?#\n\nThe reason for this warning is that the version range of peer dependencies\ndeclared by some third-party npm packages does not match the version range\ninstalled in Modern.js.\n\nIn most cases, you can ignore the peer dependency warnings because it will not\naffect the use of Modern.js.\n\n--------------------------------------------------------------------------------\n\n\nWhat is the minimum React version supported by the Modern.js framework?#\n\nThe recommended React version for Modern.js framework is >= 18.0.0, and\ndifferent features have different React version requirements.\n\n * If you are using React 17, some framework features, such as Steaming SSR,\n   will not be available as they rely on new features provided by React 18.\n * If you're still using React 16, you won't be able to use Modern.js's runtime\n   or server-side featurs. You can consider using Modern.js's build mode, that\n   is, only use Modern.js as a builder. In this case, you can still use React\n   16.\n\nIn a future major release of Modern.js, we will remove support for React 16 and\nReact 17. Please upgrade to React 18+ as soon as possible.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/guides/troubleshooting/dependencies.mdx","_relativePath":"en/guides/troubleshooting/dependencies.mdx"},{"id":298,"title":"Create Project","routePath":"/en/tutorials/first-app/c01-start","lang":"en","toc":[{"text":"Environment preparation","id":"environment-preparation","depth":2,"charIndex":220},{"text":"Initialization project","id":"initialization-project","depth":2,"charIndex":247},{"text":"Debug Project","id":"debug-project","depth":2,"charIndex":402},{"text":"Modify the code","id":"modify-the-code","depth":2,"charIndex":419},{"text":"Enable SSR","id":"enable-ssr","depth":2,"charIndex":1540}],"domain":"","content":"#\n\nStarting from this chapter, we will enter the practical tutorial section. In the\npractical tutorial, we will start with environment preparation, starting from\nsimple to complex, building a real project step by step.\n\n\nEnvironment preparation#\n\n\nInitialization project#\n\nWe create a new directory and initialize the project via the command line tool:\n\nmkdir myapp && cd myapp\nnpx @modern-js/create\n\n\n\nDebug Project#\n\n\nModify the code#\n\nWe delete the original sample code and replace it with a simple point of contact\nlist:\n\nsrc/routes/page.tsx\n\nconst getAvatar = (users: Array<{ name: string; email: string }>) =>\n  users.map(user => ({\n    ...user,\n    avatar: `https://avatars.dicebear.com/v2/identicon/${user.name}.svg`,\n  }));\n\nconst mockData = getAvatar([\n  { name: 'Thomas', email: 'w.kccip@bllmfbgv.dm' },\n  { name: 'Chow', email: 'f.lfqljnlk@ywoefljhc.af' },\n  { name: 'Bradley', email: 'd.wfovsqyo@gpkcjwjgb.fr' },\n  { name: 'Davis', email: '\"t.kqkoj@utlkwnpwk.nu' },\n]);\n\nfunction App() {\n  return (\n    \n   \n         {mockData.map(({ name, avatar, email }) => (\n           \n * \n              ---\n             {name} ---\n             {email}\n           \n   \n         ))}\n       \n  );\n}\n\nexport default App;\n\n\nRemove redundant css files and keep the directory free of redundant files:\n\nrm src/routes/index.css\n\n\nSince the framework supports HMR by default, you can see that the content in\nhttp://localhost:8080/ is automatically updated to:\n\n\n\nThe page has no styles at the moment. The next chapter will expand on this\nsection.\n\n\nEnable SSR#\n\nNext, we modify the modern.config.ts in the project to enable the SSR\ncapability:\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n  },\n  plugins: [appTools()],\n});\n\n\nRe-execute pnpm run dev to find that the project has completed page rendering at\nthe server level.","frontmatter":{"title":"Create Project"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c01-start.mdx","_relativePath":"en/tutorials/first-app/c01-start.mdx"},{"id":299,"title":"Add UI Components","routePath":"/en/tutorials/first-app/c02-component","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous chapter, we learned how to initialize a project and use\nconfiguration to modify the default behavior of Modern.js.\n\nIn this chapter, we continue to use the project code of the previous chapter and\ncontinue to improve the point of contact list.\n\nIn order to do better UI display and interaction, we introduce the component\nlibrary Antd to develop, and use the component instead of the primitive list.\nAdd dependency first:\n\npnpm add antd\n\n\nModify src/routes/page.tsx to import components at the top:\n\n\n\n\nModify the implementation of the component:\n\nfunction App() {\n  return (\n    \n\n       (\n          \n            }\n              title={name}\n              description={email}\n            />\n          \n        )}\n      />\n    \n  );\n}\n\n\nExecute pnpm run dev to see the running results:\n\n\n\nYou can see that the components exported by Ant Design already have complete\nstyles.\n\nnote\n\nModern.js Automatically import CSS required by Ant Design component on demand.\n\nNOTE\n\nWe can also use other component libraries to implement the same functionality,\nsuch as Arco Design.","frontmatter":{"title":"Add UI Components"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c02-component.mdx","_relativePath":"en/tutorials/first-app/c02-component.mdx"},{"id":300,"title":"Add Style","routePath":"/en/tutorials/first-app/c03-css","lang":"en","toc":[{"text":"JS components using CSS","id":"js-components-using-css","depth":2,"charIndex":154},{"text":"Utility","id":"utility","depth":2,"charIndex":2073},{"text":"Customized Utility Class","id":"customized-utility-class","depth":2,"charIndex":5130}],"domain":"","content":"#\n\nIn the previous chapter, we learned how to use components from the three-way\nlibrary.\n\nIn this chapter, we will learn how to implement UI components.\n\n\nJS components using CSS#\n\nFirst of all, we want to control the display of contact avatars by ourselves,\nand implement this design draft:\n\n\n\nHypothesis has no ready-made components to implement, so you need to write some\nCSS yourself. Here we use [styled-components] (https://styled-components.com/)\nto implement similar requirements. Modern.js out of the box supports\nstyled-components, which requires neither dependency nor configuration.\n\nStyle-components avoids many problems of traditional CSS writing through\nmodularization. For example, writing styles directly on the style attribute of\nelements, the visual details of UI will also be mixed with the details of UI\nstructure and business logic. Or classname needs to avoid global space renaming,\nwhich requires the use of naming conventions.\n\nModify the code at the top in src/routes/page.tsx:\n\n\n\n\nAdd the following code:\n\nconst Avatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border: 4px solid #0ef;\n  border-radius: 50%;\n`;\n\n\nModify the code of List.Item.Meta:\n\n}\n  title={name}\n  description={email}\n/>\n\n\nExecute pnpm run dev to see the expected running result:\n\n\n\nNext we do a little refactoring. To enhance legibility and make the code easier\nto maintain, we can split the Avatar component. We execute the following command\nat the end point to create a new file:\n\nDelete the implementation in src/routes/page.tsx and change it to:\n\n\n\n\nThe content of src/components/Avatar/index.tsx is modified to:\n\n\n\nconst Avatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border: 4px solid #0ef;\n  border-radius: 50%;\n`;\n\nexport default Avatar;\n\n\nExecute pnpm run dev, the result should be the same.\n\nnote\n\nThe reason for using the directory form Avatar/index.tsx instead of the\nsingle-file form Avatar.tsx is that you can easily add sub-files inside the\ndirectory later, including dedicated resources (pictures, etc.), dedicated\nsub-components, CSS files, etc.\n\n\nUtility#\n\nWe have used the style-components implementation component, but the current UI\nis still unsatisfactory and lacks professionalism, such as the list item inhouse\nlayout is a bit rough and misaligned in many places.\n\nNow, let's implement a better Item component ourselves, implementing a design\ndraft like this:\n\n\n\nThe UI to be implemented this time is more complex and has an internal\nstructure, but on the other hand, there is no very thick bright blue border of\nthe component such a very special UI, which is a very conventional horizontal\nand vertical layout, centering, font style, etc. In this case, there is actually\nno need to write CSS at all. There is a more efficient implementation method\nthat complements styled-components: Utility Class.\n\nModern.js integrates the mainstream, light, general-purpose Utility Class\nlibrary Tailwind CSS.\n\nExecute pnpm run new and select the following to start Tailwind CSS:\n\n? Action: Enable features\n? Enable features: Enable Tailwind CSS\n\n\nRegister the Tailwind plugin in modern.config.ts:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n  },\n  plugins: [appTools(), tailwindcssPlugin()],\n});\n\n\nImport the Tailwind CSS css file at the top of src/routes/page.tsx to start a\nquick implementation of the professional UI:\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\n\n\nCreate the Item component first:\n\nModify src/routes/page.tsx to pass the render implementation of List to Item\ncomponent:\n\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\n\n\nconst getAvatar = (users: Array<{ name: string, email: string }>) =>\n  users.map(user => ({\n    ...user,\n    avatar: `https://avatars.dicebear.com/v2/identicon/${user.name}.svg`,\n  }));\n\nconst mockData = getAvatar([\n  { name: 'Thomas', email: 'w.kccip@bllmfbgv.dm' },\n  { name: 'Chow', email: 'f.lfqljnlk@ywoefljhc.af' },\n  { name: 'Bradley', email: 'd.wfovsqyo@gpkcjwjgb.fr' },\n  { name: 'Davis', email: '\"t.kqkoj@utlkwnpwk.nu' },\n]);\n\nfunction Index() {\n  return (\n    \n\n       }\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nUtility Class(https://tailwindcss.com/docs/container) is used on the parent\ncontainer for a quick implementation of the most basic maximum width, center,\nand other styles.\n\nNext implementation src/components/Item/index.tsx:\n\n\n\ntype InfoProps = {\n  avatar: string;\n  name: string;\n  email: string;\n  archived?: boolean;\n};\n\nconst Item = ({ info }: { info: InfoProps }) => {\n  const { avatar, name, email, archived } = info;\n  return (\n    \n\n      \n      \n\n        \n\n          \n\n{name}\n          \n\n{email}\n        \n        \n          Archive\n        \n      \n    \n  );\n};\n\nexport default Item;\n\n\nExecute pnpm run dev to see the expected running result:\n\n\n\nWe only use a few Utility Classes, such as Flex, Padding, Margin, Text, Font,\nBorder, without writing a single CSS implementation Professional UI that\nconforms to the design draft.\n\n\nCustomized Utility Class#\n\nWe can also implement the new Utility Class ourselves to facilitate reuse\nbetween codes.\n\nUtility Class itself is also a component-oriented technology (using different\nclasses on a component is equivalent to setting some attributes from the base\nclass for this component), but the classname of Utility Class is global (because\nit is used on arbitrary components/elements), it is very suitable for\nimplementation with separate CSS files.\n\nCreate a new CSS file:\n\nImport utils.css in src/routes/page.tsx:\n\nimport '../styles/utils.css';\n\n\nA Utility Class named custom-text-gray is implemented in\nsrc/routes/styles/utils.css.\n\n:root {\n  --custom-text-color: rgb(113, 128, 150);\n}\n\n.custom-text-gray {\n  color: var(--custom-text-color);\n}\n\n\nnote\n\nModern.js integrates with PostCSS and supports modern CSS syntax features such\nas custom properties.\n\nUse in src/routes/components/Item/index.tsx:\n\n\n\n\nChange to:\n\n\n\n\nExecute pnpm run dev, you can see that the font color has changed:\n\n\n\nnote\n\nThis is just to demonstrate Utility Class usage. In a real project, with\nTailwind CSS, this Utility Class is of little value and should be added to the\nfont color through the theme of the configuration Design System.\n\nutils.css can also be written as utils.scss or utils.less, Modern.js out of the\nbox support for SCSS and Less.\n\nHowever, with the support of PostCSS, modern CSS should be sufficient to meet\nthese development needs, and the performance is also better than that of the\npreprocessor. It is recommended to use .css files first.","frontmatter":{"title":"Add Style"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c03-css.mdx","_relativePath":"en/tutorials/first-app/c03-css.mdx"},{"id":301,"title":"Add Client Route","routePath":"/en/tutorials/first-app/c04-routes","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous chapter, we learned how to create UI components and add styles.\n\nIn this chapter, we will learn how to add Client Route.\n\nPreviously we have added the Archive button to the point of contact list, next\nwe add a route /archives, when accessing this route, only the point of contact\nof the saved file is displayed, while the original / continues to display all\npoints of contact.\n\nCreate a new src/routes/archives/page.tsx file:\n\nAdd the following code:\n\nsrc/archives/page.tsx\n\n\n\n\n\nconst getAvatar = (users: Array<{ name: string; email: string }>) =>\n  users.map(user => ({\n    ...user,\n    avatar: `https://avatars.dicebear.com/v2/identicon/${user.name}.svg`,\n  }));\n\nconst getMockArchivedData = () =>\n  getAvatar([\n    { name: 'Thomas', email: 'w.kccip@bllmfbgv.dm' },\n    { name: 'Chow', email: 'f.lfqljnlk@ywoefljhc.af' },\n  ]);\nfunction Index() {\n  return (\n    \n\n      \n        Archives\n      \n       }\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nThe Helmet component of React Helmet is used here, and the Helmet component is\nalso added in src/routes/page.tsx:\n\n\n\nfunction Index() {\n  return (\n    \n\n      \n        All\n      \n      ...\n    \n  );\n}\n\n\nnote\n\nModern.js integrates react-helmet by default, and can also be used in\nconjunction with SSR to meet SEO needs.\n\nSince there are multiple pages now, all of which need to use the previous\nUtility Class, we need to move the style file to src/routes/layout.tsx:\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\nimport '../styles/utils.css';\n\n\nExecute pnpm run dev, visit http://localhost:8080, you can see the full point of\ncontact, the title of the page is All:\n\n\n\nVisit http://localhost:8080/archives and you will only see the point of contact\nof the saved file with the title Archives:\n\n\n\nLooking at the HTML source code of the page, you can see that the content of the\ntwo pages is the same, and different content is rendered for different URLs.\n\nNext we add a simple navigation bar that allows the user to toggle between the\ntwo lists.\n\nOpen src/routes/layout.tsx and import the Radio component at the top:\n\n\n\n\nThen modify the top of the UI to add a set of radio group:\n\nexport default function Layout() {\n  return (\n    \n\n      \n\n        \n          All\n          Archives\n        \n      \n      \n    \n  );\n}\n\n\nThen we come to the implementation of currentList and handleSetList.\n\nIntroducing three React Hooks: useState and useNavigate and useParams, as well\nas Ant Design's event type definition:\n\n\n\n\n\n\nFinally, add local state and related logic to the Layout component:\n\nexport default function Layout() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [currentList, setList] = useState(location.pathname || '/');\n  const handleSetList = (e: RadioChangeEvent) => {\n    const { value } = e.target;\n    setList(value);\n    navigate(value);\n  };\n  return (\n  ...\n}\n\n\nAt this point, the page navigation bar implementation has been completed, and\nexecute pnpm run dev to see the effect:\n\n\n\nClick Archives in the navigation bar, you can see that the selected state and\nURL of the radio box will change, the page is not refreshed, only CSR occurs.\n\nAccessing the two pages through the URL, you can see that the HTML content is\ndifferent, because the page executes the logic of client routing in the SSR\nstage, and the HTML already contains the final render result.","frontmatter":{"title":"Add Client Route"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c04-routes.mdx","_relativePath":"en/tutorials/first-app/c04-routes.mdx"},{"id":302,"title":"Add Loader","routePath":"/en/tutorials/first-app/c05-loader","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous chapter, we learned how to add client route.\n\nIn this chapter, we will learn how to add Loader to the routing component.\n\nBy far, we have provided data to components through hardcoding. If you want to\nget data from the remote, you usually use useEffect to do it. But when SSR is\nenabled, useEffect will not be executed at the server level, so this SSR can\nonly render a very limited UI.\n\nModern.js provides the ability of Data Loader to support homogeneous data\nacquisition in components to maximize the value of SSR.\n\nBelow we demonstrate how to add Data Loader to the routing component and\nsimulate remote data acquisition. We use faker to mock the required data, first\ninstall dependency:\n\npnpm add faker@5\npnpm add @types/faker@5 -D\n\n\nCreate src/routes/page.loader.ts:\n\n\n\ntype LoaderData = {\n  code: number;\n  data: {\n    name: string;\n    avatar: string;\n    email: string;\n  }[];\n};\n\nexport default async (): Promise => {\n  const data = new Array(20).fill(0).map(() => {\n    const firstName = name.firstName();\n    return {\n      name: firstName,\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\n      email: internet.email(),\n    };\n  });\n\n  return {\n    code: 200,\n    data,\n  };\n};\n\n\nNOTE\n\nData Loader doesn't just work for SSR. In CSR projects, Data Loader can also\navoid data acquisition dependency UI rendering, which solves the problem of\nrequesting dynamic grid layout. In the future, Modern.js will also add more\ncapabilities to this feature, such as pre-fetching, data caching, etc.\n\nModern.js also provides a hooks API called useLoaderData, we modify the exported\ncomponent of src/routes/page.tsx:\n\n\n\nfunction Index() {\n  const { data } = useLoaderData() as LoaderData;\n\n  return (\n    \n\n      \n        All\n      \n       }\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nRe-execute pnpm run dev, view view-source: http://localhost:8080/, or view the\n\"Preview\" of the HTML request in the Network panel of devtools, you can see that\nthe HTML rendered by SSR already contains the complete UI:\n\n","frontmatter":{"title":"Add Loader"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c05-loader.mdx","_relativePath":"en/tutorials/first-app/c05-loader.mdx"},{"id":303,"title":"Add Model","routePath":"/en/tutorials/first-app/c06-model","lang":"en","toc":[{"text":"Model implementation","id":"model-implementation","depth":2,"charIndex":707},{"text":"Use Model","id":"use-model","depth":2,"charIndex":3706}],"domain":"","content":"#\n\nIn the previous chapter, we changed the hardcoding mockData to load from Data\nLoader.\n\nIn this chapter, we will further implement the functions of the project, such as\nthe implementation of the function of the Archive button to put the point of\ncontact archive.\n\nTherefore, we will start to write some business logic that has nothing to do\nwith the UI at all. If we continue to write in the component code, more and more\nnoodle code will be generated. To this end, we introduced a code module called\nModel to decoupling these business logic and UI.\n\nnote\n\nTo use the Model API, you need to opt in runtime.state:\n\nmodern.config.ts\n\n\n\nexport default defineConfig({\n  runtime: {\n    state: true,\n  },\n});\n\n\n\nModel implementation#\n\nTo create a complete Model, you first need to define state, including the name\nand initial value of data in the state.\n\nWe use Model to manage the data of the point of contact list, so define the\nfollowing data state:\n\nconst state = {\n  items: [],\n};\n\n\nUsing TS syntax, you can define more complete type information, such as items in\neach object should have a name, email field. In order to implement archive\nfunction, also need to create the archived field to hold the point of contact\nhas been archived state.\n\nWe also need a field to access all archived points of contact. We can define a\nfield of type computed to convert the existing data:\n\nconst computed = {\n  archived: ({ items }) => {\n    return items.filter(item => item.archived);\n  },\n};\n\n\nFields of type computed are defined as function, but can be accessed through\nstate just like normal fields.\n\nINFO\n\nModern.js integrates Immer and can write such state transfer logic just like\nnormal mutable data in JS.\n\nWhen implementing the Archive button, we need an archive function, which is\nresponsible for modifying the archived field of the specified contact. We call\nthis function action:\n\nconst actions = {\n  archive(draft, payload) {\n    const target = draft.items.find(item => item.email === payload);\n    if (target) {\n      target.archived = true;\n    }\n  },\n};\n\n\nAn action function is a pure function, where a defined input gets a defined\noutput (a shifted state) and should not have any side effects.\n\nThe first parameter of the function is the Draft State provided by Immer, and\nthe second parameter is the parameter passed in when the action is called (more\non how to call it later).\n\nWe try to implement them completely:\n\nconst state = {\n  items: [],\n  pending: false,\n  error: null,\n};\n\nconst computed = {\n  archived: ({ items }) => {\n    return items.filter(item => item.archived);\n  },\n};\n\nconst actions = {\n  archive(draft, payload) {\n    const target = draft.items.find(item => item.email === payload);\n    if (target) {\n      target.archived = true;\n    }\n  },\n};\n\n\nNext we connect the above code and put it in the same Model file. First execute\nthe following command to create a new file directory:\n\nmkdir -p src/models/\ntouch src/models/contacts.ts\n\n\nAdd src/models/contacts.ts:\n\n\n\ntype State = {\n  items: {\n    avatar: string;\n    name: string;\n    email: string;\n    archived?: boolean;\n  }[];\n  pending: boolean;\n  error: null | Error;\n};\n\nexport default model('contacts').define({\n  state: {\n    items: [],\n    pending: false,\n    error: null,\n  },\n  computed: {\n    archived: ({ items }: State) => items.filter(item => item.archived),\n  },\n  actions: {\n    archive(draft, payload) {\n      const target = draft.items.find(item => item.email === payload)!;\n      if (target) {\n        target.archived = true;\n      }\n    },\n  },\n});\n\n\nWe call a plain object containing elements such as state, action, etc. as Model\nSpec, Modern.js provides Model API, which can generate Model from Model Spec.\n\n\nUse Model#\n\nNow let's use this Model directly to complement the logic of the project.\n\nFirst modify src/components/Item/index.tsx and add the UI and interaction of the\nArchive button, the content is as follows:\n\n\n\ntype InfoProps = {\n  avatar: string;\n  name: string;\n  email: string;\n  archived?: boolean;\n};\n\nconst Item = ({\n  info,\n  onArchive,\n}: {\n  info: InfoProps;\n  onArchive?: () => void;\n}) => {\n  const { avatar, name, email, archived } = info;\n  return (\n    \n\n      \n      \n\n        \n\n          \n\n{name}\n          \n\n{email}\n        \n        \n          {archived ? 'Archived' : 'Archive'}\n        \n      \n    \n  );\n};\n\nexport default Item;\n\n\nNext, we add src/routes.page.loader and modify src/routes/page.tsx to pass more\nparameters to the component:\n\nsrc/routes/page.loader.ts\n\nexport type LoaderData = {\n  code: number;\n  data: {\n    name: string;\n    avatar: string;\n    email: string;\n  }[];\n};\n\nexport default async (): Promise => {\n  const data = new Array(20).fill(0).map(() => {\n    const firstName = name.firstName();\n    return {\n      name: firstName,\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\n      email: internet.email(),\n      archived: false,\n    };\n  });\n\n  return {\n    code: 200,\n    data,\n  };\n};\n\n\nsrc/routes/page.tsx\n\n\n\n\n\n\n\n\n\n\nfunction Index() {\n  const { data } = useLoaderData() as LoaderData;\n  const [{ items }, { archive, setItems }] = useModel(contacts);\n  if (items.length === 0) {\n    setItems(data);\n  }\n\n  return (\n    \n\n      \n        All\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nuseModel is the hooks API provided by the Modern.js. You can provide the state\ndefined in the Model in the component, or call the side effects and actions\ndefined in the Model through actions to change the state of the Model.\n\nModel is business logic, a computational process that does not create or hold\nstate itself. Only after being used by the component with the hooks API, the\nstate is created in the specified place.\n\nExecute pnpm run dev and click the Archive button to see that the page UI has\nchanged.\n\nNOTE\n\nIn the above example, useLoaderData is actually executed every time the route is\nswitched. Because we used fake data in the Data Loader, the data returned each\ntime is different. But we use the data in the Model first, so the data does not\nchange when switching routes.","frontmatter":{"title":"Add Model"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c06-model.mdx","_relativePath":"en/tutorials/first-app/c06-model.mdx"},{"id":304,"title":"Add Container","routePath":"/en/tutorials/first-app/c07-container","lang":"en","toc":[{"text":"Use the full Model","id":"use-the-full-model","depth":2,"charIndex":549},{"text":"Withdraw container components","id":"withdraw-container-components","depth":2,"charIndex":2943}],"domain":"","content":"#\n\nIn the previous chapter, we initially introduced the model to split this part of\nthe logic from the UI component. The page.tsx no longer contains UI-independent\nbusiness logic implementation details, and only needs to use the Model to\nimplement the same function.\n\nIn this chapter, we will further use the business logic of implementation in\nModel to let page.tsx and archived/page.tsx get the same data. And\nimplementation Archive button, click the button to display the point of contact\narchive only in the Archives list, not in the All list.\n\n\nUse the full Model#\n\nBecause the two pages need to share the same set of state (point of contact\ntabular data, point of contact is archived or not), both need to contain the\nlogic to load the initial data, so we need to complete the data acquisition at a\nhigher level.\n\nModern.js support obtaining data through Data Loader in layout.tsx, we first\nmove the data acquisition part of the code to src/routes/layout.tsx:\n\nsrc/routes/layout.loader.ts\n\nexport type LoaderData = {\n  code: number;\n  data: {\n    name: string;\n    avatar: string;\n    email: string;\n  }[];\n};\n\nexport default async (): Promise => {\n  const data = new Array(20).fill(0).map(() => {\n    const firstName = name.firstName();\n    return {\n      name: firstName,\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\n      email: internet.email(),\n    };\n  });\n\n  return {\n    code: 200,\n    data,\n  };\n};\n\n\nsrc/routes/layout.tsx\n\n\nimport {\n  Outlet,\n  useLoaderData,\n  useLocation,\n  useNavigate,\n} from '@modern-js/runtime/router';\n\n\n\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\nimport '../styles/utils.css';\n\n\nexport default function Layout() {\n  const { data } = useLoaderData() as LoaderData;\n  const [{ items }, { setItems }] = useModel(contacts);\n  if (items.length === 0) {\n    setItems(data);\n  }\n\n  const navigate = useNavigate();\n  ...\n}\n\n\nIn src/routes/page.tsx, use Model directly to get data:\n\n\n\n\n\n\n\nfunction Index() {\n  const [{ items }, { archive }] = useModel(contacts);\n\n  return (\n    \n\n      \n        All\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nAlso in archived/page.tsx, delete the original mockData logic and use the\narchived value computed in Model as the data source:\n\n\n\n\n\n\n\nfunction Index() {\n  const [{ archived }, { archive }] = useModel(contacts);\n\n  return (\n    \n\n      \n        Archives\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nExecute pnpm run dev, visit http://localhost:8080/, click the Archive button,\nyou can see the button grey out:\n\n\n\nNext, click the top navigation and switch to the Archives list. You can find\nthat the point of contact of Archive just now has appeared in the list:\n\n\n\n\nWithdraw container components#\n\nIn the previous chapters, we split the business logic in the project into two\nlayers, one is the view component, and the other is the module. The former is\nresponsible for UI display, interaction, etc., and the latter is responsible for\nthe implementation of UI-independent business logic, which specializes in\nmanaging state.\n\nLike src/routes/page.tsx and src/routes/archives/page.tsx use the component of\nthe useModel API, which is responsible for linking the two layers of View and\nModel, similar to the role of the Controller in the traditional MVC\narchitecture. In the Modern.js, we follow the habit and call them Container.\n\nThe container component is recommended to be placed in a special containers/\ndirectory. We execute the following command to create a new file:\n\nWe extracted the common part of the original two page.tsx, and the code of\nsrc/containers/Contacts.tsx is as follows:\n\n\n\n\n\n\n\n\n\n\n\nfunction Contacts({\n  title,\n  source,\n}: {\n  title: string;\n  source: 'items' | 'archived';\n}) {\n  const [state, { archive }] = useModel(contacts);\n\n  return (\n    \n\n      \n        {title}\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Contacts;\n\n\nModify the code for src/routes/page.tsx and src/routes/archives/page.tsx:\n\nsrc/routes/page.tsx\n\n\n\nfunction Index() {\n  return ;\n}\n\nexport default Index;\n\n\nsrc/routes/archives/page.tsx\n\n\n\nfunction Index() {\n  return ;\n}\n\nexport default Index;\n\n\nThe refactoring is complete, and the current project structure is:\n\n.\n├── README.md\n├── dist\n├── modern.config.ts\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── src\n│   ├── components\n│   │   ├── Avatar\n│   │   │   └── index.tsx\n│   │   └── Item\n│   │       └── index.tsx\n│   ├── containers\n│   │   └── Contacts.tsx\n│   ├── models\n│   │   └── contacts.ts\n│   ├── modern-app-env.d.ts\n│   ├── routes\n│   │   ├── archives\n│   │   │   └── page.tsx\n│   │   ├── layout.tsx\n│   │   └── page.tsx\n│   └── styles\n│       └── utils.css\n└── tsconfig.json\n\n\nThe view components in components/ dir are in the form of directories, such as\nAvatar/index.tsx. And the container components in containers/ dir are in the\nform of single files, such as contacts.tsx. This is a best practice we\nrecommend.\n\nAs mentioned in the chapter Add UI component, the view component is in the form\nof a directory, because the view component is responsible for the implementation\nof UI display and interaction details, and can evolve in complexity. In the form\nof a directory, it is convenient to add sub-files, including dedicated resources\n(pictures, etc.), dedicated sub-components, CSS files, etc. You can reconstruct\nat will within this directory, considering only the smallest parts.\n\nThe container component is only responsible for linkage and is a glue layer. The\nsophisticated business logic and implementation details are handed over to the\nView layer and the Model layer for implementation. The container component\nitself should be kept simple and clear, and should not contain complex\nimplementation details, so there should be no internal structure. The\nsingle-file form is not only more concise, but also acts as a constraint,\nreminding developers not to write complicated container components.","frontmatter":{"title":"Add Container"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c07-container.mdx","_relativePath":"en/tutorials/first-app/c07-container.mdx"},{"id":305,"title":"Add Application Entry","routePath":"/en/tutorials/first-app/c08-entries","lang":"en","toc":[{"text":"New entry","id":"new-entry","depth":2,"charIndex":273},{"text":"Modify the configuration by entry","id":"modify-the-configuration-by-entry","depth":2,"charIndex":2999},{"text":"Next step","id":"next-step","depth":2,"charIndex":4199}],"domain":"","content":"#\n\nIn the last chapter, we basically completed the development of the point of\ncontact list application, introduced the usage of some functions in the\nModern.js, and recommended best practices.\n\nIn this chapter, we will describe how to add a new entry to the application.\n\n\nNew entry#\n\nA complete project may require multiple entries, Modern.js supports the\nautomatic creation of new entries, as mentioned in the previous section, pnpm\nrun new can enable optional features.\n\nWe can also use it to create new project elements and execute pnpm run new in\nthe project root directory:\n\n? Action Create project element\n? Create project element New \"entry\"\n? Entry name (entry) landing-page\n\n\nWhen created, the project will look like this:\n\n.\n├── README.md\n├── modern.config.ts\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── src\n│   ├── modern-app-env.d.ts\n│   ├── landing-page\n│   │   └── routes\n│   │       ├── index.css\n│   │       ├── layout.tsx\n│   │       └── page.tsx\n│   └── myapp\n│       ├── components\n│       │   ├── Avatar\n│       │   │   └── index.tsx\n│       │   └── Item\n│       │       └── index.tsx\n│       ├── containers\n│       │   └── Contacts.tsx\n│       ├── models\n│       │   └── contacts.ts\n│       ├── routes\n│       │   ├── archives\n│       │   │   └── page.tsx\n│       │   ├── layout.tsx\n│       │   └── page.tsx\n│       └── styles\n│           └── utils.css\n└── tsconfig.json\n\n\nYou can see that the files of the contact list application are automatically\nrefactored into src/myapp/.\n\nAt the same time, a new src/landing-page/ is created, which also has routes/*\n(the pnpm run new command only does these things, so you can also easily create\nnew entries or modify entries manually).\n\nExecute pnpm run dev to display:\n\n\n\nAccess http://localhost:8080/ to see the application as before.\n\nVisit http://localhost:8080/landing-page to see the landing-page for the new\nentry you just created (Modern.js automatically generated default page).\n\nOne of the design principles of the Modern.js framework is [Convention over\nConfiguration ]. In most cases, you can write code directly by convention\nwithout any configuration. The directory structure in src/ is a convention:\n\nsrc/myapp/ and src/landing-page/ are automatically identified as two application\nportals: myapp and landing-page.\n\nThe directory name of src/myapp/ is the same as the project name (name in\npackage.json), which will be considered as the main entry of the project, and\nthe root path of the project URL (the default in the development environment is\nhttp://localhost:8080/) will automatically point to the main entry.\n\nThe URL of other entries is to append the entry name after the root path, such\nas http://localhost:8080/landing-page.\n\nNext, we rename src/myapp/ to src/contacts/:\n\nmv src/myapp src/contacts\n\n\nExecute pnpm run dev again, the result becomes:\n\n\n\nThere is no longer a main entry, the point of contact list is now a normal entry\nthat needs to be accessed with http://localhost:8080/contacts.\n\n\nModify the configuration by entry#\n\nIn the Modern.js configuration file, we can write our own code to control the\nconfiguration of the project.\n\nNow, modify the modern.config.ts to add something:\n\nmodern.config.ts\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n    ssrByEntries: {\n      'landing-page': false,\n    },\n  },\n  plugins: [appTools(), tailwindcssPlugin()],\n});\n\n\nExecute pnpm run dev, and then open view-source:\nhttp://localhost:8080/landing-page with the browser, you can see that the\ncontent of the landing-page web page is dynamically loaded through js, and the\nSSR function of this page is turned off.\n\nIf ssrByEntries and its value are annotated, the SSR function of landing-page is\nrestored.\n\nOther times, you need some more sophisticated logic to do the setup, such as JS\nvariables, expressions, import modules, etc., for example, only in the\ndevelopment environment to enable SSR:\n\nexport default defineConfig({\n  server: {\n    ssrByEntries: {\n      'landing-page': process.env.NODE_ENV !== 'production',\n    },\n  },\n};\n\n\nSo far, the prototype of our point of contact list application is almost\ncomplete 👏👏👏.\n\n\nNext step#\n\nThen you can further refine your application by following more tutorials like\nGuides, configuration, and more.","frontmatter":{"title":"Add Application Entry"},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/first-app/c08-entries.mdx","_relativePath":"en/tutorials/first-app/c08-entries.mdx"},{"id":306,"title":"Introduction","routePath":"/en/tutorials/foundations/introduction","lang":"en","toc":[{"text":"What is Modern.js?","id":"what-is-modernjs?","depth":2,"charIndex":169},{"text":"Tutorial","id":"tutorial","depth":2,"charIndex":271}],"domain":"","content":"#\n\nWelcome to Modern.js tutorials!\n\nAfter reading this section, you will have an initial understanding of Modern.js\nand use Modern.js to create your first application.\n\n\nWhat is Modern.js?#\n\nIf you don't know Modern.js yet, please can read Modern.js Introduction first.\n\n\nTutorial#\n\nWe have prepared a tutorial on creating a \"contact list app\" that you can follow\nstep by step to create an app and learn about the following practices in\nModern.js:\n\n * Creating a project\n * Using the antd component library\n * Integrating Tailwind CSS\n * Client-side routing\n * Data fetching\n * State Management\n * Container components\n * New portal\n * ...","frontmatter":{"title":"Introduction","sidebar_position":1},"_filepath":"/home/runner/work/modern-js/modern-js/packages/document/main-doc/docs/en/tutorials/foundations/introduction.mdx","_relativePath":"en/tutorials/foundations/introduction.mdx"}]